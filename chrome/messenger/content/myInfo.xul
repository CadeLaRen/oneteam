<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://messenger/skin/myInfo.css" type="text/css"?>
<?xml-stylesheet href="chrome://messenger/skin/dialog.css" type="text/css"?>
<?xml-stylesheet href="chrome://messenger/content/bindings/bindings.css" type="text/css"?>

<!DOCTYPE dialog [
  <!ENTITY % dialogsDTD SYSTEM "chrome://messenger/locale/dialogs.dtd" >
  %dialogsDTD;
]>

<dialog id="myInfo" windowtype="ot:myInfo" title="My vCard"
  width="800" height="600"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml"
  buttonlabelaccept="Publish" buttonlabelcancel="&dialog.cancel.label;" buttonlabelextra1="Refresh"
  buttons="extra1,accept,cancel"
  onload="onLoad()" ondialogaccept="return saveVCard()" ondialogextra1="fetchVCard(true)">

  <script type="text/javascript;version=1.7"><![CDATA[
    var avatarList;

    function onLoad() {
//      if (window.arguments[0] == 1)
//        document.getElementById("tabs").selectedIndex = 2;
      avatarList = document.getElementById("avatarList");
      fetchVCard();
/* #ifndef XULAPP
      document.getElementById("avatarUploadForm").action = document.location.href.
// #ifdef NOJAR
        replace(/\/content\/.*$/, "/service/b64encode");
// #else
        replace(/jar:/, "").replace(/\/[^\/]*!.*$/, "/service/b64encode");
// #endif
// #endif */
    }

    function handlePhoto(generateResult, tree)
    {
      if (generateResult) {
        var ns = new Namespace("vcard-temp");
        var avatarData = window.opener.account.cache.
          getValue("avatar-"+avatarList.selectedAvatarHash);

        default xml namespace = ns;
        return <><BINVAL>{btoa(avatarData)}</BINVAL></>;
      } else {
        avatarList.selectAvatar(window.opener.account.avatarHash,
                                window.opener.account.avatar);
      }
    }

    const map = {
      FN: "name",
      N: {
        FAMILY: "lastName",
        GIVEN:  "firstName",
        MIDDLE: "secondName",
        PREFIX: "prefix",
        SUFFIX: "suffix"
      },
      NICKNAME: "nickName",
      BDAY: "birthday",
      URL: "homepage",
      EMAIL: [
        { WORK: 1 },
        {
          USERID: "workEmail",
        },
        { HOME: 1 },
        {
          USERID: "email",
        },
      ],
      ADR: [
        { WORK: 1 },
        {
          EXTADD: "workExtadd",
          STREET: "workStreet",
          CITY: "workCity",
          PCODE: "workPostalCode",
          CTRY: "workCountry",
          REGION: "workRegion",
        },
        { HOME: 1 },
        {
          EXTADD: "extadd",
          STREET: "street",
          CITY: "city",
          PCODE: "postalCode",
          CTRY: "country",
          REGION: "region",
        },
      ],
      ROLE: "role",
      ORG: {
        ORGNAME: "company",
        ORGUNIT: "department",
        TITLE: "position",
      },
      PHOTO: handlePhoto
    };

    function parse(tree, map)
    {
      if (!tree || !tree.length() || !map)
        return;

      var ns = tree[0].namespace();

      if (map instanceof Array) {
        var parts = [];
        tree = tree.parent().ns::[tree[0].name()];

        for (var i = 0, handled = 0; i < map.length; i+=2, handled = 0) {
          for (var j in map[i]) {
            var treePart = tree.(function::elements(new QName(ns, j)).length())
            handled = 1;

            if (treePart.length()) {
              handled = 2;
              parse(treePart, map[i+1]);
              parts.push(treePart);
            }
          }
          if (handled == 0 || (handled == 1 && i == map.length-2)) {
            for each (i in tree)
              if (parts.indexOf(i) != 0) {
                parse(i, map[i+i]);
                return;
              }
            }
        }
      }

      for (var i in map)
        if (typeof(map[i]) == "string")
          document.getElementById(map[i]).value = tree.ns::[i].text().toString();
        else if (typeof(map[i]) == "function")
          map[i](0, tree.ns::[i]);
        else
          parse(tree.ns::[i], map[i]);
    }

    function generate(map, ns) {
      default xml namespace = ns;
      var result = new XMLList(), val;

      for (var i in map) {
        if (typeof(map[i]) == "string") {
          if (val = document.getElementById(map[i]).value)
            result += <{i}>{val}</{i}>;
        } else if (typeof(map[i]) == "function") {
          var subresult = map[i](1);

          if (subresult != null && subresult.length())
            result += <{i}/>.appendChild(subresult);
        } else if (map[i] instanceof Array) {
          for (var j = 0; j < map[i].length; j += 2) {
            var subresult = generate(map[i][j+1], ns);
            if (subresult.length()) {
              for (var k in map[i][j])
                subresult += <{k}/>;
              result += <{i}/>.appendChild(subresult);
            }
          }
        } else {
          var subresult = generate(map[i], ns);

          if (subresult.length())
            result += <{i}/>.appendChild(subresult);
        }
      }
      return result;
    }

    function saveVCard() {
      var ns = new Namespace("vcard-temp")
      default xml namespace = ns;

      var vcard = <vCard/>
      vcard.appendChild(generate(map, ns));

      window.opener.account.setVCard(vcard);

      return true;
    }

    function fetchVCard(force) {
      document.getElementById("updateProgress").style.visibility = "visible";
      window.opener.account.getVCard(force, fetchDone);
    }

    function fetchDone(pkt) {
      document.getElementById("updateProgress").style.visibility = "hidden";
      parse(window.opener.DOMtoE4X(pkt.getNode()).elements(), map);
    }

    var avatarFetchState = false;

    function submitAvatar(tag) {
      tag.parentNode.collapsed = true; // form box
      tag.parentNode.nextSibling.hidden = false;
      avatarFetchState = true;
      return true;
    }

    function avatarSubmited(tag) {
      tag.parentNode.collapsed = false; // form box
      tag.parentNode.nextSibling.hidden = true;

      if (!avatarFetchState)
        return;

      avatarFetchState = false;

      var data;
      try {
        data = tag.contentDocument.documentElement.textContent;
      } catch(ex) {window.opener.report("developer", "error", ex)}

      try {
        if (data)
          data = atob(data.replace(/\s/g, ""));
      } catch (ex) {
        data = null;
      }

      if (data)
        avatarList.addAvatar(data);
      else
        alert("Can't read your avatar image data");
    }
  ]]></script>

  <dialogheader title="My vCard"/>
  <spacer style="height: 0.6em"/>

  <vbox flex="1">
    <tabbox flex="1" id="tabs">
      <tabs>
        <tab label="Personal"/>
        <tab label="Work"/>
        <tab label="Appearance"/>
      </tabs>
      <tabpanels flex="1">
        <tabpanel orient="vertical">
          <hbox>
            <label value="Name" control="name" style="width: 10em"/>
            <textbox id="name" flex="1"/>
          </hbox>
          <groupbox>
            <caption label="Name Details"/>
            <grid>
              <columns>
                <column style="width: 10em"/>
                <column flex="1"/>
                <column style="width: 10em"/>
                <column flex="1"/>
              </columns>
              <rows>
                <row>
                  <label value="First Name" control="firstName"/>
                  <textbox id="firstName"/>
                  <label value="Last Name" control="lastName"/>
                  <textbox id="lastName"/>
                </row>
                <row>
                  <label value="Second Name" control="secondName"/>
                  <textbox id="secondName"/>
                  <label value="Nick Name" control="nickName"/>
                  <textbox id="nickName"/>
                </row>
                <row>
                  <label value="Prefix" control="prefix"/>
                  <textbox id="prefix"/>
                  <label value="Suffix" control="suffix"/>
                  <textbox id="suffix"/>
                </row>
              </rows>
            </grid>
          </groupbox>
          <grid style="margin: 0.5em">
            <columns>
              <column style="width: 10em"/>
              <column flex="1"/>
              <column style="width: 10em"/>
              <column flex="1"/>
            </columns>
            <rows>
              <row>
                <label value="Homepage" control="homepage"/>
                <textbox id="homepage"/>
                <label value="E-Mail" control="email"/>
                <textbox id="email"/>
              </row>
              <row>
                <label value="Birthday" control="birthday"/>
                <textbox id="birthday"/>
                <label value="Phone" control="phone"/>
                <textbox id="phone"/>
              </row>
            </rows>
          </grid>
          <groupbox>
            <caption label="Address"/>
            <grid>
              <columns>
                <column style="width: 10em"/>
                <column flex="1"/>
                <column style="width: 10em"/>
                <column flex="1"/>
              </columns>
              <rows>
                <row>
                  <label value="Street" control="street"/>
                  <textbox id="street"/>
                  <label value="ExtAdd" control="extadd"/>
                  <textbox id="extadd"/>
                </row>
                <row>
                  <label value="City" control="city"/>
                  <textbox id="city"/>
                  <label value="Postal code" control="postalCode"/>
                  <textbox id="postalCode"/>
                </row>
                <row>
                  <label value="Region" control="region"/>
                  <textbox id="region"/>
                  <label value="Country" control="country"/>
                  <textbox id="country"/>
                </row>
              </rows>
            </grid>
          </groupbox>
        </tabpanel>
        <tabpanel orient="vertical">
          <grid style="margin: 0.5em">
            <columns>
              <column style="width: 10em"/>
              <column flex="1"/>
              <column style="width: 10em"/>
              <column flex="1"/>
            </columns>
            <rows>
              <row>
                <label value="Company" control="company"/>
                <textbox id="company"/>
                <label value="Department" control="department"/>
                <textbox id="department"/>
              </row>
              <row>
                <label value="Position" control="position"/>
                <textbox id="position"/>
                <label value="Role" control="role"/>
                <textbox id="role"/>
              </row>
              <row>
                <label value="E-Mail" control="workEmail"/>
                <textbox id="workEmail"/>
                <label value="Phone" control="workPhone"/>
                <textbox id="workPhone"/>
              </row>
            </rows>
          </grid>
          <groupbox>
            <caption label="Address"/>
            <grid>
              <columns>
                <column style="width: 10em"/>
                <column flex="1"/>
                <column style="width: 10em"/>
                <column flex="1"/>
              </columns>
              <rows>
                <row>
                  <label value="Street" control="street"/>
                  <textbox id="workStreet"/>
                  <label value="ExtAdd" control="extadd"/>
                  <textbox id="workExtadd"/>
                </row>
                <row>
                  <label value="City" control="city"/>
                  <textbox id="workCity"/>
                  <label value="Postal code" control="postalCode"/>
                  <textbox id="workPostalCode"/>
                </row>
                <row>
                  <label value="Region" control="region"/>
                  <textbox id="workRegion"/>
                  <label value="Country" control="country"/>
                  <textbox id="workCountry"/>
                </row>
              </rows>
            </grid>
          </groupbox>
        </tabpanel>
        <tabpanel orient="vertical">
          <groupbox flex="1">
            <caption label="Avatar"/>
            <avatarlist id="avatarList" flex="1"/>
          </groupbox>
          <hbox>
            <spacer flex="1"/>
            <html:form id="avatarUploadForm" method="post"
                       enctype="multipart/form-data" onsubmit="submitAvatar(this)"
                       target="avatarIframe">
              <html:input type="file" name="avatar" flex="1"/>
              <html:input type="submit" value="Add image..."/>
            </html:form>
            <html:iframe id="avatarIframe" style="visibility: collapse"
                         onload="avatarSubmited(this)"/>
          </hbox>
          <progressmeter mode="undetermined" hidden="true"/>
        </tabpanel>
      </tabpanels>
    </tabbox>
    <hbox>
      <progressmeter id="updateProgress" mode="undetermined" hidden="true" flex="1"/>
    </hbox>
    <spacer style="height: 1em;"/>
    <hbox align="end" pack="end">
      <button dlgtype="extra1" label="Refresh"/>
      <spacer style="width: 4em"/>
      <button dlgtype="cancel" label="Cancel"/>
      <button dlgtype="accept" label="Publish"/>
    </hbox>
  </vbox>
</dialog>
