<?xml version="1.0" encoding="ISO-8859-1"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://messenger/skin/main.css" type="text/css"?>
<?xml-stylesheet href="chrome://messenger/content/bindings/bindings.css" type="text/css"?>

<!DOCTYPE window [
<!ENTITY % guiDTD SYSTEM "chrome://messenger/locale/gui.dtd">
<!ENTITY % messengerDTD SYSTEM "chrome://messenger/locale/messenger.dtd">
%guiDTD;
%messengerDTD;
]>

<window id="ot:main" title="OneTeam"
    onload="onLoad()" onclose="return onClose()" onunload="onUnload()"
    persist="width height" width="170" height="450"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <script type="text/javascript" src="lib/jsjac/xmlextras.js"/>
  <script type="text/javascript" src="lib/jsjac/crypt.js"/>
  <script type="text/javascript" src="lib/jsjac/json.js"/>
  <script type="text/javascript" src="lib/jsjac/qm_cookie.js"/>
  <script type="text/javascript" src="lib/jsjac/JSJaCConnection.js"/>
  <script type="text/javascript" src="lib/jsjac/JSJaCPacket.js"/>
  <script type="text/javascript" src="lib/jsjac/JSJaCHttpPollingConnection.js"/>
  <script type="text/javascript" src="lib/jsjac/JSJaCHttpBindingConnection.js"/>

  <script type="text/javascript;version=1.7" src="JavaScript/roles.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/exceptions.js"/>
  <!-- #ifdef XULAPP -->
  <script type="text/javascript;version=1.7" src="JavaScript/file.js"/>
  <!-- #endif -->
  <script type="text/javascript;version=1.7" src="JavaScript/dateutils.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/utils.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/l10n.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/prefs.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/cache.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/history.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/modeltypes.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/notification.js"/>
  <!-- #ifdef XULAPP -->
  <script type="text/javascript;version=1.7" src="JavaScript/socks5.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/filetransfer.js"/>
  <!-- #endif -->
  <script type="text/javascript;version=1.7" src="JavaScript/model/presenceProfiles.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/model/roster.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/model/conference.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/model/account.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/views/roster.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/views/conference.js"/>

  <script type="text/javascript" src="chrome://global/content/nsDragAndDrop.js"/>
	<script type="text/javascript" src="chrome://global/content/nsTransferable.js"/>
   
  <script type="text/javascript;version=1.7"><![CDATA[
    function updateContactContextMenu(menu, event)
    {
      if (event.target != menu)
        return;

      var cs = document.getElementById("contact-chat-single");
      var cm = document.getElementById("contact-chat-multi");
      var im = document.getElementById("contact-invite");
      var sf = document.getElementById("contact-send-file");

      sf.hidden = !activeItem.activeResource;

      cm.hidden = !(cs.hidden = activeItem.resources.length > 1);
      if (cs.hidden) {
        var list = cm.firstChild;
        while (list && list.firstChild)
          list.removeChild(list.firstChild);
        for (var i = 0; i < activeItem.resources.length; i++) {
          var item = document.createElement("menuitem");
          item.setAttribute("label", activeItem.resources[i].jid.resource+" ("+
            activeItem.resources[i].priority+")");
          item.setAttribute("oncommand", "this.model.onOpenChat()");
          item.model = activeItem.resources[i];
          list.appendChild(item);
        }
      }

      im.hidden = !account.conferences.length;
      if (!im.hidden) {
        list = im.firstChild;
        while (list && list.firstChild)
          list.removeChild(list.firstChild);
        for (var i = 0; i < account.conferences.length; i++) {
          var item = document.createElement("menuitem");
          item.setAttribute("label", account.conferences[i].jid);
          item.setAttribute("oncommand", "this.model.invite(this.contact)");
          item.model = account.conferences[i];
          item.contact = activeItem.jid;
          list.appendChild(item);
        }
      }

      document.getElementById("contact-authorisation-ask").
        setAttribute("disabled", activeItem.canSeeHim);
      document.getElementById("contact-authorisation-allow").
        setAttribute("disabled", activeItem.canSeeMe);
      document.getElementById("contact-authorisation-disallow").
        setAttribute("disabled", !activeItem.canSeeMe);
    }

    var setPresenceUpdater = {
      onPresenceChange: function() {
        this.chooser.value = account.currentPresence.show || "available";
        this.onIconSetChange();
      },

      onConnect: function()
      {
        document.getElementById("main-deck").selectedIndex = account.connected ? 1 : 0;
        document.getElementById("setPresence-nick").value = account.connectionInfo.user;
        if (!this.rosterView) {
          this.rosterView = new RosterView(document.getElementById("contacts-list"));
          this.conferencesView = new ConferencesView(document.getElementById("conferences-list"));
          this.bookmarksMenuView =
            new BookmarksMenuView(document.getElementById("conference-menu-separator"));
          this.presenceProfilesView =
            new PresenceProfilesView(document.getElementById("setPresence-profile-dummy"),
                                     this.profileEnable);
          document.getElementById("cmd_toggleShowOffline").
            setAttribute("checked", this.rosterView.hideOffline);
          document.getElementById("conference-contextmenu").view = this.conferencesView;
        }
        if (!account.connected)
          ChatPane.prototype.closeAllTabs();
      },

      onCommand: function()
      {
        if (this._skip)
          return;

        if (this.chooser.value) {
          this.presence = this.chooser.value;
          account.setPresence(this.presence, null, null,
            this.profileEnable.checked ? this.profile : null, true);
        } else {
          this._skip = true;
          this.chooser.value = this.presence;
          this._skip = false;
          account.onCustomPresence(this.presence,
            this.profileEnable.checked ? this.profile : null);
        }
      },

      get profile()
      {
        if (this.profileEnable.checked)
          return this.profileChooser.selectedItem && this.profileChooser.selectedItem.model;
        return null;
      },

      onProfileCommand: function()
      {
        if (this._skip)
          return;
        if (this.profileChooser.value) {
          this.profileValue = this.profileChooser.value;

          if (this.profileEnable.checked)
            account.setPresence(this.presence, null, null, this.profile, true);
        } else {
          this._skip = true;
          this.profileChooser.value = this.profileValue;
          this._skip = false;

          account.onEditPresenceProfiles();
        }
      },

      onProfileEnable: function(enabled)
      {
          account.setPresence(this.presence, null, null,
            this.profileEnable.checked ? this.profile : null, true);
      },

      onProfilesChange: function()
      {
      },

      onIconSetChange: function()
      {
        document.getElementById("setPresence-type-image").src =
// #ifdef XULAPP
          this.systray.icon =
// #endif
          presenceToIcon(account.currentPresence.show||"available");
      },

      init: function()
      {
        account.registerView(this, "onConnect", "connected");
        account.registerView(this, "onPresenceChange", "currentPresence");
        account.registerView(this, "onIconSetChange", "iconSet");

        this.chooser = document.getElementById("setPresence-type-chooser");
        this.profileChooser = document.getElementById("setPresence-profile-chooser");
        this.profileEnable = document.getElementById("setPresence-profile-enable");
// #ifdef XULAPP
        this.systray = document.getElementById("systray");
        this.systray.icon = presenceToIcon(account.currentPresence.show||"available");
// #endif
        this.presence = this.chooser.value;
      }
    };

    function onLoad() {
      setPresenceUpdater.init();
      document.getElementById("login-user").value = account.connectionInfo.user;
      document.getElementById("login-pass").value = account.connectionInfo.pass;
      document.getElementById("login-savePass").checked = account.connectionInfo.pass != null;
    }

    function onClose() {
    //#ifdef XULAPP
      setPresenceUpdater.systray.minimized = true;
      return false;
    /*#else
      return true;
    //#endif */
    }

    function onUnload() {
    //#ifndef XULAPP
      if (window.con)
        window.con.disconnect();
    //#endif */
    }

    function quit() {
      if (window.con)
        window.con.disconnect();

    //#ifdef XULAPP
      Components.classes['@mozilla.org/toolkit/app-startup;1'].
        getService(Components.interfaces.nsIAppStartup).
          quit(Components.interfaces.nsIAppStartup.eAttemptQuit);
    /*#else
      window.close();
    //#endif */
    }

    function connect() {
      account.setUserAndPass(document.getElementById("login-user").value,
        document.getElementById("login-pass").value,
        document.getElementById("login-savePass").checked);
      account.connect();
    }

    function ChatPane(contact) {
        this.contact = contact;

        var id = "panel"+(++this.__proto__.idx);

        const ns = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
        this.tabpanel = document.createElementNS(ns, "tabpanel");
        this.tabpanel.setAttribute("id", id)
        this.tabpanel.setAttribute("flex", "1");
        this.tabpanel.controler = this;

        this.tab = document.createElementNS(ns, "tab");
        this.tab.setAttribute("label", contact.visibleName);
        this.tab.setAttribute("hasclosebutton", "true");
        this.tab.setAttribute("oncommand", "this.controler.close()");
        this.tab.setAttribute("linkedpanel", id)
        this.tab.controler = this;

        var vbox = document.createElement("vbox");
        vbox.setAttribute("flex", "1");

        var me = this;

        this.chatPane = document.createElement("chatpane");
        this.chatPane.setAttribute("flex", "1");
        this.chatPane.addEventListener("chat-send", function(){me.onSend()}, false);

        vbox.appendChild(this.chatPane);
        this.tabpanel.appendChild(vbox)

        this.chats = document.getElementById("chats");
        this.chats._tabpanels.appendChild(this.tabpanel);
        this.chats._tabs.appendChild(this.tab);

        //this.chatPane.hasSubject = contact instanceof Conference;

        this.__proto__._allPanes.push(this);
        this._resizeWindow(true);
        this.focus();
    }

    _DECL_(ChatPane).prototype =
    {
      idx: 0,

      _allPanes: [],

      closed: false,

      updateContact: function(contact)
      {
        this.contact = contact;
        this.tab.setAttribute("label", contact.visibleName);
      },

      closeAllTabs: function()
      {
        var panes = ChatPane.prototype._allPanes;
        ChatPane.prototype._allPanes = [];
        if (panes.length)
          ChatPane.prototype._resizeWindow();

        for (var i = 0; i < panes.length; i++)
          panes[i].close();
      },

      focus: function()
      {
        if (this.closed)
          return;
        this.chats.selectedTab = this.tab;
        this.chatPane.focus();
      },

      close: function()
      {
        if (this.closed)
          return;

        var nextTab = this.tab.selected ? this.tab.nextSibling || this.tab.previousSibling :
          this.chats.selectedTab;

        if (nextTab) {
          nextTab.selected = false;
          nextTab.controler.focus();
          nextTab.selected = true;
        }

        this.tabpanel.parentNode.removeChild(this.tabpanel);
        this.tab.parentNode.removeChild(this.tab);
        this.closed = true;

        if (nextTab) {
          nextTab.selected = false;
          nextTab.controler.focus();
          nextTab.selected = true;
        }

        if (this.contact instanceof Conference) {
          this.contact.exitRoom();
        }

        this.__proto__._allPanes.splice(this.__proto__._allPanes.indexOf(this),1);
        this.tab = this.tabpanel = this.chats = null;
        this._resizeWindow(false);
      },

      _resizeWindow: function(paneAdded)
      {
        // #ifdef XULAPP
        var splitter = document.getElementById("chats-splitter");
        var chats = document.getElementById("chats");

        if (paneAdded) {
          if (ChatPane.prototype._allPanes.length != 1)
            return;
          splitter.collapsed = false;
          chats.collapsed = false;
          splitter.previousSibling.flex = "0";
          splitter.previousSibling.setAttribute("width", self.innerWidth);
          self.resizeTo(self.outerWidth+(+splitter.getAttribute("rightWidth") || 500),
                        self.outerHeight);
        } else if (ChatPane.prototype._allPanes.length == 0) {
          var width = +splitter.previousSibling.getAttribute("width");

          splitter.collapsed = true;
          chats.collapsed = true;
          splitter.previousSibling.flex = "1";
          splitter.setAttribute("rightWidth", self.outerWidth - width);

          self.resizeTo(self.outerWidth - self.innerWidth + width, self.outerHeight);
          }
        // #endif
      },

      onSend: function()
      {
        var body = this.chatPane.content.replace(/\n$/, "");

        if (!(this.contact instanceof Conference))
          this.addMessage(this.contact.interlocutorName, body,
            "me", this.contact.jid);

        this.contact.sendMessage(body);
      },

      addMessage: function(from, body, authorId, jid, time)
      {
        this.threadId = account.historyMgr.addMessage(jid,
          this.contact instanceof Conference ? 1 : 0, authorId == "me" ? 0 : 1,
          body, from, time, this.threadId, this.contact.jid.shortJID);

        if (this.closed)
          return;
        this.chatPane.addMessage(from, body, authorId, jid, time);
      }
    }
  ]]></script>

  <comandset>
    <command id="cmd_addContact" key="key_addContact" oncommand="account.onAddContact()"/>
    <command id="cmd_joinRoom" key="key_joinRoom" oncommand="account.onJoinRoom()"/>
    <command id="cmd_manageBookmarks" oncommand="account.onManageBookmarks()"/>
<!-- #ifdef XULAPP -->
    <command id="cmd_history" key="key_history" oncommand="account.showHistoryManager()"/>
    <command id="cmd_transfers" key="key_transfers" oncommand="account.showTransfersManager()"/>
<!-- #else
    <command id="cmd_history" key="key_history" oncommand="account.showHistoryManager()" disabled="true"/>
    <command id="cmd_transfers" key="key_transfers" oncommand="account.showTransfersManager()" disabled="true"/>
// #endif -->
    <command id="cmd_disco" key="key_disco" oncommand="account.showDisco()"/>
    <command id="cmd_disconnect" oncommand="con.disconnect()"/>
    <command id="cmd_quit" key="key_quit" oncommand="quit()"/>

    <command id="cmd_ourVCard" key="key_ourVCard" oncommand="account.showVCard()"/>
<!-- #ifdef XULAPP -->
    <command id="cmd_extensions" oncommand=""/>
    <command id="cmd_themes" key="key_themes" oncommand=""/>
<!-- #endif -->
    <command id="cmd_prefs" key="key_prefs" oncommand="account.showPrefs()"/>

    <command id="cmd_help" key="key_help" oncommand=""/>
    <command id="cmd_xmlConsole" key="key_xmlConsole" oncommand="account.showConsole()"/>
<!-- #ifdef DEBUG -->
    <command id="cmd_jsConsole" oncommand='window.openDialog("chrome://global/content/console.xul", "_blank","chrome,dialog=no,all", "")'/>
    <command id="cmd_cmdConsole" oncommand='window.openDialog("command.xul", "_blank","chrome,dialog=no,all", "")'/>
<!-- #endif -->
    <command id="cmd_about" oncommand="account.showAbout()"/>

    <command id="cmd_toggleShowOffline" key="key_toggleShowOffline"
      oncommand="this.setAttribute('checked', setPresenceUpdater.rosterView.hideOffline =
        !setPresenceUpdater.rosterView.hideOffline)"/>
  </comandset>

  <keyset>
    <key id="key_addContact" modifiers="control" key="A" command="cmd_addContact"/>
    <key id="key_joinRoom" modifiers="control" key="J" command="cmd_joinRoom"/>
    <key id="key_disco" modifiers="control" key="S" command="cmd_disco"/>
    <key id="key_quit" modifiers="control" key="Q" command="cmd_quit"/>
    <key id="key_ourVCard" modifiers="control" key="E" command="cmd_ourVCard"/>
<!-- #ifdef XULAPP -->
    <key id="key_themes" modifiers="control" key="T" command="cmd_themes"/>
<!-- #endif -->
    <key id="key_prefs" modifiers="control" key="P" command="cmd_prefs"/>
    <key id="key_help" modifiers="control" key="H" command="cmd_help"/>
    <key id="key_xmlConsole" modifiers="control" key="C" command="cmd_xmlConsole"/>
    <!-- #ifdef DEBUG -->
    <key id="key_jsConsole" modifiers="control" key="M" command="cmd_jsConsole"/>
    <key id="key_cmdConsole" modifiers="control" key="N" command="cmd_cmdConsole"/>
    <!-- #endif -->
    <key id="key_toggleShowOffline" modifiers="control" key="O" command="cmd_toggleShowOffline"/>
    <key id="key_history" modifiers="control" key="H" command="cmd_history"/>
    <key id="key_transfers" modifiers="control" key="T" command="cmd_transfers"/>
  </keyset>

  <deck id="main-deck" flex="1" selectedIndex="0">
    <vbox id="login-box">
      <hbox pack="center">
        <image id="login-logo"/>
      </hbox>
      <vbox id="login-user-box">
        <label control="login-user" value="&Login.login;"/>
        <textbox id="login-user" flex="1"/>
      </vbox>
      <vbox id="login-pass-box">
        <label control="login-pass" value="&Login.password;"/>
        <textbox id="login-pass" type="password"/>
      </vbox>
      <hbox pack="center">
        <checkbox id="login-savePass" checked="true" label="Remember password"/>
      </hbox>
      <hbox pack="center">
        <button id="login-signin" label="&Login.signin;" oncommand="connect()"/>
      </hbox>
      <spacer/>
      <hbox id="login-settings-box">
        <label crop="end" class="text-link" value="&Login.settings;"
          onclick="account.showPrefs();"/>
        <label value="|"/>
        <label crop="end" class="text-link" value="&Login.NewAccount;"
          onclick='window.open("account.xul", "Startup settings", "chrome,centerscreen,dialog,resizable");'/>
      </hbox>
    </vbox>
    <vbox id="main-box" flex="1">
      <toolbox>
        <menubar>
          <menu id="lagger-menu" label="OneTeam" accesskey="O">
            <menupopup id="file-popup">
              <menuitem label="&menulagger.addContact;" command="cmd_addContact"
                  accesskey="&shortcurt.add;"/>

              <menu label="&menulagger.joinConference;"
                  accesskey="&shortcurt.join;">
                <menupopup>
                  <menuitem label="&menulagger.joinConference;" command="cmd_joinRoom"/>
                  <menuseparator/>
                  <menuseparator id="conference-menu-separator" hidden="true"/>
                  <menuitem label="Manage Bookmarks" accesskey="M" command="cmd_manageBookmarks"/>
                </menupopup>
              </menu>
              <menuseparator/>
              <menuitem label="&menulagger.servicesDiscovery;" command="cmd_disco"
                  accesskey="&shortcurt.service;"/>
          <!-- <menuitem label="&menulagger.adminTools;"/> -->
              <menuitem label="Histroy Manager" command="cmd_history"
                accesskey="H"/>
              <menuitem label="File Transfers" command="cmd_transfers"
                accesskey="T"/>
              <menuseparator/>
              <menuitem label="&menulagger.disconnect;" command="cmd_disconnect"/>
              <menuitem label="&menulagger.quitter;" command="cmd_quit"
                  accesskey="&shortcurt.quit;"/>
            </menupopup>
          </menu>
          <menu id="configuration-menu" label="&menuConfig.configuration;">
            <menupopup id="config-popup">
              <menuitem label="&menuConfig.editinfo;" command="cmd_ourVCard()"
                  accesskey="&shortcurt.edit;"/>
              <menuseparator/>
<!-- #ifdef XULAPP -->
              <menuitem label="&menuConfig.plugins;" command="cmd_extensions"/>
              <menuitem label="&menuConfig.themes;" command="cmd_themes()"
                  accesskey="&shortcurt.themes;"/>
              <menuseparator/>
<!-- #endif -->
              <menuitem label="&menuConfig.preferences;" command="cmd_prefs"
                  accesskey="&shortcurt.pref;"/>
            </menupopup>
          </menu>
          <menu id="help-menu" label="&menuAide.Aide;">
            <menupopup id="help-popup">
              <menuitem label="&menuAide.aide_rapide;" command="cmd_help"
                  accesskey="&shortcurt.help;"/>
              <menuitem label="&menuAide.console;" command="cmd_xmlConsole"
                  accesskey="&shortcurt.console;"/>
              <menuitem label="JavaScript Console" command="cmd_jsConsole"/>
              <menuseparator/>
              <menuitem label="&menuAide.apropos;" command="cmd_about"/>
            </menupopup>
          </menu>
        </menubar>
        <toolbar id="icones-toolbar">
          <toolbarbutton id="adduser-button" tooltiptext="adduser.tooltip"
              command="cmd_addContact"/>
          <toolbarbutton id="joinroom-button" tooltiptext="joinroom.tooltip"
              command="cmd_joinRoom"/>
          <toolbarseparator/>
          <toolbarbutton id="toggleshowoffline-button" tooltiptext="toggleshowoffline.tooltip"
              command="cmd_toggleShowOffline"/>
          <toolbarbutton id="disco-button" tooltiptext="disco.tooltip"
              command="cmd_disco"/>
          <toolbarbutton id="editgroups-button" tooltiptext="teditgroups.tooltip"
              oncommand="customGroups()"/>
        </toolbar>
      </toolbox>
      <hbox flex="1">
        <!-- #ifdef XULAPP -->
        <vbox flex="1">
        <!-- #else
        <vbox width="250">
        // #endif -->
          <hbox id="setPresence-box">
            <vbox pack="start">
              <image id="setPresence-type-image"/>
            </vbox>
            <vbox flex="1">
              <label id="setPresence-nick"/>
              <menulist id="setPresence-type-chooser" oncommand="setPresenceUpdater.onCommand()">
                <menupopup>
                  <menuitem id="setPresence-type-available" label="&status.Available;"
                      selected="true" value="available"/>
                  <menuitem id="setPresence-type-availableChat" label="&status.AvailableChat;"
                      value="chat"/>
                  <menuitem id="setPresence-type-dnd" label="&status.Dnd;"
                      value="dnd"/>
                  <menuitem id="setPresence-type-away" label="&status.Away;"
                      value="away"/>
                  <menuitem id="setPresence-type-xa" label="&status.Undisponible;"
                      value="xa"/>
                  <menuitem id="setPresence-type-invisible" label="&status.Invisible;"
                      value="invisible"/>
                  <menuseparator/>
                  <menuitem id="setPresence-type-custom" label="&status.changeMessage;"/>
                </menupopup>
              </menulist>
              <hbox>
                <checkbox id="setPresence-profile-enable" disabled="true"
                  oncommand="setPresenceUpdater.onProfileEnable()"/>
                <menulist id="setPresence-profile-chooser" flex="1"
                  oncommand="setPresenceUpdater.onProfileCommand()">
                  <menupopup>
                    <menuitem id="setPresence-profile-dummy" label="No profiles configured"
                      disabled="true" value="dummy-profile"/>
                    <menuseparator/>
                    <menuitem id="setPresence-profile-create" label="Edit profiles..."/>
                  </menupopup>
                </menulist>
              </hbox>
            </vbox>
            <avatar id="setPresence-avatar-image" showBlankAvatar="true"/>
          </hbox>
          <tabbox id="roster" flex="1">
            <tabs>
              <tab label="Contacts"/>
              <tab label="Conferences"/>
            </tabs>
            <tabpanels flex="1">
              <tabpanel>
                <richlistbox id="contacts-list" flex="1" persist="hideOffline"
                    onselect="self.activeItem = this.selectedItem.model"/>
              </tabpanel>
              <tabpanel>
                <richlistbox id="conferences-list" flex="1"
                    onselect="this.view.activeItem = this.selectedItem.model"/>
              </tabpanel>
            </tabpanels>
          </tabbox>
        </vbox>
        <!-- #ifdef XULAPP -->
        <splitter id="chats-splitter" collapsed="true" persist="rightWidth"/>
        <tabbox id="chats" collapsed="true" flex="1"
            onselect="this.selectedPanel.controler.focus()">
        <!-- #else
        <splitter id="chats-splitter"/>
        <tabbox id="chats" flex="1"
            onselect="this.selectedPanel.controler.focus()">
        // #endif -->
          <tabs/>
          <tabpanels flex="1"/>
        </tabbox>
      </hbox>
    </vbox>
  </deck>
  <popupset>
    <popup id="contact-contextmenu" onpopupshowing="updateContactContextMenu(this, event)">
      <menuitem id="contact-chat-single" label="&listitemcontext.Communiquer;"
          oncommand="activeItem.onOpenChat()"/>
      <menu id="contact-chat-multi" label="&listitemcontext.Communiquer;" hidden="true">
        <menupopup/>
      </menu>
      <menu id="contact-invite" label="Invite to" hidden="true">
        <menupopup/>
      </menu>

      <menuseparator/>

      <menuitem label="&listitemcontext.SupprimerContact;" oncommand="activeItem.onRemove()"/>
      <menuitem label="&listitemcontext.Rename;" oncommand="activeItem.onRename()"/>
      <menuitem label="Edit contact..." oncommand="activeItem.onEditContact()"/>

      <menuseparator/>

      <menu label="&listitemcontext.Authorisation;">
        <menupopup>
          <menuitem id="contact-authorisation-ask" label="&listitemcontext.Ask;"
              oncommand="activeItem.askForSubscription()"/>
          <menuitem id="contact-authorisation-allow" label="&listitemcontext.Authorize;"
              oncommand="activeItem.allowToSeeMe()"/>
          <menuitem id="contact-authorisation-disallow" label="&listitemcontext.Forbid;"
              oncommand="activeItem.disallowToSeeMe()"/>
        </menupopup>
      </menu>

      <menuseparator/>

      <menuitem label="&listitemcontext.Infos;" oncommand="activeItem.showVCard()"/>
      <menuitem id="contact-send-file" label="Send file..."
          oncommand="activeItem.onSendFile()"/>
    </popup>

    <popup id="conference-contextmenu">
      <menuitem id="conference-invite" label="Invite contacts to this room..."
          oncommand="this.parentNode.view.activeItem.onInvite()"/>
      <menuitem id="conference-changeNick" label="Change nick..."
          oncommand="this.parentNode.view.activeItem.onChangeNick()"/>
      <menuitem id="conference-changeSubject" label="Change subject..."
          oncommand="this.parentNode.view.activeItem.onChangeSubject()"/>

      <menuseparator/>

      <menuitem id="conference-leave" label="Leave conference"
          oncommand="this.parentNode.view.activeItem.exitRoom()"/>
    </popup>
  </popupset>
  <!-- #ifdef XULAPP -->
  <otsystray id="systray" type="minimizer"/>
  <!-- #endif -->
</window>
