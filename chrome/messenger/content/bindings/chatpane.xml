<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="chatpane-view">
    <resources>
      <stylesheet src="chrome://global/skin"/>
      <stylesheet src="chrome://messenger/skin/chatpane.css"/>
    </resources>

    <content>
      <html:iframe id="output" flex="1"/>
    </content>

    <implementation>
      <constructor>
        <![CDATA[
          var me = this;

          this._msgs = [];
          this._output = document.getAnonymousElementByAttribute(this, "id", "output");

          this._output.addEventListener("load", function(event) {
            var link = me._output.contentDocument.createElement("link");
// #ifdef XULAPP
            link.setAttribute("href", "chrome://messenger/skin/chatpane-content.css");
/* #else
            link.setAttribute("href",
              document.location.href.replace(/content\/.*?$/, "skin/chatpane-content.css"));
// #endif */
            link.setAttribute("rel", "stylesheet");
            me._output.contentDocument.getElementsByTagName("HEAD")[0].appendChild(link);
            var msgs = me._msgs;
            me._msgs = null;
            for (var i = 0; i < msgs.length; i++)
              me.addMessage.apply(me, msgs[i]);
          }, false);
        ]]>
      </constructor>

      <method name="addMessage">
        <parameter name="from"/>
        <parameter name="body"/>
        <parameter name="authorId"/>
        <parameter name="jid"/>
        <parameter name="timeStamp"/>
        <body>
          <![CDATA[
            if (this._msgs) {
              this._msgs.push([from, body, authorId, jid, timeStamp]);
              return;
            }

            var doc = this._output.contentDocument;
            var mc;

            if (!this._mc || this._authorId != authorId) {
              this._mc = mc = doc.createElement("div");
              this._authorId = authorId;
              mc.setAttribute("class", "messageChunk");
              mc.setAttribute("author-id", authorId);
              doc.body.appendChild(mc)
            } else
              mc = this._mc;

            var m = doc.createElement("div");
            m.setAttribute("class", "message");
            mc.appendChild(m);

            var h = doc.createElement("div");
            h.setAttribute("class", "header");
            m.appendChild(h);

            var e = doc.createElement("div");
            e.setAttribute("class", "author");
            e.appendChild(doc.createTextNode(from));
            h.appendChild(e);

            var e = doc.createElement("div");
            e.setAttribute("class", "date");
            e.appendChild(doc.createTextNode(readableTimestamp(timeStamp||new Date())));
            h.appendChild(e);

            var e = doc.createElement("div");
            e.setAttribute("class", "body");
            e.appendChild(doc.createTextNode(body));
            m.appendChild(e);

            m.scrollIntoView(true);
          ]]>
        </body>
      </method>

      <method name="clear">
        <body>
          <![CDATA[
            var doc = this._output.contentDocument;
            var body = doc.body;

            body.parentNode.replaceChild(doc.createElement("body"), body);

            this._mc = this._authorId = null;
          ]]>
        </body>
      </method>

    </implementation>
  </binding>

  <binding id="chatpane">

    <resources>
      <stylesheet src="chrome://global/skin"/>
      <stylesheet src="chrome://messenger/skin/chatpane.css"/>
    </resources>

    <content>
      <xul:vbox flex="1">
        <xul:hbox align="center" hidden="true">
          <xul:button label="Subject:"/>
          <xul:description id="subject" flex="1">TEST</xul:description>
        </xul:hbox>
        <xul:chatpane-view id="output-pane" flex="1"/>
        <xul:hbox align="center">
          <!-- #ifdef XULAPP -->
          <xul:iframe id="input" flex="1" style="height: 1.7em"/>
          <!-- #else
          <xul:textbox id="input" flex="1"/>
          // #endif -->
          <xul:button id="send" oncommand="this.parentNode.parentNode.parentNode._send()"/>
        </xul:hbox>
      </xul:vbox>
    </content>

    <implementation>

      <!-- #ifdef XULAPP -->
      <property name="content" readonly="true"
        onget="return this._editor.outputToString('text/plain', 0)" />
      <!-- #else
      <property name="content" readonly="true"
        onget="return this._input.value" />
      // #endif -->

      <property name="hasSubject"
        onset="this._subject.parentNode.hidden = !val; return val"
        onget="return !this._subject.parentNode.hidden" />

      <property name="subject"
        onset="return this._subject.value = val"
        onget="return this._subject.value" />

      <constructor>
        <![CDATA[
          this._scrollSize = 0;
          this.sendOnEnter = this.getAttribute("sendonenter") != "false";

          this._firstFocus = true;

          this._input = document.getAnonymousElementByAttribute(this, "id", "input");
          this._output = document.getAnonymousElementByAttribute(this, "id", "output-pane");
          this._subject = document.getAnonymousElementByAttribute(this, "id", "subject");

          var me = this;
          // #ifdef XULAPP
          this._input.contentWindow.addEventListener("load",
            function(event) { me._init() }, false);
          /* #else
          this._input.addEventListener("keypress",
            function (event) {
              if (event.keyCode == KeyEvent.DOM_VK_TAB)
                event.preventDefault();
              if (event.keyCode == KeyEvent.DOM_VK_RETURN &&
                  !event.shiftKey && me.sendOnEnter)
              {
                me._send();

                event.stopPropagation();
                event.preventDefault();
                return false;
              }
              return true;
            }, true);
          // #endif */
        ]]>
      </constructor>

      <method name="clear">
        <body>
          <![CDATA[
          // #ifdef XULAPP
            this._editor.selectAll();
            this._editor.deleteSelection(0);
          /* #else
            this._input.value =""
          // #endif */
          ]]>
        </body>
      </method>

      <method name="addMessage">
        <body>
          <![CDATA[
            this._output.addMessage.apply(this._output, arguments);
          ]]>
        </body>
      </method>

      <method name="clearView">
        <body>
          <![CDATA[
            this._output.clear();
          ]]>
        </body>
      </method>

      <method name="_init">
        <body>
          <![CDATA[
            var me = this;
            var doc = this._input.contentDocument;
            var win = this._input.contentWindow;

            doc.body.style.margin = "0"
            this._input.boxObject.
              QueryInterface(Components.interfaces.nsIContainerBoxObject).docShell.
              QueryInterface(Components.interfaces.nsIWebNavigation).
              QueryInterface(Components.interfaces.nsIInterfaceRequestor).
              getInterface(Components.interfaces.nsIEditingSession).
              makeWindowEditable(win, "text", false);

            this._editor = this._input.docShell.
              QueryInterface(Components.interfaces.nsIEditorDocShell).editor;
            this._editor instanceof Components.interfaces.nsIPlaintextEditor;
            
            doc.body.style.margin = "0";
            doc.body.style.background = "white";
            doc.body.style.fontFamily = "Arial, Verdana, sans-serif";

            this.maybeResize();

            var ev = ["DOMNodeInserted", "DOMNodeRemoved", "DOMAttrModified",
                      "DOMCharacterDataModified"];

            for (var i = 0; i < ev.length; i++)
              doc.body.addEventListener(ev[i],
                function (event) {
                  if (!me.resizeTimeout)
                    me.resizeTimeout = window.setTimeout(function(me){me.maybeResize()}, 0, me);
                }, false);
              win.addEventListener("resize",
                function (event) {
                  if (!me.resizeTimeout)
                    me.resizeTimeout = window.setTimeout(function(me){me.maybeResize()}, 0, me);
                }, false);

            win.addEventListener("keypress",
              function (event) {
                if (event.keyCode == KeyEvent.DOM_VK_TAB)
                  event.preventDefault();
                if (event.keyCode == KeyEvent.DOM_VK_RETURN &&
                    !event.shiftKey && me.sendOnEnter)
                {
                  me._send();

                  event.stopPropagation();
                  event.preventDefault();
                  return false;
                }
                return true;
              }, true);

              doc = win = null;
          ]]>
        </body>
      </method>

      <method name="_send">
        <body>
          <![CDATA[
            if (~this.content.search(/\S/)) {
              var ev = document.createEvent("Events");
              ev.initEvent("chat-send", true, false);
              this.dispatchEvent(ev);
            }
            this.clear();
          ]]>
        </body>
      </method>

      <method name="focus">
        <body>
          <![CDATA[
          // #ifdef XULAPP
          window.setTimeout(function(a, b){b._firstFocus = false;a.focus()},
            this._firstFocus ? 500 : 0, this._input.contentWindow, this);
          /* #else
          window.setTimeout(function(a, b){b._firstFocus = false;a.focus()},
            this._firstFocus ? 500 : 0, this._input, this);
          // #endif */
          ]]>
        </body>
      </method>

      <method name="maybeResize">
        <body>
          <![CDATA[
          var e = this._input.contentDocument.body.parentNode;
          var w = this._input.contentWindow;
          var h = e.offsetHeight;

          this.resizeTimeout = null;

          if (this._scrollSize <= 0) {
            if (w.scrollMaxX)
              this._scrollSize = w.scrollMaxY - e.offsetHeight - this._scrollSize;
            else
              this._scrollSize = -e.offsetHeight;
          }

          if (h > 0.3*window.innerHeight)
            h = 0.3*window.innerHeight;

          if (w.scrollMaxY ||
              e.offsetHeight < w.innerHeight)
            this._input.style.height =
              (h + this._input.boxObject.height - w.innerHeight +
              (w.scrollMaxX ? this._scrollSize : 0))+"px";
          ]]>
        </body>
      </method>

    </implementation>
  </binding>
</bindings>
