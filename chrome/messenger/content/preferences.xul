<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://messenger/skin/preferences.css" type="text/css"?>
<?xml-stylesheet href="chrome://messenger/skin/dialog.css" type="text/css"?>

<!DOCTYPE dialog [
  <!ENTITY % dialogsDTD SYSTEM "chrome://messenger/locale/dialogs.dtd" >
  %dialogsDTD;
]>

<dialog id="preferences" windowtype="ot:preferences" title="Preferences"
  width="800" height="600"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml"
  buttonlabelaccept="&dialog.accept.label;" buttonlabelcancel="&dialog.cancel.label;"
  buttons="accept,cancel" onload="onLoad()" ondialogaccept="return savePrefs()">

  <script type="text/javascript;version=1.7"><![CDATA[
    function enableDisableAutoAway(event)
    {
      var el = event.target;

      el.nextSibling.disabled =
        el.parentNode.nextSibling.childNodes[1].disabled = !el.checked;
    }

    function onLoad() {
      var iconReg = window.opener.account.iconsRegistry;

      var iconContainer = document.getElementById("statusIconSet");
      for (var i = 0; i < iconReg.statusIcons.length; i++)
        iconContainer.appendChild(generateIconSetElement(iconReg.statusIcons[i]));

      iconContainer = document.getElementById("smileSet");
      for (i = 0; i < iconReg.smiles.length; i++)
        iconContainer.appendChild(generateIconSetElement(iconReg.smiles[i]));

      document.getElementById("autoAwayCheckbox").
        addEventListener("CheckboxStateChange", enableDisableAutoAway, false);

      document.getElementById("autoXACheckbox").
        addEventListener("CheckboxStateChange", enableDisableAutoAway, false);

      var prefElems = document.getElementsByAttribute("pref", "*");
      for (i = 0; i < prefElems.length; i++) {
        var pref = prefElems[i].getAttribute("pref").split(/[=:]/);
        var val = window.opener.prefManager.getPref(pref[0]);
        prefElems[i][pref[1]] = val == null ? "" : val;
        if (window.opener.prefManager.builtinPref(pref[0]))
          prefElems[i].disabled = true;
      }

      prefElems = document.getElementsByAttribute("prefSet", "*");
      for (i = 0; i < prefElems.length; i++) {
        var prefSetter = prefElems[i].getAttribute("prefSet");
        var prefName = prefElems[i].getAttribute("prefName")
        var val = window.opener.prefManager.getPref(prefName);
        try {
        eval("(function(){"+prefSetter+"}).call(__element__)",
             {__element__: prefElems[i], __value__: val == null ? "" : val});
        } catch(ex){}
        if (window.opener.prefManager.builtinPref(pref[0]))
          prefElems[i].disabled = true;
      }
    }

    function savePrefs()
    {
      var valsToSet = [];
      var prefElems = document.getElementsByAttribute("pref", "*");
      for (i = 0; i < prefElems.length; i++) {
        if (prefElems[i].disabled)
          continue;
        var pref = prefElems[i].getAttribute("pref").split(/[=:]/);
        var val = prefElems[i][pref[1]];

        if (pref[2] == "int" && typeof(val) == "string")
          if (!/^\d+$/.exec(val)) {

            var p = prefElems[i].parentNode;
            while (p && p.localName != "tabpanel")
              p = p.parentNode;
            if (p)
              p.parentNode.selectedPanel = p;

            prefElems[i].focus();
            alert("Please enter number");

            return false;
          } else
            val = parseInt(val);

        valsToSet.push([pref[0], val]);
      }

      prefElems = document.getElementsByAttribute("prefGet", "*");
      for (i = 0; i < prefElems.length; i++) {
        if (prefElems[i].disabled)
          continue;

        var val = eval("(function(){return "+
                       prefElems[i].getAttribute("prefGet")+
                       "}).call(prefElems[i])");

        valsToSet.push([prefElems[i].getAttribute("prefName"), val]);
      }

      for (i = 0; i < valsToSet.length; i++)
        window.opener.prefManager.setPref(valsToSet[i][0], valsToSet[i][1])

      return true;
    }

    function generateIconSetElement(iconSet)
    {
      var rli = document.createElement("richlistitem");
      rli.setAttribute("orient", "vertical");
      rli.setAttribute("class", "iconSetItem");
      rli.model = iconSet;

      var ic = document.createElement("hbox");
      ic.setAttribute("flex", "1");
      for (var i = 0; i < iconSet.icons.length; i++) {
        var icon = document.createElement("image");
        icon.setAttribute("src", iconSet.icons[i].img);
        ic.appendChild(icon);
      }
      rli.appendChild(ic);

      var label = document.createElement("label");
      label.setAttribute("value", iconSet.name+" - "+iconSet.desc);
      rli.appendChild(label);
      return rli;
    }
  ]]></script>

  <tabbox flex="1">
    <tabs>
      <tab id="general" label="General"/>
      <tab id="connection" label="Connection"/>
      <tab id="status" label="Status"/>
      <tab id="appearance" label="Appearance"/>
    </tabs>
    <tabpanels flex="1">
      <tabpanel orient="vertical">
        <checkbox label="Display avatars in roster" pref="chat.general.showavatars=checked"/>
        <checkbox label="Sort contacts by status" pref="chat.roster.sortbystatus=checked"/>
        <checkbox label="Play sounds" pref="chat.sounds=checked"/>
      </tabpanel>

      <tabpanel>
        <grid flex="1">
          <columns>
            <column/>
            <column flex="1"/>
          </columns>
          <rows>
            <row>
              <label value="Host:"/>
              <textbox pref="chat.connection.host=value"/>
            </row>
            <row>
              <label value="Port:"/>
              <textbox pref="chat.connection.port=value:int"/>
            </row>
            <row>
              <label value="Resource:"/>
              <textbox pref="chat.connection.resource=value"/>
            </row>
            <row>
              <label value="Priority:"/>
              <textbox pref="chat.connection.priority=value:int"/>
            </row>
            <row>
              <label value="HTTP Base:"/>
              <textbox pref="chat.connection.base=value"/>
            </row>
            <checkbox label="Use HTTP-Polling"
                      pref="chat.connection.base=checked"/>
          </rows>
        </grid>
      </tabpanel>

      <tabpanel>
        <grid flex="1">
          <columns>
            <column/>
            <column/>
            <column flex="1"/>
          </columns>
          <rows>
            <row>
              <checkbox label="Automaticaly set status to 'away' after"
                        id="autoAwayCheckbox" checked="true"
                        pref="chat.status.autoaway=checked:bool"/>
              <textbox pref="chat.status.autoaway.time=value:int" size="3"/>
              <label value="minutes"/>
            </row>
            <hbox class="entry">
              <label value="And set status to:"/>
              <textbox pref="chat.status.autoaway.status=value" flex="1"/>
            </hbox>
            <row>
              <checkbox label="Automaticaly set status to 'not available' after"
                        id="autoXACheckbox" checked="true"
                        pref="chat.status.autoxa=checked:bool"/>
              <textbox pref="chat.status.autoxa.time=value:int" size="3"/>
              <label value="minutes"/>
            </row>
            <hbox class="entry">
              <label value="And set status to:"/>
              <textbox pref="chat.status.autoxa.status=value" flex="1"/>
            </hbox>
          </rows>
        </grid>
      </tabpanel>

      <tabpanel orient="vertical">
        <label value="Default icon set:"/>
        <richlistbox id="statusIconSet"
                     prefName="chat.general.iconset"
                     prefSet="var c=this.childNodes;
                              for (var i = 0; i &lt; c.length; i++)
                                if(__value__.toLowerCase() == c[i].model.name.toLowerCase())
                                  return this.selectedIndex = i"
                     prefGet="this.selectedItem &amp;&amp; this.selectedItem.model.name"/>
        <spacer/>
        <label value="Default smiles set:"/>
        <richlistbox id="smileSet"
                     prefName="chat.general.smilesset"
                     prefSet="var c=this.childNodes;
                              for (var i = 0; i &lt; c.length; i++)
                                if(__value__.toLowerCase() == c[i].model.name.toLowerCase())
                                  return this.selectedIndex = i"
                     prefGet="this.selectedItem &amp;&amp; this.selectedItem.model.name"/>
      </tabpanel>
    </tabpanels>
  </tabbox>
</dialog>
