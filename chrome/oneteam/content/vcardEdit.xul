<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/dialog.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/collapseRows/collapseRows.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam-branding/locale/branding.css" type="text/css"?>

<?xul-overlay href="chrome://oneteam/content/overlays/rosterContextMenus.xul"?>
<?xul-overlay href="chrome://oneteam/content/overlays/macMenuOverlay.xul"?>

<dialog id="oneteam" windowtype="ot:vcardEdit" title="_('My vCard')"
  width="600" height="400"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml"
  buttonlabelaccept="_('OK')" buttonlabelcancel="_('Cancel')"
  buttons="accept,cancel"
  onload="onLoad()" ondialogaccept="return saveVCard()" ondialogextra1="fetchVCard(true)">

  <script type="text/javascript;version=1.7" src="JavaScript/moduleloader.js"/>
  <script type="text/javascript;version=1.7"><![CDATA[
    ML.importMod("model/account.js");

    var avatarList;

    function onLoad() {
      avatarList = document.getElementById("avatarList");
      fetchVCard(true);
    }

    function handlePhoto(generateResult, tree)
    {
      if (generateResult) {
        var ns = new Namespace("vcard-temp");
        if (!avatarList.selectedAvatar)
          return <></>

        var hash = avatarList.selectedAvatar.hash;

        var avatarUrl  = account.cache.getValue("avatar-"+hash, true);
        var avatarData = account.cache.getValue("avatar-"+hash);
        var mimeType = getMimeTypeForFile(avatarUrl);

        default xml namespace = ns;
        if (mimeType)
          return <><TYPE>{mimeType}</TYPE><BINVAL>{btoa(avatarData)}</BINVAL></>;
        else
          return <><BINVAL>{btoa(avatarData)}</BINVAL></>;
      } else {
        if (account.avatarHash)
          avatarList.selectAvatar(account.avatarHash);
        else
          avatarList.selectedAvatar = null;
      }
    }

    const map = {
      FN: "name",
      N: {
        FAMILY: "lastName",
        GIVEN:  "firstName",
        MIDDLE: "secondName",
        PREFIX: "prefix",
        SUFFIX: "suffix"
      },
      NICKNAME: "nickName",
      BDAY: "birthday",
      URL: "homepage",
      EMAIL: [
        { WORK: 1 },
        {
          USERID: "workEmail",
        },
        { HOME: 1 },
        {
          USERID: "email",
        },
      ],
      ADR: [
        { WORK: 1 },
        {
          EXTADD: "workExtadd",
          STREET: "workStreet",
          CITY: "workCity",
          PCODE: "workPostalCode",
          CTRY: "workCountry",
          REGION: "workRegion",
        },
        { HOME: 1 },
        {
          EXTADD: "extadd",
          STREET: "street",
          CITY: "city",
          PCODE: "postalCode",
          CTRY: "country",
          REGION: "region",
        },
      ],
      ROLE: "role",
      ORG: {
        ORGNAME: "company",
        ORGUNIT: "department",
        TITLE: "position",
      },
      PHOTO: handlePhoto
    };

    function parse(tree, map)
    {
      if (!tree || !tree.length() || !map)
        return;

      var ns = tree[0].namespace();

      if (map instanceof Array) {
        var parts = [];
        tree = tree.parent().ns::[tree[0].name()];

        for (var i = 0, handled = 0; i < map.length; i+=2, handled = 0) {
          for (var j in map[i]) {
            var treePart = tree.(function::elements(new QName(ns, j)).length())
            handled = 1;

            if (treePart.length()) {
              handled = 2;
              parse(treePart, map[i+1]);
              parts.push(treePart);
            }
          }
          if (handled == 0 || (handled == 1 && i == map.length-2)) {
            for each (i in tree)
              if (parts.indexOf(i) != 0) {
                parse(i, map[i+i]);
                return;
              }
            }
        }
      }

      for (var i in map)
        if (typeof(map[i]) == "string")
          document.getElementById(map[i]).value = tree.ns::[i].text().toString();
        else if (typeof(map[i]) == "function")
          map[i](0, tree.ns::[i]);
        else
          parse(tree.ns::[i], map[i]);
    }

    function generate(map, ns) {
      default xml namespace = ns;
      var result = new XMLList(), val;

      for (var i in map) {
        if (typeof(map[i]) == "string") {
          if (val = document.getElementById(map[i]).value)
            result += <{i}>{val}</{i}>;
        } else if (typeof(map[i]) == "function") {
          var subresult = map[i](1);

          if (subresult != null && subresult.length())
            result += <{i}/>.appendChild(subresult);
        } else if (map[i] instanceof Array) {
          for (var j = 0; j < map[i].length; j += 2) {
            var subresult = generate(map[i][j+1], ns);
            if (subresult.length()) {
              for (var k in map[i][j])
                subresult += <{k}/>;
              result += <{i}/>.appendChild(subresult);
            }
          }
        } else {
          var subresult = generate(map[i], ns);

          if (subresult.length())
            result += <{i}/>.appendChild(subresult);
        }
      }
      return result;
    }

    function saveVCard() {
      var ns = new Namespace("vcard-temp")
      default xml namespace = ns;

      var vcard = <vCard/>
      vcard.appendChild(generate(map, ns));

      account.setVCard(vcard);

      return true;
    }

    function fetchVCard(force) {
      document.getElementById("oneteam").style.cursor = "wait";
      account.getVCard(force, fetchDone);
    }

    function fetchDone(pkt) {
      document.getElementById("oneteam").style.cursor = "";
      parse(DOMtoE4X(pkt.getNode()).elements(), map);
    }
  ]]></script>

  <group id="macMenu"/>

  <toolbox id="mainToolbox">
    <menubar id="macMenuBar"/>
  </toolbox>

  <spacer style="height: 0.6em"/>

  <hbox flex="1">
    <avatarlist id="avatarList"/>
    <separator class="groove" orient="vertical"/>
    <grid flex="1" style="overflow-y: auto">
      <columns>
        <column/>
        <column flex="1"/>
        <column/>
        <column flex="1"/>
      </columns>
      <rows>
        <row>
          <label value="_('Name')" control="name"/>
          <textbox id="name" flex="1"/>
        </row>

        <rows class="collapsableRowsGroup" collapse="true">
          <hbox onclick="this.parentNode.setAttribute('collapse',
                this.parentNode.getAttribute('collapse') == 'true' ? 'false' : 'true')">
            <image/>
            <label value="_('Name Details')"/>
          </hbox>
          <row>
            <label value="_('First Name')" control="firstName"/>
            <textbox id="firstName"/>
            <label value="_('Last Name')" control="lastName"/>
            <textbox id="lastName"/>
          </row>
          <row>
            <label value="_('Second Name')" control="secondName"/>
            <textbox id="secondName"/>
            <label value="_('Nick')" control="nickName"/>
            <textbox id="nickName"/>
          </row>
          <row>
            <label value="_('Prefix')" control="prefix"/>
            <textbox id="prefix"/>
            <label value="_('Suffix')" control="suffix"/>
            <textbox id="suffix"/>
          </row>
        </rows>

        <rows class="collapsableRowsGroup" collapse="true">
          <hbox onclick="this.parentNode.setAttribute('collapse',
                this.parentNode.getAttribute('collapse') == 'true' ? 'false' : 'true')">
            <image/>
            <label value="_('Address')"/>
          </hbox>
          <row>
            <label value="_('Street')" control="street"/>
            <textbox id="street"/>
            <label value="_('ExtAdd')" control="extadd"/>
            <textbox id="extadd"/>
          </row>
          <row>
            <label value="_('City')" control="city"/>
            <textbox id="city"/>
            <label value="_('Postal code')" control="postalCode"/>
            <textbox id="postalCode"/>
          </row>
          <row>
            <label value="_('Region')" control="region"/>
            <textbox id="region"/>
            <label value="_('Country')" control="country"/>
            <textbox id="country"/>
          </row>
        </rows>

        <rows class="collapsableRowsGroup" collapse="true">
          <hbox onclick="this.parentNode.setAttribute('collapse',
                this.parentNode.getAttribute('collapse') == 'true' ? 'false' : 'true')">
            <image/>
            <label value="_('Personal informations')"/>
          </hbox>
          <row>
            <label value="_('Homepage')" control="homepage"/>
            <textbox id="homepage"/>
            <label value="_('E-Mail')" control="email"/>
            <textbox id="email"/>
          </row>
          <row>
            <label value="_('Birthday')" control="birthday"/>
            <textbox id="birthday"/>
            <label value="_('Phone')" control="phone"/>
            <textbox id="phone"/>
          </row>
        </rows>

        <rows class="collapsableRowsGroup" collapse="true">
          <hbox onclick="this.parentNode.setAttribute('collapse',
                this.parentNode.getAttribute('collapse') == 'true' ? 'false' : 'true')">
            <image/>
            <label value="_('Work')"/>
          </hbox>
          <row>
            <label value="_('Company')" control="company"/>
            <textbox id="company"/>
            <label value="_('Department')" control="department"/>
            <textbox id="department"/>
          </row>
          <row>
            <label value="_('Position')" control="position"/>
            <textbox id="position"/>
            <label value="_('Role')" control="role"/>
            <textbox id="role"/>
          </row>
          <row>
            <label value="_('E-Mail')" control="workEmail"/>
            <textbox id="workEmail"/>
            <label value="_('Phone')" control="workPhone"/>
            <textbox id="workPhone"/>
          </row>
        </rows>

        <rows class="collapsableRowsGroup" collapse="true">
          <hbox onclick="this.parentNode.setAttribute('collapse',
                this.parentNode.getAttribute('collapse') == 'true' ? 'false' : 'true')">
            <image/>
            <label value="_('Working address')"/>
          </hbox>
          <row>
            <label value="_('Street')" control="street"/>
            <textbox id="workStreet"/>
            <label value="_('ExtAdd')" control="extadd"/>
            <textbox id="workExtadd"/>
          </row>
          <row>
            <label value="_('City')" control="city"/>
            <textbox id="workCity"/>
            <label value="_('Postal code')" control="postalCode"/>
            <textbox id="workPostalCode"/>
          </row>
          <row>
            <label value="_('Region')" control="region"/>
            <textbox id="workRegion"/>
            <label value="_('Country')" control="country"/>
            <textbox id="workCountry"/>
          </row>
        </rows>
      </rows>
    </grid>
  </hbox>
</dialog>
