<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="chatpane-view">
    <resources>
      <stylesheet src="chrome://global/skin"/>
      <stylesheet src="chrome://oneteam/skin/chatpane/chatpane.css"/>
    </resources>

    <content>
      <xul:hbox flex="1">
        <xul:hbox flex="1">
          <html:iframe src="../content/blank.html" id="output" flex="1"/>
          <xul:stack id="markersContainer">
            <xul:vbox class="marker-arrow"/>
          </xul:stack>
        </xul:hbox>
        <xul:splitter hidden="true"/>
        <xul:richlistbox id="roster" hidden="true" width="200"/>
      </xul:hbox>
    </content>

    <implementation>
      <field name="scrollToBottom">true</field>

      <property name="smilesEnabled"
                onget="return this._output.contentDocument.body.className == 'smiles-enabled'"
                onset="this._output.contentDocument.body.className = val ? 'smiles-enabled' : '';
                       return val"/>

      <property name="model" onget="return this._model">
        <setter><![CDATA[
          if (val == this._model)
            return val;

          if (this._model)
            this._model.unregisterView(this._regToken);

          if (this._conferenceView) {
            this._conferenceView.destroy();
            this._conferenceView = null;
          }

          this._model = val;

          if (val) {
            this._regToken = val.registerView(this._onMessageQueueChanged, this, "messages");
            this._onMessageQueueChanged();

            if (val.contact instanceof Conference)
              this._conferenceView = new ConferenceView(val.contact, null, this._roster, true);
          }

          this._roster.hidden = this._roster.previousSibling.hidden =
            !(val && val.contact instanceof Conference);

          return val;
        ]]></setter>
      </property>

      <property name="visible" onget="return this._visible">
        <setter><![CDATA[
          if (!val == !this._visible)
            return this._visible = val;

          this._visible = val;
          this._updateNonSeenStatus();
          this._syncMarkers();

          if (!val && this._model)
            this._model.visible = false;

          return val;
        ]]></setter>
      </property>

      <constructor><![CDATA[
        var me = this;
        this._roster = document.getAnonymousElementByAttribute(this, "id", "roster");
        this._output = document.getAnonymousElementByAttribute(this, "id", "output");
        this._output.addEventListener("load", function(){me._init()}, true)

        var p = this.__proto__;
        this.__proto__ = {};

        var state = {};
        for each (var i in "visible model smilesEnabled".split(/ /))
          if (this[i] != null) {
            state[i] = this[i];
            delete this[i];
          }

        this.__proto__ = p;

        for (i in state)
          this[i] = state[i];

        if (this._visible == null)
          this._visible = true;

        this._markersContainer = document.getAnonymousElementByAttribute(this, "id", "markersContainer");
        this._markers = [];
        this.colorMap = {0: 0};
        this.colorIndex = 1;
        this.colorTable = prefManager.getPref("chat.messages.colors").split(/\s*,\s*/);
      ]]></constructor>

      <destructor><![CDATA[
        this.destroy();
      ]]></destructor>

      <method name="destroy">
        <body><![CDATA[
          if (this._model && this._regToken)
            this._model.unregisterView(this._regToken);
          this._regToken = null;
        ]]></body>
      </method>

      <method name="addMarker">
        <parameter name="element"/>
        <parameter name="markerColor"/>
        <parameter name="tooltip"/>
        <parameter name="clickHandler"/>
        <parameter name="seenHandler"/>
        <body><![CDATA[
          var marker = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "vbox");

          marker.setAttribute("class", "marker-arrow");
          marker.setAttribute("left", "0");
          marker.setAttribute("onclick", "this.token.obj.scrollToElement(this.token.element);"+
                                         "this.token.clickHandler()");
          if (tooltip)
            marker.setAttribute("tooltiptext", tooltip);

          this._markersContainer.appendChild(marker);

          var token = {
            element: element,
            markerElement: marker,
            markerColor: markerColor,
            clickHandler: clickHandler || function(){},
            seenHandler: seenHandler,
            obj: this
          };

          this._syncMarker(token);
          this._markers.push(token);

          return marker.token = token;
        ]]></body>
      </method>

      <method name="removeMarker">
        <parameter name="token"/>
        <body><![CDATA[
          var idx = this._markers.indexOf(token);
          if (idx < 0)
            return;

          this._markers.splice(idx, 1);
          token.markerElement.parentNode.removeChild(token.markerElement);

          if (token.seenTimeout)
            clearTimeout(token.seenTimeout);
        ]]></body>
      </method>

      <method name="_syncMarker">
        <parameter name="token"/>
        <body><![CDATA[
          var p = token.element;
          var scrEl = token.element.parentNode;
          var top = 0;
          var visible = token.seenHandler;

          while (scrEl && scrEl.scrollHeight == scrEl.clientHeight)
            scrEl = scrEl.parentNode;

          if (scrEl)
            do {
              top += p.offsetTop;
              p = p.offsetParent;
            } while (p);


          if (scrEl && (top < scrEl.scrollTop || top >= (scrEl.scrollTop + scrEl.clientHeight))) {
            token.markerElement.style.top = parseInt(top/scrEl.scrollHeight*(scrEl.clientHeight-8))+"px";
            token.markerElement.style.borderRightColor = token.markerColor;
            visible = false;
          } else
            token.markerElement.style.borderRightColor = "transparent";

          if (visible && this.visible && !token.seenTimeout)
            token.seenTimeout = setTimeout(token.seenHandler, 3000, token, this);
          else if ((!visible || !this.visible) && token.seenTimeout) {
            clearTimeout(token.seenTimeout);
            token.seenTimeout = null;
          }
        ]]></body>
      </method>

      <method name="_syncMarkers">
        <parameter name="token"/>
        <body><![CDATA[
          if (!this._markers)
            return;
          for (var i = 0; i < this._markers.length; i++)
            this._syncMarker(this._markers[i]);
        ]]></body>
      </method>

      <method name="scrollToElement">
        <parameter name="element"/>
        <body><![CDATA[
          Animator.stopAnimation(this._scrollToken);
          return this._scrollToken = Animator.animateScrollToElement(element, 20, 20);
        ]]></body>
      </method>

      <method name="_init">
        <body>
          <![CDATA[
            this._initialized = true;

            var link = this._output.contentDocument.createElement("link");
// #ifdef XULAPP
            link.setAttribute("href", "chrome://oneteam/skin/chatpane/content.css");
/* #else
            link.setAttribute("href",
              document.location.href.replace(/content\/.*?$/, "skin/chatpane/content.css"));
// #endif */
            link.setAttribute("rel", "stylesheet");
            this._output.contentDocument.getElementsByTagName("HEAD")[0].appendChild(link);

            var colorScheme = ".message { opacity: 1 }\n.message[not-seen=\"true\"] { opacity: 1 }\n";
            var white = new RGBColor(1, 1, 1);
            var green = new RGBColor(0.9, 0.9, 1);
            for (var i = 0; i < this.colorTable.length; i++) {
              var base = new RGBColor(this.colorTable[i]);
              var bg = base.composite(white, 0.06);
              var border = base.composite(white, 0.3);

              var baseOffline = base.composite(green, 0.2);
              var bgOffline = baseOffline.composite(white, 0.06);
              var borderOffline = baseOffline.composite(white, 0.3);

              colorScheme +=
                <style>
                  .message[color-id="{i}"] {"{"}
                      background: {bg};
                  }

                  .message[color-id="{i}"] {"{"}
                      border-color: {border};
                  }

                  .message[color-id="{i}"] > .header {"{"}
                      background-color: {base}
                  }

                  .meMessage.message[color-id="{i}"] {"{"}
                      color: {base}
                  }

                  .offline.message[color-id="{i}"] {"{"}
                      background: {bgOffline};
                  }

                  .offline.message[color-id="{i}"] {"{"}
                      border-color: {borderOffline};
                  }

                  .offline.message[color-id="{i}"] > .header {"{"}
                      background-color: {baseOffline}
                  }

                  .offline.meMessage.message[color-id="{i}"] {"{"}
                      color: {baseOffline}
                  }
                </style>;
            }

            var colorSchemeTag = this._output.contentDocument.createElement("style");
            colorSchemeTag.setAttribute("type", "text/css");
            colorSchemeTag.appendChild(this._output.contentDocument.createTextNode(colorScheme));
            this._output.contentDocument.getElementsByTagName("HEAD")[0].
              appendChild(colorSchemeTag);

            this._output.contentDocument.body.className = "smiles-enabled";

            for (var i = 0; i < account.style.smiles.length; i++)
              account.style.smiles[i].attachStyles(this._output.contentDocument);

            this._output.contentDocument.addEventListener("click", linkEventsRedirector, true)

            if (this._model)
              this._onMessageQueueChanged();

            var doc = this._output.contentDocument;
            var me = this;

            this._output.contentDocument.addEventListener("replacewithimage", function(event) {
              var target = event.target;
              var checked = target.getElementsByTagName("input")[0].checked;

              if (checked) {
                account.cache.setValue("loadimage-"+me.model.contact.jid.normalizedJID.shortJID, true);
                for each (var thread in me.model.contact.threads)
                  if (thread.chatPane)
                    try {
                      thread.chatPane._chatpane._output._replaceWithImage();
                    } catch (ex) {alert(ex)}
              } else
                me._replaceWithImage(event.target);
            }, false);

            this._output.contentWindow.addEventListener("resize", function() {
              me._syncMarkers();
              doc.documentElement.scrollTop = doc.documentElement.scrollHeight;
            }, false);
            this._output.contentWindow.addEventListener("scroll", function() {
              me._syncMarkers();
            }, false);
          ]]>
        </body>
      </method>

      <method name="_replaceWithImage">
        <parameter name="target"/>
        <body><![CDATA[
          if (!target) {
            var repl = this._output.contentDocument.getElementsByClassName("image-replacement");
            while (repl.length)
              this._replaceWithImage(repl[0]);
            return;
          }

          var img = target.ownerDocument.createElement("img");
          for each (var attr in ["width", "height", "src", "alt"])
            if (target.getAttribute(attr))
              img.setAttribute(attr, target.getAttribute(attr));
          target.parentNode.replaceChild(img, target);
        ]]></body>
      </method>

      <method name="_onMessageQueueChanged">
        <parameter name="model"/>
        <parameter name="name"/>
        <parameter name="arg"/>
        <body><![CDATA[
          if (!this._initialized)
            return;

          if (!this._msgs)
            // we need snapshot of archivedMessage, thats why we use concat here
            this._msgs = this._model.archivedMessages.concat([]);

          if (arg && arg.added) {
            this._msgs.push.apply(this._msgs, arg.added);
            this._model.removeMessages();
          } else if (!arg && this._model.messages.length) {
            this._msgs.push.apply(this._msgs, this._model.messages);
            this._model.removeMessages();
          }

          if (!this._msgs.length)
            return;

          if (this._appendTimeout)
            window.clearTimeout(this._appendTimeout);
          this._appendTimeout = window.setTimeout(function(t){t._appendMessages()}, 50, this);
        ]]></body>
      </method>

      <method name="_updateNonSeenStatus">
        <parameter name="fromScroll"/>
        <body><![CDATA[
          var doc = this._output.contentDocument;

          if (!this._firstNotSeenMsg) {
            if (!this.visible) {
              this._markMessagesAsSeen();
            } else if (this._model)
              this._model.visible = true;
            return;
          }

          var rule = doc.styleSheets[1].cssRules[0];
          rule.style.cssText = "opacity: 0.3";

          if (this._unseenMarker)
            return;

          this._unseenMarker = this.addMarker(this._firstNotSeenMsg, "black",
            _("Click to scroll to first non-seen message"), null, function(token, el) {
              el.removeMarker(token);
              el._unseenMarker = null;
              el._firstNotSeenMsg = null;
              Animator.animateCssRule(null, rule, "opacity", 20, 20, function(rule){
                rule.style.outline = "";
                el._markMessagesAsSeen();
                if (el._model)
                  el._model.visible = true;
              }, 0.3, 1);
            });
        ]]></body>
      </method>

      <method name="_markMessagesAsSeen">
        <body><![CDATA[
          var els = this._output.contentDocument.getElementsByTagName("div");

          for (var i = els.length-1; i >= 0; i--)
            els[i].removeAttribute("not-seen");
        ]]></body>
      </method>

      <method name="_appendMessages">
        <body><![CDATA[
          var doc = this._output.contentDocument;
          var scrEl = doc.documentElement;

          if (!doc) {
            this._appendTimeout = window.setTimeout(function(t){t._appendMessages()}, 50, this);
            return
          }

          var scrollToBottom = scrEl.scrollTop + scrEl.clientHeight >= scrEl.scrollHeight - 8 ||
            Animator.animationIsRunning(this._scrollToBottomToken);

          this._appendTimeout = null;

          if (!this._content) {
            this._content = doc.createElement("div");
            this._content.setAttribute("class", "mainContainer");
            doc.body.appendChild(this._content);
          }

          var msgs = this._msgs;
          this._msgs = [];

          var msgsChunk = doc.createDocumentFragment();

          for (var i = 0; i < msgs.length; i++) {
            var msg = msgs[i];

            var msgEl = doc.createElement("div");
            msgsChunk.appendChild(msgEl);
            msgEl.setAttribute("class", "message "+msg.classes);
            msgEl.setAttribute("not-seen", "true")

            if (msg.isSystemMessage) {
              msgEl.setAttribute("starts-chunk", "true");
              this._lastContactId = null;
            } else {
              if (!(msg.contactId in this.colorMap)) {
                this.colorMap[msg.contactId] = this.colorIndex;
                this.colorIndex = this.colorIndex%(this.colorTable.length-1) + 1;
              }

              msgEl.setAttribute("author-id", msg.contactId);
              msgEl.setAttribute("color-id", this.colorMap[msg.contactId]);

              if (this._lastContactId != msg.contactId || msg.time - this._lastMessageTime > 5*60*1000 ||
                  !msg.offline != !this._lastMessageOffline)
                msgEl.setAttribute("starts-chunk", "true");

              this._lastContactId = msg.contactId;
              this._lastMessageTime = msg.time;
              this._lastMessageOffline = msg.offline
            }

            if (!this._visible && !this._firstNotSeenMsg)
              this._firstNotSeenMsg = msgEl;

            var h = doc.createElement("span");
            h.setAttribute("class", "header");
            msgEl.appendChild(h);

            var e = doc.createElement("span");
            e.setAttribute("class", "to-copy-paste");
            e.appendChild(doc.createTextNode("["));
            h.appendChild(e);

            e = doc.createElement("span");
            e.setAttribute("class", "date");
            e.appendChild(doc.createTextNode(readableTimestamp(msg.time)));
            h.appendChild(e);

            e = doc.createElement("span");
            e.setAttribute("class", "to-copy-paste");
            e.appendChild(doc.createTextNode("] "));
            h.appendChild(e);

            if (!msg.isSystemMessage) {
              e = doc.createElement("span");
              e.setAttribute("class", "author");
              e.appendChild(doc.createTextNode(msg.nick));
              h.appendChild(e);

              e = doc.createElement("span");
              e.setAttribute("class", "to-copy-paste");
              e.appendChild(doc.createTextNode(": "));
              h.appendChild(e);
            }

            e = doc.createElement("span");
            e.setAttribute("class", "body");
            e.innerHTML = msg.formatedHtml;

            msg.markAsSeen();

            msgEl.appendChild(e);
          }

          this._content.appendChild(msgsChunk);

          this._model.removeMessages();

          if (this.scrollToBottom && scrollToBottom)
            this._scrollToBottomToken = this.scrollToElement(msgEl);

          this._updateNonSeenStatus();
          this._syncMarkers();
        ]]></body>
      </method>

      <method name="clear">
        <body>
          <![CDATA[
            if (this._content)
              this._content.parentNode.removeChild(this._content);

            this._content = this._msgsContainer =
              this._lastMessageTime = this._lastContactId = null;
            this._lastMessageOffline = false;
            this._msgs = null;
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="richtext-toolbar" extends="chrome://global/content/bindings/toolbar.xml#toolbar">
    <resources>
      <stylesheet src="chrome://global/skin"/>
      <stylesheet src="chrome://oneteam/skin/chatpane/textbox.css"/>
    </resources>

    <content tbalign="center">
      <xul:toolbarbutton id="boldButton" type="checkbox" cmd="bold" tooltiptext="_('Bold')"/>
      <xul:toolbarbutton id="italicButton" type="checkbox" cmd="italic" tooltiptext="_('Italic')"/>
      <xul:toolbarbutton id="underlineButton" type="checkbox" cmd="underline" tooltiptext="_('Underline')"/>
      <xul:toolbarseparator/>
      <xul:toolbarbutton id="biggerFontButton" cmd="increaseFontSize" tooltiptext="_('Increase font size')"/>
      <xul:toolbarbutton id="smallerFontButton" cmd="decreaseFontSize" tooltiptext="_('Decrease font size')"/>
      <xul:toolbarseparator/>
      <xul:toolbarbutton id="fontColorButton" cmd="foreColor" tooltiptext="_('Font color')"/>
      <xul:toolbarbutton id="fontBackgroundButton" cmd="hiliteColor" tooltiptext="_('Background color')"/>
      <children/>

      <xul:popupset>
        <xul:popup id="colorpicker">
          <xul:colorpicker allowevents="true"/>
        </xul:popup>
      </xul:popupset>
    </content>
    <implementation>

      <constructor><![CDATA[
        this._colorpicker = document.getAnonymousElementByAttribute(this, "id", "colorpicker");

        var el = this.nextSibling;
        if (el && el.localName != "textbox")
          el = el.firstChild;

        if (el && el.localName == "textbox" && el.getAttribute("type") == "resizable-richtext")
          this._textbox = el;
      ]]></constructor>

      <method name="_repairColor">
        <parameter name="color"/>
        <body>
          <![CDATA[
            var match;

            if (!color)
              return "#000000";
            else if (color == "transparent")
              return "#ffffff";
            if (match = color.match(/rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/))
              return "#"+(+match[1]+256).toString(16).substr(1)+
                         (+match[2]+256).toString(16).substr(1)+
                         (+match[3]+256).toString(16).substr(1);
            return color;
          ]]>
        </body>
      </method>

      <method name="_updateState">
        <body><![CDATA[
        if (!this._textbox)
          return;
        for each (var cmd in "bold italic underline".split(" ")) {
          document.getAnonymousElementByAttribute(this, "cmd", cmd).checked =
            this._textbox._input.contentDocument.queryCommandState(cmd);
        }
        ]]></body>
      </method>
    </implementation>

    <handlers>
      <handler event="popuphiding"><![CDATA[
        if (event.originalTarget != this._colorpicker)
          return;
        this._colorpicker.firstChild.removeKeyListener();
        this._colorpicker.firstChild.mIsPopup = false;
        this._colorButtonCmd = null;
      ]]></handler>

      <handler event="select"><![CDATA[
        if (event.originalTarget != this._colorpicker.firstChild || !this._colorButtonCmd)
          return;

        if (this._textbox)
          this._textbox._input.contentDocument.execCommand(this._colorButtonCmd, false,
            this._repairColor(this._colorpicker.firstChild.color));

        setTimeout(function(me) { me._colorpicker.hidePopup(); }, 0, this)
      ]]></handler>

      <handler event="command"><![CDATA[
        if (!this._textbox)
          return;

        var cmd = event.originalTarget.getAttribute("cmd");

        if (cmd == "foreColor" || cmd == "hiliteColor") {
          this._colorButtonCmd = cmd;

          this._colorpicker.firstChild.color = this._repairColor(this._textbox._input.
            contentDocument.queryCommandValue(cmd));

          this._colorpicker.firstChild.addKeyListener();
          this._colorpicker.firstChild.mIsPopup = true;

          setTimeout(function (popup, button) {
            popup.showPopup(button, -1, -1, "popup", "bottomleft", "topleft");
          }, 0, this._colorpicker, event.originalTarget);
        } else if (cmd) {
          this._textbox._input.contentDocument.execCommand(cmd, false, null);
          this._textbox.maybeResize();
        }
      ]]></handler>
    </handlers>
  </binding>

  <binding id="resizable-richtextbox">
    <resources>
      <stylesheet src="chrome://global/skin"/>
      <stylesheet src="chrome://oneteam/skin/chatpane/textbox.css"/>
    </resources>

    <content>
      <xul:stack class="inputBoxStack" flex="1">
        <xul:hbox>
          <xul:spacer flex="1"/>
          <xul:label id="_counter" value="0"/>
        </xul:hbox>
        <xul:vbox flex="1" class="inputBox">
          <html:iframe id="_input" style="height: 1em"/>
        </xul:vbox>
      </xul:stack>
    </content>

    <implementation>
      <property name="value" onget="return this._input.contentDocument.body"
                onset="return this._input.contentDocument.body.innerHTML = val"/>

      <property name="isEmpty" readonly="true">
        <getter><![CDATA[
          var brCount = 0;
          function empty(node, firstLevel) {
            if (node.nodeType == node.TEXT_NODE)
              return node.nodeValue == "";
            if (node.nodeName == "BR")
              return !firstLevel || brCount++ > 0;

            for (var i = 0; i < node.childNodes.length; i++)
              if (!arguments.callee(node.childNodes[i]))
                return false;
            return true;
          }

          return empty(this._input.contentDocument.body, true);
        ]]></getter>
      </property>

      <constructor><![CDATA[
        var me = this;
        this._counter = document.getAnonymousElementByAttribute(this, "id", "_counter");
        this._input = document.getAnonymousElementByAttribute(this, "id", "_input");
        this._input.addEventListener("load", function(){me._init()}, true)

        var el = this.previousSibling;
        if (!el)
          el = this.parentNode.previousSibling;

        if (el && el.localName == "toolbar" && el.getAttribute("type") == "chatpane-commands")
          this._toolbar = el;

        setTimeout(function(body) { body.style.margin = "0"; }, 0,
                   this._input.contentDocument.body);

        this._history = [];
        this._historyPosition = 0;
      ]]></constructor>

      <method name="_init">
        <body><![CDATA[
          var me = this;
          var doc = this._input.contentDocument;
          var win = this._input.contentWindow;

          this._initialized = true;

          var link = doc.createElement("link");
// #ifdef XULAPP
          link.setAttribute("href", "chrome://oneteam/skin/chatpane/content.css");
/* #else
          link.setAttribute("href",
            document.location.href.replace(/content\/.*?$/, "skin/chatpane/content.css"));
// #endif */
          link.setAttribute("rel", "stylesheet");
          doc.getElementsByTagName("HEAD")[0].appendChild(link);

          doc.designMode = "on";
          doc.body.style.margin = "0"
          doc.body.style.backgroundColor = "transparent";

          doc.addEventListener("keypress", function (event) {
            event.stopPropagation();
            if (event.keyCode == KeyEvent.DOM_VK_TAB) {
              event.preventDefault();

              var selection = me._input.contentWindow.getSelection();
              var range = me._input.contentDocument.createRange();

              range.setStart(me._input.contentDocument.body, 0);
              range.setEnd(selection.anchorNode, selection.anchorOffset);

              var res = me._tryCompletion(me._rangeContent(range), event.shiftKey);
              if (res != null) {
                range.deleteContents();
                me._input.contentDocument.execCommand("insertHTML", false, xmlEscape(res));
              }
              range.detach();
              me._onUserType();
              return false;
            }

            var upKey = event.keyCode == KeyEvent.DOM_VK_UP;
            if ((upKey || event.keyCode == KeyEvent.DOM_VK_DOWN) &&
                !event.shiftKey && !event.altKey && !event.ctrlKey &&
                !event.metaKey && me._input.selectionStart == me._input.selectionEnd)
              if (me._handleHistoryKey(upKey)) {
                event.preventDefault();
                me._onUserType();
                return false;
              }

            var inputValue;
            if (event.keyCode == KeyEvent.DOM_VK_RETURN) {
              if (me._doSend(!event.shiftKey)) {
                event.preventDefault();
                return true;
              } else {
                me._onUserType();
                return false;
              }
            }

            me._onUserType();
            return true;
          }, true);

          window.addEventListener("resize", function(){ try{me.maybeResize()}catch(ex){} }, false);

          doc.addEventListener("DOMSubtreeModified", function(){
            me._counter.value = me._domToStr(me._input.contentDocument.body).
              replace(/\n$/,"").length;
            if (me._toolbar)
              me._toolbar._updateState(event);
            me.maybeResize();
          }, false);

          for each (var event in "keydown keyup mousedown mouseup dragdrop".split(" ")) {
            doc.addEventListener(event, function(event){
              if (me._toolbar)
                me._toolbar._updateState(event);
            }, false);
          }

          win.focus();

          this.maybeResize()

          doc = win = null;
        ]]></body>
      </method>

      <method name="focus">
        <body><![CDATA[
          if (this._input)
            setTimeout(function(el){el.focus()}, 100, this._input.contentWindow);
        ]]></body>
      </method>

      <method name="clear">
        <body><![CDATA[
          this._input.contentDocument.execCommand("selectAll", false, null);
          this._input.contentDocument.execCommand("delete", false, null);
          this.maybeResize();
        ]]></body>
      </method>

      <method name="_append">
        <parameter name="str"/>
        <body><![CDATA[
          this._input.contentDocument.execCommand("insertHTML", false, xmlEscape(str));
          this._onUserType();
        ]]></body>
      </method>

      <method name="_onUserType">
        <body><![CDATA[
          setTimeout(function(_this) {
            var event = document.createEvent("Events");
            event.initEvent("userTyping", false, true);
            _this.dispatchEvent(event);
          }, 100, this)
        ]]></body>
      </method>

      <method name="_domToStr">
        <parameter name="node"/>
        <body><![CDATA[
          if (node.nodeType == node.TEXT_NODE)
            return node.nodeValue;
          if (node.nodeName == "BR")
            return "\n";

          var res = "";
          for (var i = 0; i < node.childNodes.length; i++)
            res += arguments.callee(node.childNodes[i]);

          return res;
        ]]></body>
      </method>

      <method name="_rangeContent">
        <parameter name="range"/>
        <body><![CDATA[
          return this._domToStr(range.cloneContents());
        ]]></body>
      </method>

      <method name="_tryCompletion">
        <body><![CDATA[
        ]]></body>
      </method>


      <method name="_doSend">
        <parameter name="withEnter"/>
        <body><![CDATA[
          var value = this._send(withEnter);

          if (value == null)
            return false;

          if (value) {
            if (!this._history.length || this._history[this._history.length-1] != value)
              this._history.push(value);
            this._historyPosition = this._history.length;
          }

          this.clear();
          this.focus();

          return true;
        ]]></body>
      </method>

      <method name="_send">
        <parameter name="withEnter"/>
        <body><![CDATA[
          return withEnter ? null : this._input.value;
        ]]></body>
      </method>

      <method name="_blink">
        <body><![CDATA[
          if (this._blinkToken)
            Animator.stopAnimation(this._blinkToken);

          this.style.outline = "3px solid transparent";
          this._blinkToken = Animator.animateStyle(this, "outlineColor", 20, 20, function(el){
            el.style.outline = "";
          }, "transparent", "borderTopColor", "transparent");
        ]]></body>
      </method>

      <method name="maybeResize">
        <body><![CDATA[
          setTimeout(this._maybeResize, 0, this);
        ]]></body>
      </method>

      <method name="_maybeResize">
        <parameter name="me"/>
        <body><![CDATA[
          me._preMaybeResize();

          var body = me._input.contentDocument.body;

          var h = me._input.clientHeight + body.offsetHeight - body.clientHeight;

          if (h < 10)
            h = 10;

          if (h > 0.3*window.innerHeight) {
            body.style.overflowY = "auto"
            h = 0.3*window.innerHeight;
          } else
            body.style.overflowY = "hidden";

          me._counter.style.fontSize = body.offsetHeight+"px";
          me._input.style.height = (h) + "px";

          me._postMaybeResize();
        ]]></body>
      </method>

      <method name="_preMaybeResize">
        <body> </body>
      </method>

      <method name="_postMaybeResize">
        <body> </body>
      </method>

      <method name="_handleHistoryKey">
        <parameter name="up"/>
        <body><![CDATA[
          var histPos = this._historyPosition + (up ? -1 : 1);

          if (histPos < 0 || histPos > this._history.length)
            return false;

          var selection = this._input.contentWindow.getSelection();
          var range = this._input.contentDocument.createRange();

          if (up) {
            range.setStart(this._input.contentDocument.body, 0);
            range.setEnd(selection.anchorNode, selection.anchorOffset);
          } else {
            range.setStart(selection.focusNode, selection.focusOffset);
            range.setEndAfter(this._input.contentDocument.body);
          }

          var val = this.value.innerHTML.replace(/<br>$/, "");
          var rangeContent = this._rangeContent(range)

          if (rangeContent && rangeContent != "\n")
            return false;

          if (this._historyPosition < this._history.length && val)
            this._history[this._historyPosition] = val;

          this.clear();
          if (histPos < this._history.length) {
            this._input.contentDocument.execCommand("insertHTML", false, this._history[histPos]);
            selection = this._input.contentWindow.getSelection();
            selection.selectAllChildren(this._input.contentDocument.body);
            if (up)
              selection.collapseToEnd();
            else
              selection.collapseToStart();
          }

          this._historyPosition = histPos;
          this.maybeResize();

          return true;
        ]]></body>
      </method>
    </implementation>
  </binding>

  <binding id="chatpane-toolbar" extends="chatpane.xml#richtext-toolbar">
    <resources>
      <stylesheet src="chrome://global/skin"/>
      <stylesheet src="chrome://oneteam/skin/chatpane/textbox.css"/>
    </resources>

    <content tbalign="center">
      <xul:toolbarbutton id="boldButton" type="checkbox" cmd="bold" tooltiptext="_('Bold')"/>
      <xul:toolbarbutton id="italicButton" type="checkbox" cmd="italic" tooltiptext="_('Italic')"/>
      <xul:toolbarbutton id="underlineButton" type="checkbox" cmd="underline" tooltiptext="_('Underline')"/>
      <xul:toolbarseparator/>
      <xul:toolbarbutton id="biggerFontButton" cmd="increaseFontSize" tooltiptext="_('Increase font size')"/>
      <xul:toolbarbutton id="smallerFontButton" cmd="decreaseFontSize" tooltiptext="_('Decrease font size')"/>
      <xul:toolbarseparator/>
      <xul:toolbarbutton id="fontColorButton" cmd="foreColor" tooltiptext="_('Font color')"/>
      <xul:toolbarbutton id="fontBackgroundButton" cmd="hiliteColor" tooltiptext="_('Background color')"/>
      <xul:toolbarseparator/>
      <xul:toolbarbutton id="vcardButton" oncommand="this.parentNode.model.showVCard()"
                         tooltiptext="_('Show contact information')"/>
      <xul:toolbarbutton id="sendFile" oncommand="this.parentNode._model.onSendFile()"
                         tooltiptext="_('Send file')"/>
      <xul:toolbarbutton id="extraCmds" tooltiptext="_('Extra Commands')" type="menu">
        <xul:menupopup onpopupshowing="this.parentNode.parentNode._syncMenu()">
          <xul:menuitem label="_('Invite to group chat room')"
                        onmenushowing="this.hidden = contact instanceof ConferenceMember ||
                                       contact instanceof Conference;
                                       this.disabled = account.conferences.length == 0"
                        oncommand="this.parentNode.parentNode.parentNode._model.onInvite()"/>
          <xul:menuitem label="_('Invite contact')"
                        onmenushowing="this.hidden = !(contact instanceof Conference)"
                        oncommand="this.parentNode.parentNode.parentNode._model.onInvite()"/>
          <xul:menuitem label="_('Invite user by mail')"
                        onmenushowing="this.hidden = !(contact instanceof Conference)"
                        oncommand="this.parentNode.parentNode.parentNode._model.onInviteByMail()"/>
          <xul:menuseparator/>
          <xul:menuitem id="charCounter" label="_('Show characters counter')" type="checkbox"
                        oncommand="this.parentNode.parentNode.parentNode.showCounter = !this.checked"/>
        </xul:menupopup>
      </xul:toolbarbutton>
      <xul:toolbarseparator/>
      <xul:toolbarbutton id="smilesList" type="smiles-list"
                         tooltiptext="_('Toggle smiles visibility/select smile')"/>

      <xul:popupset>
        <xul:popup id="colorpicker">
          <xul:colorpicker allowevents="true"/>
        </xul:popup>
      </xul:popupset>
    </content>

    <implementation>
      <property name="model" onget="return this._model">
        <setter><![CDATA[
          this._model = val;

          if (val)
            this.showCounter = account.cache.getValue("showCounter-"+val.jid.normalizedJID.shortJID);
          else
            this.showCounter = false;

          this._sendFile.hidden = !val || typeof(socks5Service) == "undefined" ||
            !socks5Service.canSendTo(val.contact ? val : val.activeResource);
          this._syncMenu();
        ]]></setter>
      </property>

      <property name="showCounter" onget="return this._showCounter">
        <setter><![CDATA[
          this._showCounter = val;

          var counter = document.getAnonymousElementByAttribute(this, "id", "charCounter");
          counter.setAttribute("checked", !!val);
          counter.checked = !!val;

          if (this._textbox)
            this._textbox._counter.hidden = !val;

          if (this._model)
            if (val)
              account.cache.setValue("showCounter-"+this.model.jid.normalizedJID.shortJID, true);
            else
              account.cache.removeValue("showCounter-"+this.model.jid.normalizedJID.shortJID);
        ]]></setter>
      </property>

      <constructor><![CDATA[
        this._sendFile = document.getAnonymousElementByAttribute(this, "id", "sendFile");
        this._extraCmds = document.getAnonymousElementByAttribute(this, "id", "extraCmds");

        var p = this.__proto__;
        this.__proto__ = {};

        var state = {};
        for each (var i in "model".split(/ /))
          if (this[i] != null) {
            state[i] = this[i];
            delete this[i];
          }

        this.__proto__ = p;

        for (i in state)
          this[i] = state[i];
      ]]></constructor>

      <method name="_syncMenu">
        <body><![CDATA[
          var list = this._extraCmds.firstChild.childNodes;
          var hasAnyEntry = false;

          for (var i = 0; i < list.length; i++) {
            if (!list[i].onmenushowing)
              list[i].onmenushowing = new Function("contact", list[i].getAttribute("onmenushowing"));

            list[i].onmenushowing(this._model);

            if (!list[i].hidden)
              hasAnyEntry = true;
          }

          this._extraCmds.hidden = !hasAnyEntry;
       ]]></body>
      </method>
    </implementation>

    <handlers>
      <handler event="selectedSmile">
        <![CDATA[
          if (this._textbox)
            this._textbox._append(event.originalTarget.selectedSmile.texts[0]);
        ]]>
      </handler>
    </handlers>
  </binding>

  <binding id="chatpane">

    <resources>
      <stylesheet src="chrome://global/skin"/>
      <stylesheet src="chrome://oneteam/skin/chatpane/chatpane.css"/>
    </resources>

    <content>
      <xul:vbox flex="1" smiles-enabled="true">
        <xul:contactinfo id="contactInfo"/>

        <xul:chatpane-view id="output-pane" flex="1"/>

        <xul:toolbar type="chatpane-commands"/>

        <xul:hbox align="center">
          <xul:textbox type="resizable-richtext" id="input" flex="1" multiline="true"/>
          <xul:button id="send" oncommand="this.parentNode.parentNode.parentNode._doSend(true)"/>
        </xul:hbox>
      </xul:vbox>
    </content>

    <implementation>

      <property name="inputIsEmpty" onget="return this._input.isEmpty" readonly="true"/>

      <property name="hasSubject"
        onset="this._subject.parentNode.hidden = !val; return val"
        onget="return !this._subject.parentNode.hidden" />

      <property name="subject"
        onset="return this._subject.value = val"
        onget="return this._subject.value" />

      <property name="focusHandler"
        onset="this._attachFocusHandler(this, val); return val"
        onget="return this._focusHandler" />

      <property name="model" onget="return this._model">
        <setter><![CDATA[
          this._model = val;
          this._contactInfo.model = val && val.contact;
          this._output.model = val;
          this._chatpaneCommands.model = val && val.contact;
          this.completionEngine = val && val.contact.createCompletionEngine();

          if (val && val.contact) {
            this._contactInfo.parentNode.menuModel = val.contact;
            this._contactInfo.parentNode.setAttribute("context",
              (val.contact instanceof Conference ? "conference" : "contact")+"-contextmenu");
          }

          return val;
        ]]></setter>
      </property>

      <constructor><![CDATA[
        this.sendOnEnter = this.getAttribute("sendonenter") != "false";

        this._input = document.getAnonymousElementByAttribute(this, "id", "input");
        this._output = document.getAnonymousElementByAttribute(this, "id", "output-pane");
        this._subject = document.getAnonymousElementByAttribute(this, "id", "subject");
        this._contactInfo = document.getAnonymousElementByAttribute(this, "id", "contactInfo");
        this._chatpaneCommands = document.getAnonymousElementByAttribute(this, "type", "chatpane-commands");
        this._smilesList = document.getAnonymousElementByAttribute(this, "id", "smilesList");

        this._input._tryCompletion = new Callback(this._tryCompletion, this);
        this._input._send = new Callback(this._send, this);
        this._input._preMaybeResize = new Callback(this._preMaybeResize, this);
        this._input._postMaybeResize = new Callback(this._postMaybeResize, this);

        var p = this.__proto__;
        this.__proto__ = {};

        var state = {};
        for each (var i in "model focusHandler".split(/ /))
          if (this[i] != null) {
            state[i] = this[i];
            delete this[i];
          }

        this.__proto__ = p;

        for (i in state)
          this[i] = state[i];

        setTimeout(function(me) {
          if (!me._output._output) {
            setTimeout(arguments.callee, 10, me);
            return;
          }
          me._output._output.contentWindow.addEventListener("keypress", function(event) {
            if (event.charCode && !event.ctrlKey && !event.altKey && !event.metaKey) {
              event.stopPropagation();
              event.preventDefault();
              me._input._append(String.fromCharCode(event.charCode));
              me.focus();
            }
          }, false);
        }, 0, this);
      ]]></constructor>

      <method name="destroy">
        <body><![CDATA[
          this._output.destroy()
        ]]></body>
      </method>

      <method name="_attachFocusHandler">
        <parameter name="_this"/>
        <parameter name="handler"/>
        <parameter name="internal"/>
        <body><![CDATA[
          if (!internal) {
            if (_this._focusHandler == handler)
              return;
            _this._focusHandler = handler;
          } else
            delete _this._focusHandlerAttachTimeout;

          if (!_this._output || !_this._input ||
              !_this._output._initialized || !_this._input._initialized)
          {
            if (_this._focusHandlerAttachTimeout == null)
              _this._focusHandlerAttachTimeout = window.setTimeout(arguments.callee, 10, _this, null, true);
            return;
          }

          if (_this._focusHandler) {
            if (!_this._focusHandlers) {
              _this._focusHandlers = [];
              _this._focusHandlers[0] = function(event) {
                if (event.target.nodeType == 9 && _this._focusHandler)
                  _this._focusHandler._windowFocusHandler(_this._focusHandler, event);
              };
              _this._focusHandlers[1] = function(event) {
                if (event.target.nodeType == 9 && _this._focusHandler)
                  _this._focusHandler._windowBlurHandler(_this._focusHandler, event);
              };
            }
            if (!_this._focusHandlerAttached) {
              _this._input._input.contentWindow.addEventListener("focus", _this._focusHandlers[0], true);
              _this._input._input.contentWindow.addEventListener("blur", _this._focusHandlers[1], true);
              _this._output._output.contentWindow.addEventListener("focus", _this._focusHandlers[0], true);
              _this._output._output.contentWindow.addEventListener("blur", _this._focusHandlers[1], true);
              _this._focusHandlerAttached = true;
            }
          } else if (_this._focusHandlerAttached) {
            _this._input._input.contentWindow.removeEventListener("focus", _this._focusHandlers[0], true);
            _this._input._input.contentWindow.removeEventListener("blur", _this._focusHandlers[1], true);
            _this._output._output.contentWindow.removeEventListener("focus", _this._focusHandlers[0], true);
            _this._output._output.contentWindow.removeEventListener("blur", _this._focusHandlers[1], true);
            _this._focusHandlerAttached = false;
          }
        ]]></body>
      </method>

      <method name="focus">
        <body><![CDATA[
          this._input.focus();
        ]]></body>
      </method>

      <method name="clear">
        <body><![CDATA[
          this._input.clear();
        ]]></body>
      </method>

      <method name="clearOutput">
        <body><![CDATA[
          this._output.clear();
        ]]></body>
      </method>

      <method name="_tryCompletion">
        <parameter name="str"/>
        <body><![CDATA[
          if (!this.completionEngine)
            return;
          var res = this.completionEngine.complete(str);
          if (res == null)
            this._input._blink();
          return res;
        ]]></body>
      </method>

      <method name="_preMaybeResize">
        <body><![CDATA[
          if (!this._output || !this._output._output || !this._output._output.contentDocument)
            return;

          var outputBody = this._output._output.contentDocument.body;
          this._outputScrollPos = outputBody.scrollTop + outputBody.clientHeight;
        ]]></body>
      </method>

      <method name="_postMaybeResize">
        <body><![CDATA[
          var outputBody = this._output._output.contentDocument.body;
          outputBody.scrollTop = this._outputScrollPos - outputBody.clientHeight;
        ]]></body>
      </method>

      <method name="_doSend">
        <parameter name="withEnter"/>
        <body><![CDATA[
          this._input._doSend(withEnter);
        ]]></body>
      </method>

      <method name="_send">
        <parameter name="withEnter"/>
        <body><![CDATA[
          if (!this.sendOnEnter || !withEnter)
            return null;

          var text = this._input.value.textContent;

          if (~text.search(/\S/)) {
            if (!this.completionEngine || !this.completionEngine.execCommand(text)) {
              var ev = document.createEvent("Events");
              ev.initEvent("chat-send", true, false);
              this.dispatchEvent(ev);

              var body = this._input.value;
              if (body.lastChild.localName == "BR")
                body.removeChild(body.lastChild);

              var myResource = this._model.contact instanceof ConferenceMember ?
                this._model.contact.contact.myResource : account.myResource;

              var msg = new Message(null, body, myResource,
                                    this._model.contact instanceof Conference ? 1 : 3,
                                    null, this._model)

              this._model.sendMessage(msg);

              return msg.html;
            }
          }
          return "";
        ]]></body>
      </method>
    </implementation>

    <handlers>
      <handler event="smilesToggle">
        <![CDATA[
          var enabled = this._contactInfo.parentNode.getAttribute("smiles-enabled") != "true"
          this._contactInfo.parentNode.setAttribute("smiles-enabled", enabled);
          this._output.smilesEnabled = enabled;
        ]]>
      </handler>
    </handlers>
  </binding>
</bindings>
