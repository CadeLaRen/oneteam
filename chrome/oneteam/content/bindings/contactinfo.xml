<?xml version="1.0"?>

<bindings xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="info">

    <resources>
      <stylesheet src="chrome://oneteam/skin/main/roster.css"/>
      <stylesheet src="chrome://oneteam/skin/contactinfo/contactinfo.css"/>
    </resources>

    <content class="container">
      <xul:stack class="stack">
        <xul:vbox class="background"/>
        <xul:hbox class="contact-view" align="start" flex="1">
          <xul:grid class="icon-container">
            <xul:columns>
              <xul:column/>
              <xul:column flex="1" collapsed="true"/>
            </xul:columns>
            <xul:rows>
              <xul:row nonEmpty="true">
                <xul:image class="status-icon"/>
                <xul:label class="status-desc" collapsed="true"/>
              </xul:row>
              <xul:row>
                <xul:image class="chatstate-icon"/>
                <xul:label class="chatstate-desc" collapsed="true"/>
              </xul:row>
            </xul:rows>
          </xul:grid>
          <xul:stack>
            <xul:stack class="label-box" overflowed="false">
              <xul:hbox align="center" pack="center">
                <xul:label id="label"/>
              </xul:hbox>
              <xul:vbox>
                <xul:image/>
              </xul:vbox>
            </xul:stack>
            <xul:vbox class="avatar-box">
              <xul:avatar id="avatar" showBlankAvatar="false"
                          side="48" squareBordered="true"/>
            </xul:vbox>
            <xul:hbox class="counter-box">
              <xul:vbox hidden="true">
                <xul:label id="counter" value="0"/>
              </xul:vbox>
            </xul:hbox>
          </xul:stack>
          <xul:vbox class="info-box" flex="1">
            <xul:vbox>
              <xul:hbox align="baseline">
                <xul:label class="contact-name"/>
                <xul:label flex="1" crop="end" class="contact-jid"/>
                <children/>
              </xul:hbox>
              <xul:description flex="1" crop="end" class="status-text"/>
            </xul:vbox>
          </xul:vbox>
        </xul:hbox>
      </xul:stack>
      <xul:vbox class="vertical-info-box">
        <xul:label class="contact-name2"/>
        <xul:label flex="1" crop="end" class="contact-jid2"/>
      </xul:vbox>
    </content>

    <implementation>

      <property name="model" onget="return this._model">
        <setter><![CDATA[
          if (this._model == val)
            return val;

          if (!this._avatar) {
            this._model = val;
            return val;
          }

          // XXX: Should be val instanceof Conference but may not work in other
          //  windows
          var modelIsConference = !!(val && val.joinRoom);

          if (this._regToken)
            this._regToken.unregisterFromAll();

          this._model = val;

          if (val) {
            this._regToken = val.registerView(this.onNameChange, this, "visibleName");
            if (modelIsConference) {
              val.registerView(this.onSubjectChanged, this, "subject", this._regToken);
              val.registerView(this.onMsgsInQueueChanged, this, "msgsInQueue", this._regToken);
            } else {
              val.registerView(this.onPresenceChange, this, "presence", this._regToken);
              val.registerView(this.onMsgsInQueueChanged, this, "msgsInQueue", this._regToken);
              val.registerView(this.onAvatarChanged, this, "avatar", this._regToken);
            }
          }

          this.onSubjectChanged();
          this.onNameChange();
          this.onPresenceChange();
          this.updateChatState("");
          this.onAvatarChanged();

          this._avatar.model = modelIsConference ? null : val;

          return val;
        ]]></setter>
      </property>

      <constructor>
        <![CDATA[
          this._container = document.getAnonymousElementByAttribute(this, "class", "contact-view");
          this._avatar = document.getAnonymousElementByAttribute(this, "id", "avatar");
          this._label = document.getAnonymousElementByAttribute(this, "id", "label");
          this._counter = document.getAnonymousElementByAttribute(this, "id", "counter");
          this._name = document.getAnonymousElementByAttribute(this, "class", "contact-name");
          this._jid = document.getAnonymousElementByAttribute(this, "class", "contact-jid");
          this._name2 = document.getAnonymousElementByAttribute(this, "class", "contact-name2");
          this._jid2 = document.getAnonymousElementByAttribute(this, "class", "contact-jid2");
          this._statusText = document.getAnonymousElementByAttribute(this, "class", "status-text");
          this._statusIcon = document.getAnonymousElementByAttribute(this, "class", "status-icon");
          this._statusDesc = document.getAnonymousElementByAttribute(this, "class", "status-desc");
          this._chatStateIcon = document.getAnonymousElementByAttribute(this, "class", "chatstate-icon");
          this._chatStateDesc = document.getAnonymousElementByAttribute(this, "class", "chatstate-desc");

          var root = window;

          while (!root.account)
            root = root.opener;

          this._unavailablePresence = new root.Presence("unavailable");

          recoverSetters(this);

          this._label.parentNode.addEventListener("overflow", function(ev) {
              ev.target.parentNode.setAttribute("overflowed", "true");
          }, true);

          this._label.parentNode.addEventListener("underflow", function(ev) {
              ev.target.parentNode.setAttribute("overflowed", "false");
          }, true);
          this._label.style.margin="";
        ]]>
      </constructor>

      <destructor>
        <![CDATA[
          this.model = null;
        ]]>
      </destructor>

      <method name="onNameChange">
        <body><![CDATA[
          if (!this.model) {
            this._name.value = "";
            this._label.value = "";
            this._jid.value = "";
            return;
          }

          var jid = this.model.jid.toUserString();
          if (this.model.gateway || this.model.contact && this.model.contact.gateway)
            jid = jid.replace(/%(.*?)@.*/, "@$1");

          this._label.value = this.model.visibleName;
          this._name.value = this.model.visibleName;
          this._jid.value = jid;
          this._name2.value = this.model.visibleName;
          this._jid2.value = jid;
        ]]></body>
      </method>

      <method name="onPresenceChange">
        <body><![CDATA[
          this.onMsgsInQueueChanged();

          var modelIsConference = this.model && this.model.joinRoom;

          if (this.model) {
            this._statusDesc.value = this.model.presence;
            if (!modelIsConference)
              this._statusText.textContent = this.model.presence.status || "";
          } else {
            this._statusDesc.value = this._unavailablePresence;
            if (!modelIsConference)
              this._statusText.textContent = "";
          }
          this._container.setAttribute("offlineContact",
            !this.model || this.model.presence.show == "unavailable");
        ]]></body>
      </method>

      <method name="onMsgsInQueueChanged">
        <body><![CDATA[
          if (this._blinkingTimeout)
              clearInterval(this._blinkingTimeout);
          this._blinkingTimeout = null;

          if (!this.model) {
            this._statusIcon.src = this._unavailablePresence.getIcon();
            return;
          }

          var icon = this.model.getStatusIcon(this.model.msgsInQueue);

          if (this.model.msgsInQueue) {
              if (icon.length > 1) {
                  this._blinkingTimeout = setInterval(function(img, icons, idx) {
                      img.src = icons[idx.idx = (idx.idx+1)%icons.length];
                  }, 500, this._statusIcon, icon, {idx:0});
              }
              icon = icon[0];
          }
          this._statusIcon.src = icon;
          this._counter.value = this.model.msgsInQueue;
          this._counter.parentNode.hidden = !this.model.msgsInQueue;
        ]]></body>
      </method>

      <method name="onSubjectChanged">
        <body><![CDATA[
          if (this.model && this.model.joinRoom)
            this._statusText.textContent = (this._model && this._model.subject) || "";
        ]]></body>
      </method>

      <method name="onAvatarChanged">
        <body><![CDATA[
          this._container.setAttribute("hasAvatar", !!(this._model && this._model.avatar));
        ]]></body>
      </method>

      <method name="updateChatState">
        <parameter name="state"/>
        <body><![CDATA[
          this._chatStateIcon.parentNode.setAttribute("nonEmpty", !!state);
          this._chatStateIcon.className = "chatstate-"+state;
          switch (state) {
            case "active":
              this._chatStateDesc.textContent = _("Active");
              break;
            case "paused":
              this._chatStateDesc.textContent = _("Paused");
              break;
            case "composing":
              this._chatStateDesc.textContent = _("Composing");
              break;
            case "inactive":
              this._chatStateDesc.textContent = _("Inactive");
              break;
            case "gone":
              this._chatStateDesc.textContent = _("Gone");
              break;
            default :
              this._chatStateDesc.textContent = "";
          }
        ]]></body>
      </method>
    </implementation>

  </binding>

</bindings>
