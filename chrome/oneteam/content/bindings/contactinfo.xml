<?xml version="1.0"?>

<bindings xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="info">

    <resources>
      <stylesheet src="chrome://global/skin"/>
      <stylesheet src="chrome://oneteam/skin/contactinfo/contactinfo.css"/>
    </resources>

    <content>
      <xul:hbox id="contact-info-box" flex="1">
        <xul:avatar id="avatar" showBlankAvatar="true"/>
        <xul:vbox id="conferenceIcon" hidden="true">
          <xul:image id="conferenceIconImage"/>
        </xul:vbox>
        <xul:vbox flex="1">
          <xul:description id="name" flex="1">
            <html:span id="jid"/>
            <html:span id="chatState"/>
          </xul:description>
          <xul:description id="subject" hidden="true"/>
          <xul:hbox align="center">
            <xul:image id="statusIcon"/>
            <xul:label id="status"/>
            <xul:label flex="1" crop="end" id="statusText"/>
          </xul:hbox>
        </xul:vbox>
      </xul:hbox>
    </content>

    <implementation>

      <property name="model" onget="return this._model">
        <setter><![CDATA[
          if (this._model == val)
            return val;

          if (!this._avatar) {
            this._model = val;
            return val;
          }

          // XXX: Should be val instanceof Conference but may not work in other
          //  windows
          var modelIsConference = !!(val && val.joinRoom);

          this._subject.hidden = !modelIsConference;
          this._status.parentNode.hidden = modelIsConference;
          this._avatar.hidden = modelIsConference;
          document.getAnonymousElementByAttribute(this, "id", "conferenceIcon").
            hidden = !modelIsConference;

          this._regBundle.unregister();

          this._model = val;

          if (val) {
            this._regBundle.register(val, this.onNameChange, "visibleName");
            if (modelIsConference)
              this._regBundle.register(val, this.onSubjectChanged, "subject");
            else {
              this._regBundle.register(val, this.onPresenceChange, "presence");
              this._regBundle.register(val, this.onMsgsInQueueChanged, "msgsInQueue");
            }
          }

          this.onSubjectChanged();
          this.onNameChange();
          this.onPresenceChange();
          this.updateChatState("");

          this._avatar.model = modelIsConference ? null : val;

          return val;
        ]]></setter>
      </property>

      <constructor>
        <![CDATA[
          this._avatar = document.getAnonymousElementByAttribute(this, "id", "avatar");
          this._name = document.getAnonymousElementByAttribute(this, "id", "name");
          this._jid = document.getAnonymousElementByAttribute(this, "id", "jid");
          this._subject = document.getAnonymousElementByAttribute(this, "id", "subject");
          this._status = document.getAnonymousElementByAttribute(this, "id", "status");
          this._statusIcon = document.getAnonymousElementByAttribute(this, "id", "statusIcon");
          this._statusText = document.getAnonymousElementByAttribute(this, "id", "statusText");
          this._chatState = document.getAnonymousElementByAttribute(this, "id", "chatState");

          var root = window;

          while (!root.account)
            root = root.opener;

          this._regBundle = new root.RegsBundle(this);

          this._unavailablePresence = new root.Presence("unavailable");

          if (this.model) {
            var model = this.model;
            delete this.model;
            this._model = null;
            this.model = model;
          }
        ]]>
      </constructor>

      <destructor>
        <![CDATA[
          this.model = null;
        ]]>
      </destructor>

      <method name="onNameChange">
        <body><![CDATA[
          while (this._name.firstChild != this._jid)
            this._name.removeChild(this._name.firstChild);

          if (!this.model) {
            this._jid.hidden = true;
            return;
          }

          this._name.insertBefore(document.createTextNode(this.model.visibleName), this._jid);

          if (this.model.visibleName.indexOf(this.model.jid.shortJID) != 0) {
            var jid = this.model.jid.toUserString();
            if (this.model.gateway || this.model.contact && this.model.contact.gateway)
              jid = jid.replace(/%(.*?)@.*/, "@$1");
            this._jid.textContent = " ("+jid+")";
            this._jid.hidden = false;
          } else
            this._jid.hidden = true;
        ]]></body>
      </method>

      <method name="onPresenceChange">
        <body><![CDATA[
          this.onMsgsInQueueChanged();

          if (this.model) {
            this._status.value = this.model.presence;
            this._status.style.color = this.model.presence.getColor();
            this._statusText.value = this.model.presence.status ?
              " - "+this.model.presence.status : "";
          } else {
            this._status.value = this._unavailablePresence;
            this._status.style.color = this._unavailablePresence.getColor();
            this._statusText.value = "";
          }
        ]]></body>
      </method>

      <method name="onMsgsInQueueChanged">
        <body><![CDATA[
          if (this._blinkingTimeout)
              clearInterval(this._blinkingTimeout);
          this._blinkingTimeout = null;

          if (!this.model) {
            this._statusIcon.src = this._unavailablePresence.getIcon();
            return;
          }

          var icon = this.model.getStatusIcon(this.model.msgsInQueue);

          if (this.model.msgsInQueue) {
              if (icon.length > 1) {
                  this._blinkingTimeout = setInterval(function(img, icons, idx) {
                      img.src = icons[idx.idx = (idx.idx+1)%icons.length];
                  }, 500, this._statusIcon, icon, {idx:0});
              }
              icon = icon[0];
          }
          this._statusIcon.src = icon;
        ]]></body>
      </method>

      <method name="onSubjectChanged">
        <body><![CDATA[
          this._subject.textContent = (this._model && this._model.subject) || "";
        ]]></body>
      </method>

      <method name="updateChatState">
        <parameter name="state"/>
        <body><![CDATA[
          switch (state) {
            case "active":
              this._chatState.textContent = _("is paying attention to this conversation");
              break;
            case "paused":
              this._chatState.textContent = _("paused composing message");
              break;
            case "composing":
              this._chatState.textContent = _("is composing message");
              break;
            case "inactive":
              this._chatState.textContent = _("is doing something else");
              break;
            case "gone":
              this._chatState.textContent = _("has closed chat tab");
              break;
            default :
              this._chatState.textContent = "";
          }
        ]]></body>
      </method>
    </implementation>

  </binding>

</bindings>
