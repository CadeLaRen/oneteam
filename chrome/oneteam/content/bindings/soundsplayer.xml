<?xml version="1.0"?>

<bindings xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="player">

    <resources>
      <stylesheet src="chrome://global/skin"/>
    </resources>

    <content>
      <xul:vbox anonid="box">
      </xul:vbox>
    </content>

    <implementation>
      <constructor><![CDATA[
        this._player = Components.classes["@mozilla.org/sound;1"].
          createInstance(Components.interfaces.nsISound);
        this._ios = Components.classes["@mozilla.org/network/io-service;1"].
          getService(Components.interfaces.nsIIOService);
      ]]></constructor>

      <method name="playSound">
        <parameter name="type"/>
        <parameter name="loops"/>
        <body><![CDATA[
          try {
            if (!prefManager.getPref("chat.general.sounds"))
              return;
            if (this._player) {
              if (!this._threadCreated && !this._thread) {
                this._threadCreated = true;
                try {
                  if (navigator.platform.search(/linux/i) >= 0)
                    this._thread = Components.classes["@mozilla.org/thread-manager;1"].
                      getService(Components.interfaces.nsIThreadManager).newThread(0);
                } catch (ex) {}
              }
              var url = this._ios.newURI("chrome://oneteam/content/data/sounds/"+
                                         type+".wav", null, null);
              if (this._thread) {
                if (!this._playing || !this._playing.value) {
                  this._playing.value = true;

                  this._thread.dispatch({
                    run: function() {
                      this.player.play(this.url)
                      this.playing.value = false;
                    },

                    player: this._player,
                    playing: this._playing,
                    url: url
                  }, this._thread.DISPATCH_NORMAL);
                }
              } else
                this._player.play(url);
            }
          } catch(ex){ alert(ex)}
        ]]></body>
      </method>
    </implementation>
  </binding>
</bindings>
