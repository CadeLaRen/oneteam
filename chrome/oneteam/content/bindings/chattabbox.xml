<?xml version="1.0"?>

<!DOCTYPE bindings [
  <!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
  %globalDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="chattabbox">
    <resources>
      <stylesheet src="chrome://oneteam/skin/chattabbox/chattabbox.css"/>
    </resources>

    <content>
      <xul:tabbox flex="1">
        <xul:tabs class="with-scroll" setfocus="false" anonid="tabs"/>
        <xul:tabpanels anonid="tabpanels" flex="1"
                       onselect="this.selectedPanel.controller.focus()"/>
      </xul:tabbox>
    </content>
    <implementation>
      <property name="tabCount" onget="return this._tabs.childNodes.length"
                readonly="true"/>

      <property name="unseenCount" onget="return this._unseenCount">
        <setter><![CDATA[
          if (val == this._unseenCount)
            return val;

          this._unseenCount = val;

// #ifdef XULAPP
          var doc = document;
/* #else
          var doc = window.top.document;
// #endif */

          doc.title = doc.title.replace(/^(?:\* |\[\d+\] )?/,
            val == 0 ? "" : val == 1 ? "* " : "["+val+"] ");

          if (window.top.changeFavIcon)
            window.top.changeFavIcon(val ? account.style.defaultSet.iconsMap["psi/message"] : null);

          return val;
        ]]></setter>
      </property>

      <constructor><![CDATA[
        this._tabs = document.getAnonymousElementByAttribute(this, "anonid", "tabs");
        this._tabpanels = document.getAnonymousElementByAttribute(this, "anonid", "tabpanels");
        this._unseenCount = 0;
        this._inSelectTab = 0;

        var _this = this;

        window.addEventListener("blur", function(event) {
          if (!_this._blurTimeout)
            _this._blurTimeout = setTimeout(function(_this) {
              if (_this._focusTimeout) {
                clearTimeout(_this._focusTimeout);
                _this._focusTimeout = null;
              }
              _this._blurTimeout = null;
              if (_this._windowHasFocus) {
                _this._windowHasFocus = false;
                _this._onWindowBlur();
              }
            }, 50, _this);
        }, true);

        window.addEventListener("focus", function(event) {
          if (_this._blurTimeout) {
            clearTimeout(_this._blurTimeout);
            _this._blurTimeout = null;
          }
          if (!_this._windowHasFocus && !_this._focusTimeout)
            _this._focusTimeout = setTimeout(function(_this) {
              _this._focusTimeout = null;
              _this._windowHasFocus = true;
              _this._onWindowFocus();
            }, 50, _this);
        }, true);

        window.addEventListener("keypress", function(event) {
          if (event.charCode && _this._selectedTab &&
              !event.ctrlKey && !event.altKey &&
              event.target.localName != "textbox" &&
              event.target.localName != "chattabbox")
          {
            _this._selectedTab.controller._appendToInput(String.fromCharCode(event.charCode));
            _this._selectedTab.controller.focus();
          }
        }, false);
      ]]></constructor>

      <method name="getTab">
        <parameter name="contact"/>
        <body><![CDATA[
          var cn = this._tabs.childNodes;
          for (var i = 0; i < cn.length; i++)
            if (cn[i].controller.contact.jid.normalizedJID == contact.jid.normalizedJID) {
              cn[i].controller.contact = contact;
              return cn[i].controller;
            }
            return null;
        ]]></body>
      </method>

      <method name="openTab">
        <parameter name="contact"/>
        <body><![CDATA[
          // Search for tab with this same jid (contact may lost track of chatpane
          //  after resource disconnection/connection
          var tab, tabpanel;

          if ((tab = this.getTab(contact)))
              return tab;

          const ns = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";

          var content = document.createElementNS(ns, "chattab-content");

          tabpanel = content._tabpanel = document.createElementNS(ns, "tabpanel");
          tabpanel.setAttribute("flex", "1");
          this._tabpanels.appendChild(tabpanel);

          tabpanel.appendChild(content);

          tab = content._tab = document.createElementNS(ns, "tab");
          tab.setAttribute("hasclosebutton", "true");
          tab.setAttribute("oncommand", "this.controller.close()");
          tab.maxWidth = 250;
          tab.minWidth = 100;
          tab.width = 0;
          this._tabs.appendChild(tab);

          // XXX: TEAM-63 hack
          tab.setAttribute("last-tab", "true");
          if (!tab.previousSibling)
            tab.setAttribute("first-tab", "true");
          else
            tab.previousSibling.removeAttribute("last-tab");

          content.contact = contact;
          content._tabbox = this;

          // Magic - cache calls to _content until it is properly initialized
          var wrappedContent = {
            _content: content,
            _callbacks: [],

            get contact() { return this._content.contact },
            set contact(val) { return this._content.contact = val },
            get unseenCount() { return this._content.unseenCount || 0 },
            get closed() { return this._content.closed || false },

            __noSuchMethod__: function(name, args)
            {
              if (this._content._chatpane &&
                  this._content._chatpane.addMessage &&
                  this._content._chatpane._output &&
                  this._content._chatpane._output.addMessage)
                return this._content[name].apply(this._content, args);

              this._callbacks.push([name, args]);

              if (this._callbacks.length == 1)
                window.setTimeout(function(me) {
                  if (me._content._chatpane &&
                      me._content._chatpane.addMessage &&
                      me._content._chatpane._output &&
                      me._content._chatpane._output.addMessage)
                  {
                    for (var i = 0; i < me._callbacks.length; i++)
                      me._content[me._callbacks[i][0]].apply(me._content,
                                                             me._callbacks[i][1]);

                    me.__noSuchMethod__ = function(name, args) {
                      this._content[name].apply(this._content, args);
                    }
                  }
                  else
                    window.setTimeout(arguments.callee, 10, me);
                }, 0, this);
              return null;
            }
          };

          tabpanel.controller = wrappedContent;
          tab.controller = wrappedContent;

          this._selectTab(content);

          var ev = document.createEvent("Events");
          ev.initEvent("tab-added", true, false);
          this.dispatchEvent(ev);

          wrappedContent.focus();

          return wrappedContent;
        ]]></body>
      </method>

      <method name="closeTabs">
        <body><![CDATA[
          this._inCloseTabs = true;

          for (var i = this._tabs.length-1; i >= 0; i--)
            this._tabs[i].controller.close();

          this._inCloseTabs = false;
        ]]></body>
      </method>

      <method name="_removeTab">
        <parameter name="content"/>
        <body><![CDATA[
          if (!content._tab.parentNode)
            return;

          if (this._inCloseTabs) {
            content._tabpanel.parentNode.removeChild(content._tabpanel);
            content._tab.parentNode.removeChild(content._tab);

            var ev = document.createEvent("Events");
            ev.initEvent("tab-removed", true, false);
            this.dispatchEvent(ev);

            return;
          }

          var nextTab = content._tab.selected ?
            content._tab.nextSibling || content._tab.previousSibling :
            content._tab.parentNode.selectedItem;

          if (nextTab)
            nextTab.controller.focus();

          // XXX: TEAM-63 hack
          if (content._tab.nextSibling) {
            if (!content._tab.previousSibling)
              content._tab.nextSibling.setAttribute("first-tab", "true");
          } else if (content._tab.previousSibling)
            content._tab.previousSibling.setAttribute("last-tab", "true");

          content._tabpanel.parentNode.removeChild(content._tabpanel);
          content._tab.parentNode.removeChild(content._tab);

          if (nextTab)
            nextTab.controller.focus();

          this._tabs._fixupScrollPosition();

          var ev = document.createEvent("Events");
          ev.initEvent("tab-removed", true, false);
          this.dispatchEvent(ev);
        ]]></body>
      </method>

      <method name="_selectTab">
        <parameter name="content"/>
        <body><![CDATA[
          if (this._inSelectTab)
            return;
          this._inSelectTab++;

          // XXXpfx Tabbox doesn't fixup styles after focusing tab, we need
          //   to do this ourself.

          for (var i = 0; i < this._tabs.childNodes.length; i++)
            if (this._tabs.childNodes[i] == content._tab) {
              this._tabs.selectedIndex = i;
              this._tabpanels.selectedIndex = i;
              break;
            }

          if (content._tab == this._selectedTab) {
            this._tabs.scrollToTab(null, 1);
            this._inSelectTab--;
            return;
          }

          if (this._selectedTab) {
            this._selectedTab.removeAttribute("selected");
            if (this._selectedTab.previousSibling)
              this._selectedTab.previousSibling.removeAttribute("beforeselected");
            if (this._selectedTab.nextSibling)
              this._selectedTab.nextSibling.removeAttribute("afterselected");
          }

          this._selectedTab = content._tab;

          content._tab.setAttribute("selected", "true");
          if (content._tab.previousSibling)
            content._tab.previousSibling.setAttribute("beforeselected", "true");
          if (content._tab.nextSibling)
            content._tab.nextSibling.setAttribute("afterselected", "true");

          this._inSelectTab--;
          this._tabs.scrollToTab(null, 1);
        ]]></body>
      </method>

      <method name="_onWindowFocus">
        <body><![CDATA[
        if (this._selectedTab)
          this._selectedTab.controller.focus();
        ]]></body>
      </method>

      <method name="_onWindowBlur">
        <body><![CDATA[
        ]]></body>
      </method>
    </implementation>
  </binding>

  <binding id="chattab-content" display="xul:vbox">
    <content flex="1">
      <xul:chatpane anonid="chatpane" flex="1"/>
    </content>

    <implementation>
      <property name="contact" onget="return this._contact">
        <setter><![CDATA[
          if (this._contact && this._token)
            this._contact.unregisterView(this._token)

          this._contact = val;
          this._chatpane.model = val;

          this._onNameChange();

          if (val)
            this._token = val.registerView(this._onNameChange, this, "visibleName");
        ]]></setter>
      </property>

      <property name="unseenCount" onget="return this._unseenCount">
        <setter><![CDATA[
          if (val == this._unseenCount)
            return val;

          if (val)
            this._tab.setAttribute("chatstate", "modified");
          else
            this._tab.removeAttribute("chatstate");

          this._tabbox.unseenCount += val - (this._unseenCount || 0);
          this._unseenCount = val;

          this._onNameChange();

          return val;
        ]]></setter>
      </property>

      <property name="chatState" onget="return this._chatState">
        <setter><![CDATA[
          if (!this._chatStateInitialSend)
            return;

          var oldState = this._chatState;
          this._chatState = val;

          if (this._chatStateTimeout) {
            clearTimeout(this._chatStateTimeout);
            this._chatStateTimeout = null;
          }
          if (val == "composing")
            this._chatStateTimeout = setTimeout(function(me){ me.chatState = "paused" }, 5000, this);
          if (val == "active" || val == "paused")
            this._chatStateTimeout = setTimeout(function(me){ me.chatState = "inactive" }, 30000, this);

          if (!this._chatStatePreventMessage && oldState != this._chatState)
            this.contact.sendMessage(null, this._chatpane.getThread().threadID, this._chatState);
        ]]></setter>
      </property>

      <constructor><![CDATA[
        this._chatpane = document.getAnonymousElementByAttribute(this, "anonid", "chatpane");
        this._chatpane.userTypingHandler = new Callback(function(val, me) {
            if (val < 0) {
              me._chatStatePreventMessage = 1;
              me._chatStateInitialSend = 1;
            }

            me.chatState = val > 0 ? "composing" : "active";

            if (val < 0 )
              me._chatStatePreventMessage = 0;
          }).addArgs(this);

        this._unseenCount = 0;
        this._chatStateInitialSend = false;
        this.closed = false;

        if (this.contact) {
          var contact = this.contact;
          delete this.contact;
          this.contact = contact;
        }
      ]]></constructor>

      <destructor><![CDATA[
        if (this._contact && this._token)
          this._contact.unregisterView(this._token);
      ]]></destructor>

      <method name="close">
        <body><![CDATA[
          this.closed = true;

          if (this.contact instanceof Conference)
            setTimeout(function(me){me.contact.exitRoom(); me._tabbox._removeTab(me)}, 0, this);
          else
            this._tabbox._removeTab(this);

          this.chatState = "gone";
          this.unseenCount = 0;
        ]]></body>
      </method>

      <method name="focus">
        <body><![CDATA[
          if (this.closed || this._inFocus)
            return;

          this._inFocus = true;
          this._tabbox._selectTab(this);
          delete this._inFocus;

          this.unseenCount = 0;
          if (this.chatState == "inactive")
            this.chatState = "active";

          this._chatpane.focus();
        ]]></body>
      </method>

      <method name="updateChatState">
        <parameter name="state"/>
        <body><![CDATA[
          if (this._chatState == state)
            return;

          this._chatState = state;

          this._chatpane._contactInfo.updateChatState(state)
        ]]></body>
      </method>

      <method name="addMessage">
        <parameter name="msg"/>
        <parameter name="threadID"/>
        <body><![CDATA[
          if ((this._tabbox._selectedTab != this._tab || !this._tabbox._windowHasFocus)
              && !msg.isSystemMessage)
            this.unseenCount++;

          this._chatpane.addMessage(msg, threadID);
        ]]></body>
      </method>

      <method name="_appendToInput">
        <parameter name="str"/>
        <body><![CDATA[
          this._chatpane._input.value += str;
        ]]></body>
      </method>

      <method name="_onNameChange">
        <body><![CDATA[
          var countStr = this._unseenCount == 0 ? "" : this._unseenCount == 1 ?
            "* " : "["+this._unseenCount+"] ";

          this._tab.setAttribute("label", countStr + (this._contact ? this._contact.visibleName : ""));
        ]]></body>
      </method>
    </implementation>
  </binding>

  <binding id="tabs-with-scroll"
           extends="chrome://global/content/bindings/tabbox.xml#tabs">
    <resources>
      <stylesheet src="chrome://oneteam/skin/chattabbox/chattabbox.css"/>
    </resources>

    <content>
      <xul:toolbarbutton id="scroll-left-button" collapsed="true"
                         onmousedown="this.parentNode._startScrolling(-1)"
                         onmouseup="this.parentNode._stopScrolling()"
                         onmouseout="this.parentNode._stopScrolling()"/>
      <xul:scrollbox anonid="scrollbox" orient="horizontal" flex="1" style="min-width: 1px;">
        <children includes="tab"/>
      </xul:scrollbox>
      <xul:toolbarbutton id="scroll-right-button" collapsed="true"
                         onmousedown="this.parentNode._startScrolling(1)"
                         onmouseup="this.parentNode._stopScrolling()"
                         onmouseout="this.parentNode._stopScrolling()"/>
    </content>

    <implementation>
      <property name="_scrollBoxObject" readonly="true"
        onget="return this._scrollBox.boxObject.QueryInterface(Components.interfaces.nsIScrollBoxObject)"/>

      <constructor><![CDATA[
        this._scrollLeft = document.getAnonymousElementByAttribute(this, "id", "scroll-left-button");
        this._scrollRight = document.getAnonymousElementByAttribute(this, "id", "scroll-right-button");
        this._scrollBox = document.getAnonymousElementByAttribute(this, "anonid", "scrollbox");

        var me = this;
        window.addEventListener("resize", function(){me.scrollToTab(null, 2)}, false);
      ]]></constructor>

      <destructor><![CDATA[
      ]]></destructor>

      <method name="scrollToTab">
        <parameter name="tab"/>
        <parameter name="scrollMode"/>
        <body><![CDATA[
          var pos = {}, size = {};
          this._scrollBoxObject.getPosition(pos, {});
          this._scrollBoxObject.getScrolledSize(size, {});
          pos = pos.value;
          size = size.value;

          var posw = pos + this._scrollBox.boxObject.width;

          if (!tab && this.selectedIndex >= 0)
            tab = this.childNodes[this.selectedIndex];

          if (!tab) {
            this._fixupScrollPosition();
            return;
          }

          var x = tab.boxObject.x - this.childNodes[0].boxObject.x;
          var xw = x + tab.boxObject.width;
          var endPos;

          if (xw > posw)
            endPos = xw + pos - posw;
          else if (x < pos)
            endPos = x - 3;

          if (endPos == null) {
            this._fixupScrollPosition();
            return;
          }

          if (scrollMode == 2 || scrollMode == 1 && Math.abs(pos-endPos) > 150)
            this._scrollTo(endPos);
          else {
            this._startScrollPos = pos;
            this._endScrollPos = endPos;
            if (!this._scrolling) {
              this._scrollSpeed = pos < endPos ? 1 : -1;
              this._scrollFun(this);
            }
          }
        ]]></body>
      </method>

      <method name="_startScrolling">
        <parameter name="direction"/>
        <body><![CDATA[
          var pos = {}, size = {};

          this._scrollBoxObject.getPosition(pos, {});
          this._scrollBoxObject.getScrolledSize(size, {});

          if (direction > 0) {
            if (size.value == pos.value)
              return;
          } else if (pos.value == 0)
            return;

          this._startScrollPos = pos.value;
          this._endScrollPos = direction > 0 ?
            size.value - this._scrollBox.boxObject.width : 0;
          this._userScrolling = true;

          if (!this._scrolling) {
            this._scrollSpeed = direction > 0 ? 1 : -1;
            this._scrollFun(this);
          }
        ]]></body>
      </method>

      <method name="_stopScrolling">
        <body><![CDATA[
          if (!this._userScrolling)
            return;

          var pos = {}, newPos, size = {};
          this._scrollBoxObject.getPosition(pos, {});
          pos = pos.value;

          this._userScrolling = false;
          var tabs = this.childNodes;
          var leftMargin = tabs[0].boxObject.x + 3;

          for (var i = 0; i < tabs.length; i++)
            if (tabs[i].boxObject.x-leftMargin > pos) {
              this._endScrollPos = this._scrollSpeed > 0 ?
                tabs[i].boxObject.x-leftMargin : i > 0 ?
                  tabs[i-1].boxObject.x-leftMargin : 0;
              break;
            }
        ]]></body>
      </method>

      <method name="_scrollFun">
        <parameter name="me"/>
        <body><![CDATA[
          var pos = {}, newPos, size = {};

          me._scrollBoxObject.getPosition(pos, {});
          pos = pos.value;

          newPos = pos + Math.ceil(me._scrollSpeed);

          if ((me._scrollSpeed > 0 && newPos >= me._endScrollPos) ||
              (me._scrollSpeed < 0 && newPos <= me._endScrollPos))
          {
            me._scrolling = false;
            me._scrollTo(me._endScrollPos);
            return;
          }

          if (me._scrollTo(newPos, 0)) {
            me._scrolling = false;
            return;
          }


          var ds = newPos - me._startScrollPos, de = me._endScrollPos - newPos;
          var accel = (ds*de/(ds+de)/(ds+de)*4*5)*(ds > 0 ? 1 : -1);
          var newSpeed = me._scrollSpeed + accel;

          if (newSpeed < 12 && newSpeed > -12 && newSpeed != 0)
            me._scrollSpeed = newSpeed;

          me._scrolling = true;

          setTimeout(me._scrollFun, 10, me);
        ]]></body>
      </method>

      <method name="_scrollTo">
        <parameter name="position"/>
        <body><![CDATA[
          var pos = {}, size = {};
          this._scrollBoxObject.scrollTo(position, 0);

          this._scrollBoxObject.getPosition(pos, {});
          this._scrollBoxObject.getScrolledSize(size, {});

          this._scrollLeft.disabled = pos.value == 0;
          this._scrollRight.disabled = pos.value + this._scrollBox.boxObject.width == size.value;

          var onEdge = this._scrollLeft.disabled || this._scrollRight.disabled;

          if (onEdge)
            this._userScrolling = false;

          return onEdge;
        ]]></body>
      </method>

      <method name="_fixupScrollPosition">
        <body><![CDATA[
          try {
            var pos = {}, size = {}, posw;

            this._scrollBoxObject.getPosition(pos, {});
            this._scrollBoxObject.getScrolledSize(size, {});

            pos = pos.value;
            posw = pos + this._scrollBox.boxObject.width;
            size = size.value;

            if (posw > size)
              this._scrollTo(size);
            else if (size < posw - pos)
              this._scrollTo(0, 0);
          } catch (ex) {}
        ]]></body>
      </method>

      <method name="handleEvent">
        <parameter name="event"/>
        <body><![CDATA[
          this.fixupScrollPosition();
        ]]></body>
      </method>

    </implementation>

    <handlers>
      <handler event="overflow"><![CDATA[
        if (event.originalTarget != this._scrollBox || event.detail == 0)
          return;
        try {
          this._scrollLeft.collapsed = false;
          this._scrollRight.collapsed = false;
          this.scrollToTab(null, 2);
        } catch (ex) {}
      ]]></handler>
      <handler event="underflow"><![CDATA[
        if (event.originalTarget != this._scrollBox || event.detail == 0)
          return;
        try {
          this._scrollLeft.collapsed = true;
          this._scrollRight.collapsed = true;
        } catch(ex) {}
      ]]></handler>
    </handlers>
  </binding>

  <binding id="tab-with-close-button" extends="chrome://global/content/bindings/tabbox.xml#tab"
           display="xul:box">
    <resources>
      <stylesheet src="chrome://oneteam/skin/chattabbox/chattabbox.css"/>
    </resources>
<!-- #ifdef XULAPP -->
    <content chromedir="&locale.dir;" class="tab-content" flex="100">
<!-- #else
    <content class="tab-content" flex="100">
//#endif -->
      <xul:hbox class="tab-middle box-inherit" xbl:inherits="align,dir,pack,orient,selected"
          flex="1">
        <xul:image class="tab-icon" xbl:inherits="validate,src=image"/>
        <xul:label class="tab-text" crop="end" xbl:inherits="value=label,accesskey,crop,disabled"
          flex="100"/>
      </xul:hbox>
      <xul:toolbarbutton tabindex="-1" class="closebutton"/>
    </content>

    <implementation>
      <constructor><![CDATA[
        this._closebutton = document.getAnonymousElementByAttribute(this, "class", "closebutton");
      ]]></constructor>
    </implementation>

    <handlers>
      <handler event="mousedown" button="0" phase="capturing"><![CDATA[
        if (event.originalTarget == this._closebutton) {
          event.stopPropagation();
        }
      ]]></handler>
      <handler event="mouseup"><![CDATA[
        if (event.button == 1 || event.button == 0 && event.ctrlKey)
            this._closebutton.doCommand();
      ]]></handler>
    </handlers>
  </binding>
</bindings>
