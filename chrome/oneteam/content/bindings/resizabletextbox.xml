<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="resizable-textbox">
    <resources>
      <stylesheet src="chrome://global/skin"/>
      <stylesheet src="chrome://oneteam/skin/chatpane/textbox.css"/>
    </resources>

    <content>
      <xul:deck flex="1">
        <xul:textbox id="_input" style="height: 1.2em;" class="inputBox" flex="1" multiline="true"
          oninput="this.parentNode.parentNode._onUserTyping()"/>
        <xul:vbox flex="1">
          <xul:textbox id="_inputClone" style="height: 1.2em;" class="inputBox" multiline="true"/>
        </xul:vbox>
      </xul:deck>
    </content>

    <implementation>
      <property name="value" onget="return this._input.value"
                onset="return this._input.value = val"/>

      <property name="isEmpty" onget="return this._input.value == ''" readonly="true"/>

      <constructor><![CDATA[
        this._input = document.getAnonymousElementByAttribute(this, "id", "_input");
        this._inputClone = document.getAnonymousElementByAttribute(this, "id", "_inputClone");

        this._history = [];
        this._historyPosition = 0;

        var me = this;
        this._input.addEventListener("keypress",
          function (event) {
            if (event.keyCode == KeyEvent.DOM_VK_TAB) {
              event.preventDefault();
              me._tryCompletion(event.shiftKey)
              return;
            }

            var upKey = event.keyCode == KeyEvent.DOM_VK_UP;
            if ((upKey || event.keyCode == KeyEvent.DOM_VK_DOWN) &&
                !event.shiftKey && !event.altKey && !event.ctrlKey &&
                !event.metaKey && me._input.selectionStart == me._input.selectionEnd)
              if (me._handleHistoryKey(upKey))
                return false;

            var inputValue;
            if (event.keyCode == KeyEvent.DOM_VK_RETURN)
              if ((inputValue = me._send(!event.shiftKey)) != null) {
                if (inputValue) {
                  if (!me._history.length || me._history[me._history.length-1][0] != inputValue)
                    me._history.push([inputValue, me._input.selectionEnd]);
                  me._historyPosition = me._history.length;
                }

                event.stopPropagation();
                event.preventDefault();

                me.clear();
              } else
                return false;
            return true;
          }, true);

          for each (var event in "keypress keyup keydown click mousedown mouseup dragdrop".split(" ")) {
            this._input.addEventListener(event, function(event){
              me._maybeResize()
            }, false);
          }
      ]]></constructor>

      <method name="focus">
        <body><![CDATA[
          setTimeout(function(el){el.focus()}, 100, this._input);
        ]]></body>
      </method>

      <method name="clear">
        <body><![CDATA[
          this._input.value = "";
          this._maybeResize();
        ]]></body>
      </method>

      <method name="_tryCompletion">
        <body><![CDATA[
        ]]></body>
      </method>

      <method name="_send">
        <parameter name="withEnter"/>
        <body><![CDATA[
          return withEnter ? null : this._input.value.replace(/\n$/, '');
        ]]></body>
      </method>

      <method name="_onUserTyping">
        <body><![CDATA[
          var event = document.createEvent("Events");
          event.initEvent("userTyping", false, true);
          this.dispatchEvent(event);
        ]]></body>
      </method>

      <method name="_blink">
        <body><![CDATA[
          if (this._blinkToken)
            Animator.stopAnimation(this._blinkToken);

          this.style.outline = "3px solid transparent";
          this._blinkToken = Animator.animateStyle(this, "outlineColor", 20, 20, function(el){
            el.style.outline = "";
          }, "transparent", "borderTopColor", "transparent");
        ]]></body>
      </method>

      <method name="_maybeResize">
        <body><![CDATA[
          this._preMaybeResize();

          this._inputClone.value = this._input.value;

          if (this._sizeOffset == null)
            this._sizeOffset = this._input.boxObject.height -
                this._input.inputField.offsetHeight;

          var h = this._sizeOffset + this._inputClone.inputField.scrollHeight;


          if (h > 0.3*window.innerHeight)
            h = 0.3*window.innerHeight;

          this._input.style.height = h + "px";

          this._postMaybeResize();
        ]]></body>
      </method>

      <method name="_preMaybeResize">
        <body> </body>
      </method>

      <method name="_postMaybeResize">
        <body> </body>
      </method>

      <method name="_handleHistoryKey">
        <parameter name="up"/>
        <body><![CDATA[
          var histPos = this._historyPosition + (up ? -1 : 1);

          if (histPos < 0 || histPos > this._history.length)
            return false;

          var height = this._inputClone.inputField.scrollHeight;
          var cursPos = this._input.selectionStart;

          if (up)
            this._inputClone.value = this._inputClone.value.substr(cursPos);
          else
            this._inputClone.value = this._inputClone.value.substr(0, cursPos);

          var newHeight = this._inputClone.inputField.scrollHeight;
          if (newHeight < height-4 || newHeight > height+4) {
            this._inputClone.value = this._input.value;
            return false;
          }

          if (this._historyPosition < this._history.length &&
              this._history[this._historyPosition][0] != this._input.value)
            this._history[this._historyPosition] =
              [this._input.value, this._input.selectionStart];

          if (histPos >= this._history.length) {
            this._input.value = "";
          } else {
            this._input.value = this._history[histPos][0];
            window.setTimeout(function(i, p){i.selectionStart = i.selectionEnd = p},
                              0, this._input, this._history[histPos][1]);
          }

          this._historyPosition = histPos;
          this._maybeResize();

          return true;
        ]]></body>
      </method>
    </implementation>
  </binding>
</bindings>
