<?xml version="1.0"?>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="avatar">

    <resources>
      <stylesheet src="chrome://global/skin"/>
      <stylesheet src="chrome://oneteam/skin/avatar/avatar.css"/>
    </resources>

    <content class="container">
    </content>

    <implementation>

      <property name="model" onget="return this._model">
        <setter><![CDATA[
          if (this._model == val)
            return val;

          if (this._token) {
            this._model.unregisterView(this._token);
            this._token = null;
          }

          if (val) {
            this._model = val;
            this._token = this._model.registerView(this.onAvatarChange, this, "avatar");
          }
          this.onAvatarChange();

          return val;
        ]]></setter>
      </property>

      <property name="src" onget="return this._imageObj.src">
        <setter><![CDATA[
          if (val) {
            this._imageObj.src = val;
            this.setAttribute("filled", "true")
          } else if (this.getAttribute("showBlankAvatar") == "true") {
            this._imageObj.src = "chrome://oneteam/skin/avatar/imgs/default-avatar.png";
            this.setAttribute("filled", "true")
          } else {
            delete this.style.backgroundImage;
            this._imageObj.src = null;
            this.removeAttribute("filled")
          }
        ]]></setter>
      </property>

      <constructor><![CDATA[
        this._side = parseInt(this.getAttribute("side")) || this.boxObject.width;
        this._squareBordered = this.getAttribute("squareBordered") == "true";
        if (this._side && this._squareBordered)
          this.width = this.height = this._side;

        this._imageObj = new Image();
        var _this = this;
        this._imageObj.onload = function() {try{_this.onImageLoad()}catch(ex){}};

        recoverSetters(this);
      ]]></constructor>

      <destructor><![CDATA[
        this.model = null;
      ]]></destructor>

      <method name="onAvatarChange">
        <body><![CDATA[
          this.src = this._model ? this._model.avatar : null;
        ]]></body>
      </method>

      <method name="onImageLoad">
        <body><![CDATA[
          if (this._side && (
                this._imageObj.height > this._side
             || this._imageObj.width  > this._side
          )) {
            this.style.backgroundSize = this.style.MozBackgroundSize = "cover";
            this.style.backgroundPosition = "top center";
            if (!this._squareBordered) {
              if (this._imageObj.height > this._imageObj.width) {
                this.height = this._side;
                this.width  = this._side * this._imageObj.width / this._imageObj.height;
              } else {
                this.width  = this._side;
                this.height = this._side * this._imageObj.height / this._imageObj.width;
              }
            }
          } else {
            this.style.backgroundSize = this.style.MozBackgroundSize
              = this.style.backgroundPosition = null;
            if (!this._squareBordered) {
              this.height = this._imageObj.height;
              this.width  = this._imageObj.width;
            }
          }

          this.style.backgroundImage = "url("+this._imageObj.src+")";
        ]]></body>
      </method>
    </implementation>

  </binding>

  <binding id="avatarList">

    <resources>
      <stylesheet src="chrome://global/skin"/>
      <stylesheet src="chrome://oneteam/skin/avatar/avatar.css"/>
    </resources>

    <content>
      <xul:vbox width="150" align="center">
        <xul:avatar id="selectedAvatar" showBlankAvatar="true"
                    side="128" squareBordered="true"/>
        <xul:button label="_('No avatar')" 
                    oncommand="this.parentNode.parentNode.selectedAvatar = null"/>
        <xul:vbox flex="1" style="overflow-y: auto">
          <vbox id="container" style="overflow: auto"/>
        </xul:vbox>
        <xul:button label="_('Add image...')"
                    oncommand="this.parentNode.parentNode.addImage()"/>
      </xul:vbox>
    </content>

    <implementation>

      <property name="selectedAvatar" onget="return this._selectedAvatar">
        <setter><![CDATA[
          if (this._selectedAvatar)
            this._selectedAvatar.removeAttribute("selected");

          if (val) {
            this._selectedAvatar = val;
            this._selectedAvatar.setAttribute("selected", "true");
            this._avatar.src = this.selectedAvatar.getElementsByTagName("avatar")[0].src;
            this._avatar.setAttribute("context", "image-contextmenu");
            this._avatar.menuModel = val.menuModel;
          } else {
            delete this._selectedAvatar;
            delete this._avatar.menuModel;
            this._avatar.src = null;
            this._avatar.removeAttribute("context");
          }
        ]]></setter>
      </property>

      <constructor>
        <![CDATA[
          this._container = document.getAnonymousElementByAttribute(this, "id", "container");
          this._avatar    = document.getAnonymousElementByAttribute(this, "id", "selectedAvatar");

          this.myAvatars = account.cache.getValue("myAvatars") || {};
          for (var key in this.myAvatars)
            this._addAvatar(key);
        ]]>
      </constructor>

      <destructor>
        <![CDATA[
          account.cache.setValue("myAvatars", this.myAvatars)
        ]]>
      </destructor>

      <method name="selectAvatar">
        <parameter name="hash"/>
        <body><![CDATA[
          if (this.myAvatars[hash]) {
            for (var i = 0; i < this._container.childNodes.length; i++)
              if (this._container.childNodes[i].hash == hash) {
                this.selectedAvatar = this._container.childNodes[i];
              return;
              }
          } else {
            var avatarData = account.cache.getValue("avatar-"+hash);
            this.myAvatars[hash] = avatarData.length;
            this._addAvatar(hash, true);
          }
        ]]></body>
      </method>

      <method name="addImage">
        <body><![CDATA[
          var path = pickFile(_("Select avatar image"), false, "images", false, window);
          if (path) {
            var data = slurpFile(path);
            var hash = hex_sha1(data);
            if (!this.myAvatars[hash]) {
              this.myAvatars[hash] = data.length;
              account.cache.setValue("avatar-"+hash, data,
                                     new Date(Date.now()+30*24*60*60*1000),
                                     true);
              this._addAvatar(hash, true);
            } else {
              this.selectAvatar(hash);
            }
          }
        ]]></body>
      </method>

      <method name="_addAvatar">
        <parameter name="hash"/>
        <parameter name="select"/>
        <body><![CDATA[
          var fileSize = this.myAvatars[hash];
          var src = account.cache.getValue("avatar-"+hash, true);

          var el = E4XtoDOM(
            <vbox class="avatarIcon" xmlns={XULNS} align="center" style="1px solid blue">
              <avatar side="48" squareBordered="true" context="image-contextmenu"/>
              <label value={ppFileSize(this.myAvatars[hash])}/>
            </vbox>
          , document);
          el.hash = hash;
          el.getElementsByTagName("avatar")[0].src = src;
          el.menuModel = el;
          el.removeImage = (function(avatarList) {
            return function() {
              avatarList._container.removeChild(this);
              delete avatarList.myAvatars[hash];
              if (this == avatarList.selectedAvatar)
                avatarList.selectedAvatar = null;
            }
          })(this);
          this._container.appendChild(el);

          if (select)
            this.selectedAvatar = el;
        ]]></body>
      </method>
    </implementation>

    <handlers>
      <handler event="click" button="0"><![CDATA[
        var target = event.originalTarget;

        while (target && target.className != "avatarIcon")
          target = target.parentNode;

        if (target) {
          this.selectedAvatar = target;
        }
      ]]></handler>
    </handlers>

  </binding>
</bindings>
