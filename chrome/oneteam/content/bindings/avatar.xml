<?xml version="1.0"?>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="avatar">

    <resources>
      <stylesheet src="chrome://global/skin"/>
      <stylesheet src="chrome://oneteam/skin/avatar/avatar.css"/>
    </resources>

    <content class="container">
    </content>

    <implementation>

      <property name="model">
        <getter><![CDATA[
          return this._model;
        ]]></getter>

        <setter><![CDATA[
          if (this._model == val)
            return val;

          if (this._token) {
            this._model.unregisterView(this._token);
            this._token = null;
          }

          if (val) {
            this._model = val;
            this._token = this._model.registerView(this.onAvatarChange, this, "avatar");
          }
          this.onAvatarChange();

          return val;
        ]]></setter>
      </property>

      <constructor><![CDATA[
        if (!this._imageObj) {
          this._imageObj = new Image();
          var _this = this;
          this._imageObj.onload = function() {try{_this.onImageLoad()}catch(ex){}};
        }
        recoverSetters(this);
      ]]></constructor>

      <destructor><![CDATA[
        this.model = null;
      ]]></destructor>

      <method name="onAvatarChange">
        <body><![CDATA[
        if (this._model && this._model.avatar) {
          this._imageObj.src = this._model.avatar;
        } else if (this.getAttribute("showBlankAvatar") == "true") {
          this._imageObj.src = "chrome://oneteam/skin/avatar/imgs/default-avatar.png";
        } else {
          this.style.backgroundImage = "";
          this._imageObj.src = null;
        }
        ]]></body>
      </method>

      <method name="_normalize_url">
        <parameter name="url"/>
        <body><![CDATA[
          var tmp;

          if (/^file:/.test(url))
            return url.replace(/.*[\\\/]/, "");

          if (!/^\w+:/.test(url))
            url = document.location.href.replace(/[^\/]+$/, "/")+url;

          while ((tmp = url.replace(/\/[^\/]\/\.\.\//g, "/")) != url)
            url = tmp;
          return tmp.replace(/\\/g, "/");
        ]]></body>
      </method>

      <method name="onImageLoad">
        <body><![CDATA[
          this.style.backgroundImage = "url("+this._imageObj.src+")";
        ]]></body>
      </method>
    </implementation>

  </binding>

  <binding id="avatarList">

    <resources>
      <stylesheet src="chrome://global/skin"/>
      <stylesheet src="chrome://oneteam/skin/avatar/avatar.css"/>
    </resources>

    <content>
      <xul:vbox flex="1">
        <div flex="1" id="container" xmlns="http://www.w3.org/1999/xhtml" style="overflow: auto"/>
      </xul:vbox>
    </content>

    <implementation>

      <property name="selectedAvatarHash">
        <getter><![CDATA[
          if (!this._selectedItem)
            return null;
          if (!this._selectedItem.firstChild.avatarHash) {
            var data = atob(this._selectedItem.firstChild.src.
                            slice("data:image/png;base64,".length));
            var hash = hex_sha1(data);
            account.cache.setValue("avatar-"+hash, data,
                                   new Date(Date.now()+30*24*60*60*1000), true);

            this._selectedItem.firstChild.avatarHash = hash;
          }
          return this._selectedItem.firstChild.avatarHash;
        ]]></getter>
      </property>

      <constructor>
        <![CDATA[
          this._container = document.getAnonymousElementByAttribute(this, "id", "container")

          for (var key in account.cache.iterator("avatar-", true))
            if (!/-.*-/.exec(key))
              this.addAvatar(account.cache.getValue(key, true), key.slice(7));
         ]]>
      </constructor>

      <method name="selectAvatar">
        <parameter name="hash"/>
        <parameter name="data"/>
        <body><![CDATA[
          if (this._selectedItem) {
            if (this._selectedItem.firstChild.avatarHash == hash)
              return;
            this._selectedItem.removeAttribute("selected");
          }

          for (var i = 0; i < this._container.childNodes.length; i++)
            if (this._container.childNodes[i].firstChild.avatarHash == hash) {
              this._selectedItem = this._container.childNodes[i];
              this._selectedItem.setAttribute("selected", "true");
              return;
            }
          if (data)
            this.addAvatar(data, hash);
        ]]></body>
      </method>

      <method name="addAvatar">
        <parameter name="data"/>
        <parameter name="hash"/>
        <body><![CDATA[
          const xulNS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
          const htmlNS = "http://www.w3.org/1999/xhtml"

          var el = document.createElementNS(htmlNS, "div");
          var img = document.createElementNS(htmlNS, "img");
          var size = document.createElementNS(htmlNS, "div");

          el.setAttribute("class", "avatarIcon");
          el.setAttribute("selected", "true");
          el.appendChild(img);
          el.appendChild(size);

          var fileSize;
          if (/^(\w+):/.test(data) && !/^data:/.test(data)) {
            var file = new File(data);
            fileSize = file.size;

            img.setAttribute("src", data);
            img.avatarHash = hash;
          } else {
            if (hash) {
              img.setAttribute("src", data);
              img.avatarHash = hash;

              fileSize = data.length;
              var pad = 0;
              while (data[fileSize-pad-1] == "=")
                pad++;
              fileSize = (fileSize-22)/4*3-pad;
            } else {
              img.setAttribute("src", "data:image/png;base64,"+btoa(data));
              fileSize = data.length;
            }
          }

          size.setAttribute("class", "size");
          size.appendChild(document.createTextNode(ppFileSize(fileSize)));

          if (this._selectedItem)
            this._selectedItem.removeAttribute("selected", "true");
          this._selectedItem = el;
          this._container.appendChild(el);
        ]]></body>
      </method>
    </implementation>

    <handlers>
      <handler event="click" button="0"><![CDATA[
        var target = event.originalTarget;

        while (target && target.className != "avatarIcon")
          target = target.parentNode;

        if (target && target != this._selectedItem) {
          this._selectedItem.removeAttribute("selected");
          target.setAttribute("selected", "true");
          this._selectedItem = target;
        }
      ]]></handler>
    </handlers>

  </binding>
</bindings>
