<overlay id="roster-context-menus" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <script type="text/javascript;version=1.7"><![CDATA[
    var menuModel;
    var menuModelEl;

    var contextMenuUpdaters = {};
    function updateContextMenu(menu, event) {
      if (!findMenuModel(menu, event))
        return;

      var updaters = menu.id in contextMenuUpdaters ?
        contextMenuUpdaters[menu.id] : [];

      for (var i = 0; i < updaters.length; i++)
        updaters[i].call(null, menu, event);
    }

    function addContextMenuUpdater(id, fun) {
      if (!(id in contextMenuUpdaters))
        contextMenuUpdaters[id] = [];

      contextMenuUpdaters[id].push(fun);
    }

    function findMenuModel(menu, event) {
      if (event.target != menu)
        return false;

      var el = document.popupNode;

      if (el.ownerDocument.defaultView != window &&
          !el.ownerDocument.defaultView.frameElement)
        for (var i = 0; window._frames &&i < window._frames.length; i++)
          if (window._frames[i] == el.ownerDocument.defaultView) {
            el = window._frames[i]._frameElement;
            break;
          }

      var p;
      while (el && !el.menuModel)
        if (el.parentNode)
          el = el.parentNode;
        else
          el = el.defaultView && el.defaultView.frameElement;

      if (!el)
        return false;

      menuModel = el.menuModel;
      menuModelEl = el;

      return true;
    }

    function updateMenuList(multipleItemsMenuList, singleItemMenuItem, items,
                            action, labelFun, hideWhenNoItems)
    {
      if (singleItemMenuItem)
        singleItemMenuItem.hidden = hideWhenNoItems ?
          items.length != 1 : items.length > 1;

      multipleItemsMenuList.hidden = items.length <= 1;

      if (items.length <= 1)
        return;

      var list = multipleItemsMenuList.firstChild;
      while (list && list.firstChild)
        list.removeChild(list.firstChild);

      for (var i = 0; i < items.length; i++) {
        var item = document.createElementNS(XULNS, "menuitem");
        item.model = items[i];

        item.setAttribute("label", labelFun(item.model));
        item.setAttribute("oncommand", action);

        list.appendChild(item);
      }
    }

    function updateContactContextMenu(menu, event) {
      var cs = document.getElementById("contact-chat-single");
      var cm = document.getElementById("contact-chat-multi");
      var im = document.getElementById("contact-invite");
      var sf = document.getElementById("contact-send-file");
      var ah = document.getElementById("contact-adhoc");
      var ahm = document.getElementById("contact-adhoc-multi");
      var vc = document.getElementById("contact-call");
      var vcm = document.getElementById("contact-call-multi");

      sf.hidden = !menuModel.activeResource || !socks5Service.canSendTo(menuModel.activeResource);

      updateMenuList(cm, cs, menuModel.resources, "this.model.onOpenChat()",
                     function(i) {
                        return _("{0} ({1})", i.jid.resource,
                                 i.presence.priority || 0);
                     });

      var items = [];
      if (menuModel.jingleResource) {
        items = [r for (r in menuModel.resourcesIterator(function(e) {
            return e.jingleResource
          }))];

        if (items.length == 0)
          items = [menuModel.jingleResource];
      }

      updateMenuList(vcm, vc, items, "this.model.onJingleCall()", function(i) {
                        return _("{0} ({1})", i.jid.resource,
                                 i.presence.priority || 0);
                     }, true);

      updateMenuList(im, null, account.conferences, "this.model.invite(menuModel.jid)",
                     function(i) {
                        return i.jid.toUserString();
                     });

      items = [r for (r in menuModel.resourcesIterator(function(e) {
            return e.hasDiscoFeature("http://jabber.org/protocol/commands")
          }))];

      updateMenuList(ahm, ah, items, "this.model.onAdHocCommand()",
                     function(i) {
                        return _("{0} ({1})", i.jid.resource,
                                 i.presence.priority || 0);
                     }, true);

      document.getElementById("contact-authorization-ask").
        setAttribute("disabled", menuModel.canSeeHim);
      document.getElementById("contact-authorization-allow").
        setAttribute("disabled", menuModel.canSeeMe);
      document.getElementById("contact-authorization-disallow").
        setAttribute("disabled", !menuModel.canSeeMe);
    }
    addContextMenuUpdater("contact-contextmenu", updateContactContextMenu)

    function updateGroupContextMenu(menu, event) {
      if (!findMenuModel(menu, event))
        return;
      var rename = document.getElementById("group-rename");
      var remove = document.getElementById("group-remove");
      if (menuModel.builtinGroup) {
        rename.hidden = "true";
        remove.hidden = "true";
      } else {
        rename.removeAttribute("hidden");
        remove.removeAttribute("hidden");
      }
    }
    addContextMenuUpdater("groups-contextmenu", updateGroupContextMenu)

    function updateResourceContextMenu(menu, event) {
      if (!findMenuModel(menu, event))
        return;

      var im = document.getElementById("resource-invite");
      var sf = document.getElementById("resource-send-file");
      var ah = document.getElementById("resource-adhoc");
      var vc = document.getElementById("resource-call");

      sf.hidden = !socks5Service.canSendTo(menuModel);

      updateMenuList(im, null, account.conferences, "this.model.invite(menuModel.jid)",
                     function(i) {
                        return i.jid.toUserString();
                     });

      vc.hidden = !menuModel.jingleResource;

      ah.hidden = !menuModel.hasDiscoFeature("http://jabber.org/protocol/commands");
    }
    addContextMenuUpdater("resource-contextmenu", updateResourceContextMenu)

    function updateConferenceMemberContextMenu(menu, event) {
      if (!findMenuModel(menu, event))
        return;

      var confMemb = menuModel;
      var conf = confMemb.contact;

      var kick = document.getElementById("conferencemember-kick");
      var ban = document.getElementById("conferencemember-ban");
      var affiliations = document.getElementById("conferencemember-affiliations");
      var roles = document.getElementById("conferencemember-roles");

      kick.previousSibling.hidden = kick.hidden = ban.hidden = !confMemb.canBeKicked;

      affiliations.hidden = !(conf.iAmAdmin && conf.myResource.isGt(confMemb) || conf.iAmOwner);
      roles.hidden = confMemb.isAdmin || !conf.iAmModerator;

      for each (var affiliation in "owner admin member none".split(" ")) {
        var el = document.getElementById("conferencemember-affiliation-"+affiliation);
        el.hidden = !conf.iAmOwner && conf.myResource.cmp(affiliation, true) >= 0;
        el.setAttribute("checked", confMemb.affiliation == affiliation);
      }

      for each (var role in "moderator participant visitor none".split(" ")) {
        var el = document.getElementById("conferencemember-role-"+role);
        el.hidden = confMemb.isAdmin || (role == "moderator" && conf.iAmModerator && !conf.iAmAdmin);
        el.setAttribute("checked", confMemb.role == role);
      }
    }
    addContextMenuUpdater("conferencemember-contextmenu", updateConferenceMemberContextMenu)

    function updateConferenceContextMenu(menu, event) {
      if (!findMenuModel(menu, event))
        return;

      var configuration = document.getElementById("conference-configuration");
      var permissions = document.getElementById("conference-edit-permissions");

      configuration.hidden = !menuModel.iAmOwner;
      configuration.previousSibling.hidden = permissions.hidden =
        !menuModel.iAmAdmin;
    }
    addContextMenuUpdater("conference-contextmenu", updateConferenceContextMenu)

    function updateGatewayContextMenu(menu, event) {
      if (!findMenuModel(menu, event))
        return;

      document.getElementById("gateway-login").disabled = !!menuModel.activeResource;
      document.getElementById("gateway-logout").disabled = !menuModel.activeResource;
    }
    addContextMenuUpdater("gateway-contextmenu", updateGatewayContextMenu)
  ]]></script>

  <popupset>
    <popup id="contact-contextmenu" onpopupshowing="updateContextMenu(this, event)">
      <menuitem id="contact-chat-single" label="_('Open Chat...')"
          oncommand="menuModel.onOpenChat()"/>
      <menu id="contact-chat-multi" label="_('Open Chat...')" hidden="true">
        <menupopup/>
      </menu>
      <menuitem id="contact-call" label="_('Voice Call...')" oncommand="menuModel.onJingleCall()"/>
      <menu id="contact-call-multi" label="_('Voice Call...')" hidden="true">
        <menupopup/>
      </menu>
      <menu id="contact-invite" label="_('Invite To')" hidden="true">
        <menupopup/>
      </menu>

      <menuseparator/>

      <menuitem label="_('Remove Contact...')" oncommand="menuModel.onRemove()"/>
      <menuitem label="_('Change Nick...')" oncommand="menuModel.onRename()"/>

      <menuseparator/>

      <menu label="_('Authorization')">
        <menupopup>
          <menuitem id="contact-authorization-ask" label="_('Ask To See Him/Her')"
              oncommand="menuModel.askForSubscription()"/>
          <menuitem id="contact-authorization-allow" label="_('Authorize To See Me')"
              oncommand="menuModel.allowToSeeMe()"/>
          <menuitem id="contact-authorization-disallow" label="_('Cancel Authorization')"
              oncommand="menuModel.disallowToSeeMe()"/>
        </menupopup>
      </menu>

      <menuseparator/>

      <menuitem label="_('Show Details...')" oncommand="menuModel.showVCard()"/>
      <menuitem label="_('Show History...')"
        oncommand="menuModel.onShowHistory()"/>
      <menuitem id="contact-adhoc" label="_('Execute Command...')"
                oncommand="menuModel.onAdHocCommand()"/>
      <menu id="contact-adhoc-multi" label="_('Execute Command...')" hidden="true">
        <menupopup/>
      </menu>
      <menuitem id="contact-send-file" label="_('Send File...')"
        oncommand="menuModel.onSendFile()"/>
    </popup>

    <popup id="group-contextmenu" onpopupshowing="updateContextMenu(this, event)">
      <menuitem label="_('Rename...')" id="group-rename" oncommand="menuModel.onRename()"/>
      <menuitem label="_('Remove...')" id="group-remove" oncommand="menuModel.onRemove()"/>
    </popup>

    <popup id="resource-contextmenu" onpopupshowing="updateContextMenu(this, event)">
      <menuitem label="_('Open Chat...')" oncommand="menuModel.onOpenChat()"/>
      <menuitem id="resource-call" label="_('Voice Call...')" oncommand="menuModel.onJingleCall()"/>
      <menu id="resource-invite" label="_('Invite To')" hidden="true">
        <menupopup/>
      </menu>

      <menuseparator/>

      <menuitem label="_('Show Details...')" oncommand="menuModel.showVCard()"/>
      <menuitem id="resource-adhoc" label="_('Execute Command...')" oncommand="menuModel.onAdHocCommand()"/>
      <menuitem label="_('Show History...')"
        oncommand="menuModel.onShowHistory()"/>
      <menuitem id="resource-send-file" label="_('Send File...')"
        oncommand="menuModel.onSendFile()"/>
    </popup>

    <popup id="conference-contextmenu" onpopupshowing="updateContextMenu(this, event)">
      <menuitem id="conference-invite" label="_('Invite Users To This Room...')"
          oncommand="menuModel.onInvite()"/>
      <menuitem id="conference-changeNick" label="_('Change Nick...')"
          oncommand="menuModel.onChangeNick()"/>
      <menuitem id="conference-changeSubject" label="_('Change Subject...')"
          oncommand="menuModel.onChangeSubject()"/>
      <menuitem id="conference-bookmark" label="_('Bookmark...')"
          oncommand="menuModel.onBookmark()"/>

      <menuseparator/>

      <menuitem id="conference-configuration" label="_('Configure...')"
          oncommand="menuModel.onRoomConfiguration()"/>
      <menuitem id="conference-edit-permissions" label="_('Edit Permissions...')"
          oncommand="menuModel.onEditPermissions()"/>

      <menuseparator/>

      <menuitem label="_('Show Details...')"
        oncommand="menuModel.showVCard()"/>
      <menuitem label="_('Show History...')"
        oncommand="menuModel.onShowHistory()"/>

      <menuseparator/>

      <menuitem id="conference-leave" label="_('Leave Chat Room')"
          oncommand="menuModel.exitRoom()"/>
    </popup>

    <popup id="conferencemember-contextmenu" onpopupshowing="updateContextMenu(this, event)">
      <menuitem id="conferencemember-chat-single" label="_('Open Chat...')"
          oncommand="menuModel.onOpenChat()"/>

      <menuseparator/>

      <menuitem id="conferencemember-kick" label="_('Kick...')"
          oncommand="menuModel.onKick()"/>
      <menuitem id="conferencemember-ban" label="_('Ban...')"
          oncommand="menuModel.onBan()"/>
      <menu id="conferencemember-affiliations" label="_('Affiliation')">
        <menupopup>
          <menuitem id="conferencemember-affiliation-owner" name="affiliations"
            type="radio" label="_('Owner')"
            oncommand="menuModel.setAffiliation('owner')"/>
          <menuitem id="conferencemember-affiliation-admin" name="affiliations"
            type="radio" label="_('Administrator')"
            oncommand="menuModel.setAffiliation('admin')"/>
          <menuitem id="conferencemember-affiliation-member" name="affiliations"
            type="radio" label="_('Member')"
            oncommand="menuModel.setAffiliation('member')"/>
          <menuitem id="conferencemember-affiliation-none" name="affiliations"
            type="radio" label="_('None')"
            oncommand="menuModel.setAffiliation('none')"/>
        </menupopup>
      </menu>

      <menu id="conferencemember-roles" label="_('Role')">
        <menupopup>
          <menuitem id="conferencemember-role-moderator" name="roles"
            type="radio" label="_('Moderator')"
            oncommand="menuModel.setRole('moderator')"/>
          <menuitem id="conferencemember-role-participant" name="roles"
            type="radio" label="_('Participant')"
            oncommand="menuModel.setRole('participant')"/>
          <menuitem id="conferencemember-role-visitor" name="roles"
            type="radio" label="_('Visitor')"
            oncommand="menuModel.setRole('visitor')"/>
          <menuitem id="conferencemember-role-none" name="roles"
            type="radio" label="_('None')"
            oncommand="menuModel.setRole('none')"/>
        </menupopup>
      </menu>

      <menuseparator/>

      <menuitem label="_('Show Details...')"
        oncommand="menuModel.showVCard()"/>
      <menuitem label="_('Show History...')"
        oncommand="menuModel.onShowHistory()"/>
      <menuitem id="conferencemember-send-file" label="_('Send File...')"
        oncommand="menuModel.onSendFile()"/>
    </popup>

    <popup id="gateway-contextmenu" onpopupshowing="updateContextMenu(this, event)">
      <menuitem id="gateway-chat-single" label="_('Open Chat...')"
          oncommand="menuModel.onOpenChat()"/>

      <menuseparator/>

      <menuitem id="gateway-login" label="_('Login')"
        oncommand="menuModel.login()"/>
      <menuitem id="gateway-logout" label="_('Logout')"
        oncommand="menuModel.logout()"/>

      <menuseparator/>

      <menuitem label="_('Show Details...')"
        oncommand="menuModel.showVCard()"/>
      <menuitem label="_('Show History...')"
        oncommand="menuModel.onShowHistory()"/>

      <menuseparator/>

      <menuitem label="_('Remove...')"
        oncommand="menuModel.onRemove()"/>
    </popup>

    <popup id="inputContext" onpopuphidden="spellcheck.onHiddenSuggestionsMenu(this);"
           onpopupshowing="spellcheck.onShowSuggestionsMenu(this);">
      <menuitem id="spellCheckNoSuggestions" label="_('No Suggestions')" disabled="true"/>
      <menuseparator id="suggestions-separator"/>
      <menuitem id="menu_undo_cm"   label="_('Undo')"   accesskey=""   command="cmd_undo"/>
      <menuitem id="menu_redo_cm"   label="_('Redo')"   accesskey=""   command="cmd_redo"/>
      <menuseparator id="undoredo-separator"/>

      <menuitem id="menu_cut_cm"    label="_('Cut')"    accesskey=""    command="cmd_cut"/>
      <menuitem id="menu_copy_cm"   label="_('Copy')"   accesskey=""   command="cmd_copy"/>
      <menuitem id="menu_paste_cm"  label="_('Paste')"  accesskey=""  command="cmd_paste"/>
      <menuitem id="menu_delete_cm" label="_('Delete')" accesskey="" command="cmd_delete"/>
      <menuseparator id="edit-separator"/>
      <menuitem id="menu_selectAll_cm" label="_('Select All')" accesskey="" command="cmd_selectAll"/>
    </popup>
  </popupset>
</overlay>
