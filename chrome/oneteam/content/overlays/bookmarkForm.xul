<?xml version="1.0" encoding="ISO-8859-1"?>

<overlay id="bookmark-form" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <script><![CDATA[
    var selectedBookmark, list; // only for 'Bookmark manager' window
    var input = {};
    var bookmarksByJid = {};
    var bookmarksByName = {};

    function populateBookmarks() {
      var bookmarks = account.bookmarks.bookmarks;
      for (var i = 0; i < bookmarks.length; i++) {
        var bookmark = list ? list.appendItem(bookmarks[i].bookmarkName) : {};
        bookmark.model  = bookmarks[i];
        bookmark.name   = bookmarks[i].bookmarkName;
        bookmark.room   = bookmarks[i].jid.node;
        bookmark.server = bookmarks[i].jid.domain;
        bookmark.nick   = bookmarks[i].bookmarkNick || "";
        bookmark.pass   = bookmarks[i].bookmarkPassword || "";
        bookmark.autoJoin = bookmarks[i].autoJoin;

        registerBookmark(bookmark);
      }
    }

    function registerBookmark(bookmark) {
      bookmarksByJid[bookmark.room+'@'+bookmark.server] = bookmark;
      bookmarksByName[bookmark.name] = bookmark;
    }

    function unregisterBookmark(bookmark) {
      delete bookmarksByJid[bookmark.room+'@'+bookmark.server];
      delete bookmarksByName[bookmark.name];
    }

    function newName(defaultName) {
      var baseName = defaultName || _("New Room");
      var name = baseName;
      var i = 1;
      while (bookmarksByName[name]) {
        name = baseName + " " + i;
        i += 1;
      }
      return name
    }

    function checkName() {
      if (bookmarksByName[input.name.value]
          && (!selectedBookmark || input.name.value != selectedBookmark.name)) {
        input.name.errortext=_('Bookmark with that name already exists');
        return false;
      }
      delete input.name.errortext;
      return input.name.value.length;
    }

    function checkRoom() {
      if (bookmarksByJid[input.room.value+'@'+input.server.value]
          && (!selectedBookmark || input.room.value != selectedBookmark.room
                          || input.server.value != selectedBookmark.server)) {
        input.room.errortext = _('You have already that chatroom in your bookmarks');
        return false;
      }
      delete input.room.errortext;
      return !input.room.value.search(/^[^ \t\n"&'/:<>@]+$/);
    }

    function checkServer() {
      input.room._checkCondition();
      return !input.server.value.search(/^(?:\w(?:[\w-]*\w)?\.)*[^\W\d](?:[\w-]*\w)?$/);
    }
  ]]></script>
  <grid flex="1" id="bookmark-form">
    <columns>
      <column/>
      <column flex="1"/>
    </columns>
    <rows>
      <row>
        <label value="_('Name:')" control="name"/>
        <textbox id="name" type="verifiable" condition="checkName()"
                 oninput="updateName(this.value)"/>
      </row>

      <spacer/>

      <row>
        <label value="_('Room:')" control="room"/>
        <textbox id="room" type="verifiable" condition="checkRoom()"/>
      </row>

      <spacer/>

      <row>
        <label value="_('Server:')" control="server"/>
        <textbox id="server" type="verifiable" condition="checkServer()"/>
      </row>

      <spacer/>

      <row>
        <label value="_('Nick:')" control="nick"/>
        <textbox id="nick" type="verifiable" regex="."/>
      </row>

      <spacer/>

      <row>
        <label value="_('Password:')" control="pass"/>
        <textbox id="pass" type="password"/>
      </row>

      <spacer/>

      <row>
        <box/>
        <checkbox label="_('Always join this room at startup')" id="autoJoin"/>
      </row>
    </rows>
  </grid>
</overlay>
