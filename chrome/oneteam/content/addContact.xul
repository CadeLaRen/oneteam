<?xml version="1.0" encoding="ISO-8859-1"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/dialog.css" type="text/css"?>
<?xml-stylesheet href="chrome://branding/locale/branding.css" type="text/css"?>

<dialog id="addContact" windowtype="ot:addContact" title="_('Add Contact')"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml"
  onload="onLoad()" onunload="onUnload()"
  width="500" height="600"
  buttonlabelaccept="_('Add')" buttonlabelcancel="_('Cancel')"
  buttons="accept,cancel"
  ondialogaccept="return addContact()">

  <script type="text/javascript;version=1.7" src="JavaScript/l10n.js"/>
  <script type="text/javascript;version=1.7"><![CDATA[
    var contact = window.arguments && window.arguments[0];
    var currentGateway, progressmeter;
    var account = window.opener.account;
    var gatewaysRegToken, regToken;

    function onLoad() {
      progressmeter = document.getElementById("progressmeter");
      if (contact) {
        var jid = document.getElementById("jid");

        document.getElementById("nick").value = contact.jid.node;
        jid.value = contact.jid;
        jid.disabled = true;
      } else {
        updateProtoList(account, "gateways",
                        {added: [gateway for each (gateway in account.gateways)]});
        gatewaysRegToken = account.registerView(updateProtoList, null, "gateways");
      }
    }

    function onUnload() {
      if (currentGateway && regToken)
        currentGateway.unregisterView(regToken);

      if (gatewaysRegToken)
        account.unregisterView(gatewaysRegToken);
    }

    function updateProtoList(model, type, data)
    {
      var protoList = document.getElementById("protocol").firstChild;

      for (var i = 0; i < data.added.length; i++) {
        var el = document.createElement("menuitem");
        el.setAttribute("label", data.added[i].gatewayName);
        el.model = data.added[i];
        protoList.appendChild(el);
      }

      if (protoList.childNodes.length > 1)
        protoList.parentNode.parentNode.parentNode.hidden = false;
    }

    function changeProto(gateway) {
      if (currentGateway && regToken) {
        currentGateway.unregisterView(regToken);
        regToken = null;
      }
      currentGateway = gateway;

      document.getElementById("mode").selectedIndex = gateway && gateway.newItem ? 1 : 0;
      document.documentElement.getButton("accept").disabled = gateway && gateway.newItem;

      if (gateway) {
        regToken = gateway.registerView(changeProto, null, "newItem");
        if (gateway.newItem)
          return;
      }

      var el = document.getElementById("jabber-entry");
      el.hidden = el.nextSibling.hidden = !!gateway;
      el = document.getElementById("gateway-entry")
      el.hidden = el.nextSibling.hidden = !gateway;

      if (gateway) {
        _mapNameFormReady(gateway, gateway._mapNameForm || {});
        if (!gateway._mapNameForm) {
          progressmeter.style.visibility = "visible";
          gateway.requestMapNameForm(_mapNameFormReady);
        }
      } else
        progressmeter.style.visibility = "hidden";
    }

    function _mapNameFormReady(gateway, map) {
      if (currentGateway != gateway)
        return;

      progressmeter.style.visibility = "hidden";

      var el = document.getElementById("gateway-id");
      el.previousSibling.value = map.prompt || _("ID:");
      el = el.parentNode.nextSibling;
      if (el.firstChild)
        el.removeChild(el.firstChild);
      el.appendChild(document.createTextNode(map.desc || ""));
    }

    function addContact(internal) {
      if (currentGateway && !internal) {
        progressmeter.style.visibility = "visible";
        document.documentElement.getButton("accept").disabled = true;
        currentGateway.mapName(<prompt>{document.getElementById("gateway-id").value}</prompt>,
                               _mapNameReady);
        return false;
      }
      var jid = document.getElementById("jid").value;
      var nick = document.getElementById("nick").value;
      var groups = document.getElementById("groups").choosenGroups;
      var reason = document.getElementById("reason").value;

      if (!contact) {
        if (!~jid.search(/^([^@]+@)?(?:\w(?:[\w-]*\w)?\.)*[^\W\d](?:[\w-]*\w)?$/)) {
          alert(_("Please enter correct Jabber ID"));
          return false;
        }
        if (account.contacts[jid]) {
          alert(_("Contact with this Jabber ID already exists"));
          return false;
        }
        contact = account.getOrCreateContact(jid, false, nick, groups);
      } else
        contact.editContact(nick, groups);

      contact.subscribe(reason);
      return true;
    }

    function _mapNameReady(jid) {
      progressmeter.style.visibility = "hidden";
      if (!jid) {
        alert(_("Gateway can't convert ID into Jabber ID"));
        document.documentElement.getButton("accept").disabled = false;
        return;
      }
      document.getElementById("jid").value = jid;

      addContact(true);
      window.close();
    }
  ]]></script>

  <dialogheader title="_('Add Contact')"/>

  <vbox hidden="true">
    <hbox align="center">
      <label value="_('Network:')"/>
      <menulist id="protocol" oncommand="changeProto(this.selectedItem.model)">
        <menupopup>
          <menuitem label="_('Jabber')"/>
        </menupopup>
      </menulist>
    </hbox>
    <spacer/>
  </vbox>

  <deck id="mode">
    <vbox>
      <grid>
        <columns>
          <column/>
          <column flex="1"/>
        </columns>
        <rows>
          <row id="gateway-entry" hidden="true">
            <label control="gateway-id"/>
            <textbox id="gateway-id"/>
          </row>
          <description class="field-desc" hidden="true"/>

          <row id="jabber-entry">
            <label value="_('Jabber ID:')" control="jid"/>
            <textbox id="jid"/>
          </row>
          <description class="field-desc">_('Enter Jabber ID of the contact you want to add.
            (ex.: foo@jabber.org)')</description>

          <spacer/>

          <row>
            <label value="_('Nickname:')" control="nick"/>
            <textbox id="nick"/>
          </row>
          <description class="field-desc">_("Enter contact's nickname which will be displayed
            in roster window.")</description>
        </rows>
      </grid>

      <spacer/>

      <label value="_('Groups:')" control="groups"/>
      <groupselector id="groups" rows="4"/>

      <spacer/>

      <label value="_('Reason (Optional)')" />
      <textbox id="reason" multiline="true" rows="2"/>
    </vbox>
    <vbox>
      <description>
        _("Before adding contacts from this network, you need to register in this network's gateway.")
      </description>
      <button label="_('Registration Gateway')" oncommand="currentGateway.onRegister()"/>
    </vbox>
  </deck>

  <spacer/>
  <progressmeter id="progressmeter" style="visibility: hidden" mode="undetermined"/>
  <spacer/>
</dialog>
