<?xml version="1.0" encoding="ISO-8859-1"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/dialog.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam-branding/locale/branding.css" type="text/css"?>

<?xul-overlay href="chrome://oneteam/content/overlays/macMenuOverlay.xul"?>

<dialog id="oneteam" windowtype="ot:addContact" title="_('Add Contact')"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml"
  onload="onLoad()" onunload="onUnload()"
  buttonlabelaccept="_('Add')" buttonlabelcancel="_('Cancel')"
  buttons="accept,cancel"
  ondialogaccept="return addContact()">

  <script type="text/javascript;version=1.7" src="JavaScript/moduleloader.js"/>
  <script type="text/javascript;version=1.7"><![CDATA[
    ML.importMod("model/account.js");

    var contact = window.arguments && window.arguments[0];
    var currentGateway, progressmeter;
    var gatewaysRegToken, regToken;

    function onLoad() {
      progressmeter = document.getElementById("progressmeter");
      if (contact) {
        var jid = document.getElementById("jid");

        document.getElementById("nick").value = contact.jid.node;
        jid.value = contact.jid;
        jid.disabled = true;
      } else {
        updateProtoList(account, "gateways",
                        {added: [gateway for each (gateway in account.gateways)]});
        gatewaysRegToken = account.registerView(updateProtoList, null, "gateways");
      }
    }

    function onUnload() {
      if (currentGateway && regToken)
        currentGateway.unregisterView(regToken);

      if (gatewaysRegToken)
        account.unregisterView(gatewaysRegToken);
    }

    function updateProtoList(model, type, data)
    {
      var protoList = document.getElementById("protocol").firstChild;

      for (var i = 0; i < data.added.length; i++) {
        var el = document.createElement("menuitem");
        el.setAttribute("label", data.added[i].gatewayName);
        el.model = data.added[i];
        protoList.appendChild(el);
      }

      if (protoList.childNodes.length > 1)
        protoList.parentNode.parentNode.parentNode.hidden = false;
    }

    function changeProto(gateway) {
      if (currentGateway && regToken) {
        currentGateway.unregisterView(regToken);
        regToken = null;
      }
      currentGateway = gateway;

      document.getElementById("mode").selectedIndex = gateway && gateway.newItem ? 1 : 0;
      document.documentElement.getButton("accept").disabled = gateway && gateway.newItem;

      if (gateway) {
        regToken = gateway.registerView(changeProto, null, "newItem");
        if (gateway.newItem)
          return;
      }

      var el = document.getElementById("jabber-entry");
      el.hidden = el.nextSibling.hidden = !!gateway;
      el = document.getElementById("gateway-entry")
      el.hidden = el.nextSibling.hidden = !gateway;

      if (gateway) {
        _mapNameFormReady(gateway, gateway._mapNameForm || {});
        if (!gateway._mapNameForm) {
          progressmeter.style.visibility = "visible";
          gateway.requestMapNameForm(_mapNameFormReady);
        }
      } else
        progressmeter.style.visibility = "hidden";
    }

    function _mapNameFormReady(gateway, map) {
      if (currentGateway != gateway)
        return;

      progressmeter.style.visibility = "hidden";

      var el = document.getElementById("gateway-id");
      el.previousSibling.value = map.prompt || _("ID:");
      el = el.parentNode.nextSibling;
      if (el.firstChild)
        el.removeChild(el.firstChild);
      el.appendChild(document.createTextNode(map.desc || ""));
    }

    function addContact(internal) {
      if (currentGateway && !internal) {
        progressmeter.style.visibility = "visible";
        document.documentElement.getButton("accept").disabled = true;
        currentGateway.mapName(document.getElementById("gateway-id").value,
                               _mapNameReady);
        return false;
      }
      var tb = document.getElementById("jid");
      var jid = tb.value;
      if (isKnownJid(jid)) {
        tb.errortext = _("Contact with this Jabber ID already exists");
        tb._checkCondition();
        tb.focus();
        return false;
      }

      var nick = document.getElementById("nick").value;
      var groups = document.getElementById("groups").choosenGroups;
      var reason = document.getElementById("reason").value;

      if (!contact) {
        contact = account.getOrCreateContact(jid, false, nick, groups);
      } else
        contact.editContact(nick, groups);

      contact.subscribe(reason);
      return true;
    }

    function checkJid(value, tb) {
      if (tb.errortext)
        if (isKnownJid(value))
          return false;
        else
          delete tb.errortext;
      return !value.search(/^([^@]+@)?(?:\w(?:[\w-]*\w)?\.)*[^\W](?:[\w-]*\w)?$/);
    }

    function isKnownJid(jid) {
      return !!jid && new JID(jid).normalizedJID in account.contacts;
    }

    function _mapNameReady(jid) {
      progressmeter.style.visibility = "hidden";
      if (!jid) {
        alert(_("Gateway can't convert ID into Jabber ID"));
        document.documentElement.getButton("accept").disabled = false;
        return;
      }
      document.getElementById("jid").value = jid;

      addContact(true);
      window.close();
    }
  ]]></script>

  <group id="macMenu"/>

  <toolbox id="mainToolbox">
    <menubar id="macMenuBar"/>
  </toolbox>

  <vbox hidden="true">
    <hbox align="center" pack="center">
      <label value="_('Network:')"/>
      <menulist id="protocol" oncommand="changeProto(this.selectedItem.model)">
        <menupopup>
          <menuitem label="_('XMPP')"/>
        </menupopup>
      </menulist>
    </hbox>
    <spacer/>
  </vbox>

  <deck id="mode">
    <vbox>
      <vbox align="center">
        <grid>
          <columns>
            <column/>
            <column/>
          </columns>
          <rows>
            <row id="gateway-entry" hidden="true">
              <label control="gateway-id"/>
              <textbox id="gateway-id"/>
            </row>
            <row>
              <spacer/>
              <description class="field-desc" hidden="true"/>
            </row>

            <row id="jabber-entry">
              <label value="_('Jabber ID:')" control="jid"/>
              <textbox id="jid" type="verifiable" condition="checkJid(val, this)"/>
            </row>
            <row>
              <spacer/>
              <description class="field-desc">_('For example: john@talkr.im')</description>
            </row>

            <spacer/>
            <row>
              <label value="_('Nick:')" control="nick"/>
              <textbox id="nick"/>
            </row>
            <row>
              <spacer/>
              <description class="field-desc">_("Optional, used to mark the contact")</description>
            </row>
          </rows>
        </grid>
      </vbox>

      <separator class="groove"/>

      <spacer/>

      <hbox flex="1">
        <vbox flex="1">
          <label value="_('Groups:')" control="groups"/>
          <groupselector id="groups" rows="4"/>
        </vbox>

      <separator orient="vertical" class="groove"/>

        <vbox flex="1">
          <hbox align="center">
            <label value="_('Reason:')" />
            <spacer/>
            <description class="field-desc">_('(Optional)')</description>
          </hbox>
          <textbox id="reason" multiline="true" rows="3"/>
        </vbox>
      </hbox>

      <spacer/>

      <separator class="groove"/>

    </vbox>
    <vbox>
      <description>
        _("Before adding contacts from this network, you need to register in this network's gateway.")
      </description>
      <button label="_('Registration Gateway')" oncommand="currentGateway.onRegister()"/>
    </vbox>
  </deck>

  <progressmeter id="progressmeter" style="visibility: hidden" mode="undetermined"/>
</dialog>
