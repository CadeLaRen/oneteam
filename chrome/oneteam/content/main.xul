<?xml version="1.0" encoding="ISO-8859-1"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/main/main.css" type="text/css"?>
<?xml-stylesheet href="chrome://branding/locale/branding.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>

<window id="ot:main" title="OneTeam" class="no-verifier"
    onload="onLoad()" onclose="return onClose()" onunload="onUnload()"
    width="300" height="600"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <script type="text/javascript;version=1.7" src="JavaScript/moduleloader.js"/>

  <script type="text/javascript;version=1.7"><![CDATA[
    ML.importMod("model/account.js");
    ML.importMod("views/roster.js");
    ML.importMod("views/gateway.js");
    ML.importMod("views/conference.js");
    ML.importMod("views/chattabs.js");

    var menuModel;

    function findMenuModel(menu, event) {
      if (event.target != menu)
        return false;

      var el = document.popupNode;

      while (el && !el.menuModel)
        if (el.parentNode)
          el = el.parentNode;
        else
          el = el.__parent__.frameElement;

      if (!el)
        return false;

      menuModel = el.menuModel;

      return true;
    }

    function updateContactContextMenu(menu, event) {
      if (!findMenuModel(menu, event))
        return;

      var cs = document.getElementById("contact-chat-single");
      var cm = document.getElementById("contact-chat-multi");
      var im = document.getElementById("contact-invite");
      var sf = document.getElementById("contact-send-file");
      var ah = document.getElementById("contact-adhoc");
      var ahm = document.getElementById("contact-adhoc-multi");

      sf.hidden = !menuModel.activeResource || !socks5Service.canSendTo(menuModel.activeResource);

      cm.hidden = !(cs.hidden = menuModel.resources.length > 1);
      if (cs.hidden) {
        var list = cm.firstChild;
        while (list && list.firstChild)
          list.removeChild(list.firstChild);
        for (var i = 0; i < menuModel.resources.length; i++) {
          var item = document.createElement("menuitem");
          item.model = menuModel.resources[i];

          item.setAttribute("label", item.model.jid.resource+
            (item.model.presence.priority == null ?
             "" : " ("+item.model.presence.priority+")"));
          item.setAttribute("oncommand", "this.model.onOpenChat()");

          list.appendChild(item);
        }
      }

      im.hidden = !account.conferences.length;
      if (!im.hidden) {
        list = im.firstChild;
        while (list && list.firstChild)
          list.removeChild(list.firstChild);
        for (var i = 0; i < account.conferences.length; i++) {
          var item = document.createElement("menuitem");
          item.setAttribute("label", account.conferences[i].jid.toUserString());
          item.setAttribute("oncommand", "this.model.invite(this.contact)");
          item.model = account.conferences[i];
          item.contact = menuModel.jid;
          list.appendChild(item);
        }
      }

      var ahr = [];
      for (var res in menuModel.resourcesIterator()) {
        if (res.hasDiscoFeature("http://jabber.org/protocol/commands"))
          ahr.push(res);
      }
      ah.hidden = ahr.length != 1 || ahr[0] != menuModel.activeResource;
      ahm.hidden = !ah.hidden || ahr.length == 0;
      if (!ahm.hidden) {
        list = ahm;
        while (list && list.firstChild)
          list.removeChild(list.firstChild);
        for (i = 0; i < ahr.length; i++) {
          var item = document.createElement("menuitem");
          item.model = ahr[i];

          item.setAttribute("label", _("{0} ({1})", ahr[i].jid.resource,
                                       ahr[i].presence.priority || 0));
          item.setAttribute("oncommand", "this.model.onAdHocCommand()");

          list.appendChild(item);
        }
      }

      document.getElementById("contact-authorization-ask").
        setAttribute("disabled", menuModel.canSeeHim);
      document.getElementById("contact-authorization-allow").
        setAttribute("disabled", menuModel.canSeeMe);
      document.getElementById("contact-authorization-disallow").
        setAttribute("disabled", !menuModel.canSeeMe);
    }

    function updateResourceContextMenu(menu, event) {
      if (!findMenuModel(menu, event))
        return;

      var im = document.getElementById("resource-invite");
      var sf = document.getElementById("resource-send-file");
      var ah = document.getElementById("resource-adhoc");

      sf.hidden = !socks5Service.canSendTo(model);

      im.hidden = !account.conferences.length;
      if (!im.hidden) {
        list = im.firstChild;
        while (list && list.firstChild)
          list.removeChild(list.firstChild);
        for (var i = 0; i < account.conferences.length; i++) {
          var item = document.createElement("menuitem");
          item.setAttribute("label", account.conferences[i].jid.toUserString());
          item.setAttribute("oncommand", "this.model.invite(this.contact)");
          item.model = account.conferences[i];
          item.contact = menuModel.jid;
          list.appendChild(item);
        }
      }

      ah.hidden = !menuModel.hasDiscoFeature("http://jabber.org/protocol/commands");
    }

    function updateConferenceMemberContextMenu(menu, event) {
      if (!findMenuModel(menu, event))
        return;

      var confMemb = model;
      var conf = confMemb.contact;

      var kick = document.getElementById("conferencemember-kick");
      var ban = document.getElementById("conferencemember-ban");
      var affiliations = document.getElementById("conferencemember-affiliations");
      var roles = document.getElementById("conferencemember-roles");

      kick.previousSibling.hidden = kick.hidden = ban.hidden = !confMemb.canBeKicked;

      affiliations.hidden = !(conf.iAmAdmin && conf.myResource.isGt(confMemb) || conf.iAmOwner);
      roles.hidden = confMemb.isAdmin || !conf.iAmModerator;

      for each (var affiliation in "owner admin member none".split(" ")) {
        var el = document.getElementById("conferencemember-affiliation-"+affiliation);
        el.hidden = !conf.iAmOwner && conf.myResource.cmp(affiliation, true) >= 0;
        el.setAttribute("checked", confMemb.affiliation == affiliation);
      }

      for each (var role in "moderator participant visitor none".split(" ")) {
        var el = document.getElementById("conferencemember-role-"+role);
        el.hidden = confMemb.isAdmin || (role == "moderator" && conf.iAmModerator && !conf.iAmAdmin);
        el.setAttribute("checked", confMemb.role == role);
      }
    }

    function updateConferenceContextMenu(menu, event) {
      if (!findMenuModel(menu, event))
        return;

      var configuration = document.getElementById("conference-configuration");
      var permissions = document.getElementById("conference-edit-permissions");

      configuration.hidden = !menuModel.iAmOwner;
      configuration.previousSibling.hidden = permissions.hidden =
        !menuModel.iAmAdmin;
    }

    function updateGatewayMemberContextMenu(menu, event) {
      if (!findMenuModel(menu, event))
        return;

      document.getElementById("gateway-login").disabled = !!menuModel.activeResource;
      document.getElementById("gateway-logout").disabled = !menuModel.activeResource;
    }
    var loginProgress;

    var setPresenceUpdater = {
      onPresenceChange: function() {
        this.chooser.value = account.currentPresence.show || "available";
        this.profile = account.currentPresence.profile;
        this.onIconSetChange();
      },

      onConnect: function()
      {
        document.getElementById("main-toolbox").hidden = !account.connected;
        document.getElementById("main-deck").selectedIndex = account.connected ? 1 : 0;
        document.getElementById("setPresence-nick").value = account.myResource.visibleName;
        document.getElementById("login-signin").disabled = false;

        // Workaround for mozilla bug 432028
        var progress = document.getElementById("login-progress");
        if (progress) {
          loginProgress = progress;
          progress.parentNode.removeChild(progress);
        }

        if (!this.rosterView) {
          this.rosterView = new RosterView(document.getElementById("contacts-list"));
          this.bookmarksMenuView =
            new BookmarksMenuView(document.getElementById("conference-menu-separator"));
          this.gatewaysMenuView =
            new GatewaysMenuView(document.getElementById("gateways-menu"));
          this.presenceProfilesView =
            new PresenceProfilesView(document.getElementById("setPresence-profile-dummy"),
                                     this.profileEnable);
          this.gatewaysButtonsView = new GatewaysToolbarButtons(document.getElementById("gateways-separator"));
          document.getElementById("cmd_toggleShowOffline").
            setAttribute("checked", this.rosterView.hideOffline);
        }
        if (!account.connected) {
          if (!quitSequence)
            chatTabsController.closeTabs();
        } else
          account.hasDiscoFeature("http://jabber.org/protocol/commands", false, function(a, val) {
            document.getElementById("cmd_adhoc").hidden = !val;
          });
      },

      onCommand: function()
      {
        if (this._skip)
          return;

        if (this.chooser.value) {
          this.presence = this.chooser.value;
          account.setPresence(this.presence, null, null,
            this.profileEnable.checked ? this.profile : null, true);
        } else {
          this._skip = true;
          this.chooser.value = this.presence;
          this._skip = false;
          account.onCustomPresence(this.presence,
            this.profileEnable.checked ? this.profile : null);
        }
      },

      get profile()
      {
        if (this.profileEnable.checked)
          return this.profileChooser.selectedItem && this.profileChooser.selectedItem.model;
        return null;
      },

      set profile(val)
      {
        this.profileEnable.checked = val != null;
        if (!val)
          return val;
        var profiles = this.profileChooser.childNodes;
        for (var i = 0 ; i < profiles.length; i++)
          if (profiles[i].model == val) {
            this.profileChooser.selectedIndex = i;
            break;
          }
        return val;
      },

      onProfileCommand: function()
      {
        if (this._skip)
          return;
        if (this.profileChooser.value) {
          this.profileValue = this.profileChooser.value;

          if (this.profileEnable.checked)
            account.setPresence(this.presence, null, null, this.profile, true);
        } else {
          this._skip = true;
          this.profileChooser.value = this.profileValue;
          this._skip = false;

          account.onEditPresenceProfiles();
        }
      },

      onProfileEnable: function()
      {
          account.setPresence(this.presence, null, null,
            this.profileEnable.checked ? this.profile : null, true);
      },

      onProfilesChange: function()
      {
      },

      updatePresenceIcon: function()
      {
        document.getElementById("setPresence-type-image").src =
// #ifdef XULAPP
          this.systray.icon =
// #endif
          account.style.getStatusIcon(account.currentPresence.show);
      },

      onIconSetChange: function()
      {
        for each(var presenceType in ["available", "chat", "dnd", "away", "xa", "invisible"]) {
          var item = document.getElementById("setPresence-type-" + presenceType);
          document.getAnonymousElementByAttribute(item, "class", "menu-iconic-left").
            setAttribute("style", "display: block;");
          item.setAttribute("image", account.style.getStatusIcon(presenceType));
        }
        this.updatePresenceIcon();
      },

      onNickChange: function()
      {
        document.getElementById("setPresence-nick").value = account.myResource.visibleName;
      },

      init: function()
      {
        account.registerView(this.onConnect, this, "connected");
        account.registerView(this.onPresenceChange, this, "currentPresence");
        account.myResource.registerView(this.onNickChange, this, "visibleName");
        account.style.registerView(this.onIconSetChange, this, "defaultSet");

        this.chooser = document.getElementById("setPresence-type-chooser");
        this.profileChooser = document.getElementById("setPresence-profile-chooser");
        this.profileEnable = document.getElementById("setPresence-profile-enable");
// #ifdef XULAPP
        this.systray = document.getElementById("systray");
        this.systray.icon = account.style.getStatusIcon(account.currentPresence.show);
// #endif
        this.presence = this.chooser.value;
        if (account.connected)
          this.onConnect();
      }
    };

    var soundsPlayer;

    function onLoad() {
      setPresenceUpdater.init();
      eventBoxHandler.init();
      document.getElementById("setPresence-avatar-image").model = account;
      soundsPlayer = document.getElementById("soundsplayer");
      document.getElementById("login-signin").disabled = false;

      var args = {};
      for each (var part in document.location.toString().replace(/.*?\?/, "").split("&")) {
        if (!part)
          continue;
        part = perlSplit(part, "=", 2);
        args[decodeURIComponent(part[0])] = part.length == 1 ? null : decodeURIComponent(part[1]);
      }

      var username = account.connectionInfo.user;
      var password = account.connectionInfo.pass;
      var savePass = account.connectionInfo.pass != null;

      if (args.username) {
        username = args.username;
        password = args.password || ""
        savePass = false;
      }

      document.getElementById("login-user").value = username || "";
      document.getElementById("login-pass").value = password || "";
      document.getElementById("login-savePass").checked = savePass;

      if (("login" in args || args.openchat || args.openconference) && username && password) {
        connect();
        if (args.openchat || args.openconference)
          account.registerView(function() {
            if (!account.connectionInitialized)
              return;

            if (args.openchat)
              account.getOrCreateContact(args.openchat).onOpenChat();
            if (args.openconference) {
              var jid = new JID(args.openconference);
              account.getOrCreateConference(jid.shortJID).joinRoom(function(){}, jid.resource || username);
            }
          }, null, "connectionInitialized");
      }

// #ifdef XULAPP
/*
      chatTabsController.addEventListener("tab-added", function(event) {
        if (event.target.tabCount != 1)
          return;

        var splitter = document.getElementById("chats-splitter");
        splitter.collapsed = false;
        event.target.collapsed = false;
        splitter.previousSibling.flex = "0";
        splitter.previousSibling.setAttribute("width", self.innerWidth);
        self.resizeTo(self.outerWidth+(+splitter.getAttribute("rightWidth") || 500),
                      self.outerHeight);
      }, false);

      chatTabsController.addEventListener("tab-removed", function(event) {
        if (event.target.tabCount != 0)
          return;

        var splitter = document.getElementById("chats-splitter");
        var width = +splitter.previousSibling.getAttribute("width");

        splitter.collapsed = true;
        event.target.collapsed = true;

        splitter.previousSibling.flex = "1";
        splitter.setAttribute("rightWidth", self.outerWidth - width);

        self.resizeTo(self.outerWidth - self.innerWidth + width, self.outerHeight);
      }, false);
*/
// #endif
    }

    function onClose() {
    //#ifdef XULAPP
      setPresenceUpdater.systray.minimized = true;
      return false;
    /*#else
      return true;
    //#endif */
    }

    function onUnload() {
      return;
    //#ifdef XULAPP
      var width = self.outerWidth;

      if (chatTabsController.tabCount) {
        var splitter = document.getElementById("chats-splitter");
        var w = +splitter.previousSibling.getAttribute("width");
        splitter.setAttribute("rightWidth", self.outerWidth - w);
        width = self.outerWidth - self.innerWidth + w;
      }

      document.documentElement.setAttribute("width", width)
      document.documentElement.setAttribute("height", self.outerHeight)
      document.persist(document.documentElement.getAttribute("id"), "width");
      document.persist(document.documentElement.getAttribute("id"), "height");
    /*#else
      document.getElementById("login-signin").disabled = true;
      if (window.account.connection)
        account.disconnect();
      closeAllWindows();
    //#endif */
    }
    //#ifndef XULAPP
    function onBeforeUnload() {
      return;
      if (account.connected)
        return "Are you sure you want to leave OneTeam?";
    }
    window.onbeforeunload = onBeforeUnload;
    //#endif

    var quitSequence = false;
    function quit() {
    //#ifdef XULAPP
      var promptSrv = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].
        getService(Components.interfaces.nsIPromptService);

      if (window.account.connection && promptSrv.confirmEx(window, _("Quit prompt"),
                                            _("You are connected, do you really want to quit?"),
                                            3+256*4+(1 << 24), "", "", "", "", {}))
        return
    //#endif

      quitSequence = true;

      if (window.account.connection)
        account.disconnect();

    //#ifdef XULAPP
      Components.classes['@mozilla.org/toolkit/app-startup;1'].
        getService(Components.interfaces.nsIAppStartup).
          quit(Components.interfaces.nsIAppStartup.eAttemptQuit);
    /*#else
      window.close();
    //#endif */
    }

    function connect() {
      document.getElementById("login-signin").disabled = true;

      // Workaround for mozilla bug 432028
      var progress = document.getElementById("login-progress");
      if (!progress) {
        var before = document.getElementById("before-login-progress");
        before.parentNode.insertBefore(loginProgress, before);
      } else
        progress.style.visibility = "visible";

      account.setUserAndPass(document.getElementById("login-user").value,
        document.getElementById("login-pass").value,
        document.getElementById("login-savePass").checked);
      account.connect();
    }

    eventBoxHandler = {
      eventNum: 0,

      init: function()
      {
        this.eventBox = document.getElementById("eventBox");
        this.counter = document.getElementById("eventBoxCounter");
        this.prevButton = document.getElementById("eventBoxPrev")
        this.nextButton = document.getElementById("eventBoxNext")
        account.registerView(this.onEventsChanged, this, "events");
      },

      onEventsChanged: function()
      {
        this.eventBox.collapsed = account.events.length == 0;

        if (account.events.length) {
          if (this.eventNum > account.events.length)
            this.eventNum = account.events.length-1;

          this.counter.textContent = _("Event {0} of {1}", this.eventNum+1, account.events.length);
          this.prevButton.disabled = this.eventNum == 0;
          this.nextButton.disabled = this.eventNum+1 == account.events.length;

          if (this.eventBox.childNodes[1])
            this.eventBox.removeChild(this.eventBox.childNodes[1]);

          var event = account.events[this.eventNum];

          if (typeof(event[0]) == "string") {
            var description = document.createElement("description");
            var div = document.createElementNS("http://www.w3.org/1999/xhtml", "div");

            div.innerHTML = event[0];

            description.appendChild(div);
            this.eventBox.appendChild(description);
          } else
            this.eventBox.appendChild(event[0].generate());
        }
      },

      prevMsg: function() {
        this.eventNum--;
        this.onEventsChanged();
      },

      nextMsg: function() {
        this.eventNum++;
        this.onEventsChanged();
      },

      onClick: function(ev)
      {
        if (!account.events[this.eventNum] || ev.target == this.prevButton || ev.target == this.nextButton)
          return;

        account.events[0][1]();
        account.removeEvent(account.events[0]);
      }
    }

    function checkForUpdates() {
      var um = Components.classes["@mozilla.org/updates/update-manager;1"].
        getService(Components.interfaces.nsIUpdateManager);
      var prompter = Components.classes["@mozilla.org/updates/update-prompt;1"].
        createInstance(Components.interfaces.nsIUpdatePrompt);

      if (um.activeUpdate && um.activeUpdate.state == "pending")
        prompter.showUpdateDownloaded(um.activeUpdate);
      else
        prompter.checkForUpdates();
    }
  ]]></script>

  <comandset>
    <command id="cmd_addContact" key="key_addContact" oncommand="account.onAddContact()"/>
    <command id="cmd_joinRoom" key="key_joinRoom" oncommand="account.onJoinRoom()"/>
    <command id="cmd_manageBookmarks" oncommand="account.onManageBookmarks()"/>
    <command id="cmd_history" key="key_history" oncommand="account.showHistoryManager()"/>
    <command id="cmd_transfers" key="key_transfers" oncommand="account.showTransfersManager()"/>
    <command id="cmd_disco" key="key_disco" oncommand="account.showDisco()"/>
    <command id="cmd_adhoc" oncommand="account.onAdHocCommand()"/>
    <command id="cmd_disconnect" oncommand="account.disconnect()"/>
    <command id="cmd_quit" key="key_quit" oncommand="quit()"/>

    <command id="cmd_ourVCard" key="key_ourVCard" oncommand="account.showVCard()"/>
    <command id="cmd_changePassword" oncommand="account.onChangePassword()"/>
<!-- #ifdef XULAPP -->
    <command id="cmd_extensions" oncommand=""/>
    <command id="cmd_themes" key="key_themes" oncommand=""/>
<!-- #endif -->
    <command id="cmd_prefs" key="key_prefs" oncommand="account.showPrefs()"/>

    <command id="cmd_help" key="key_help" oncommand="openLink('http://www.process-one.net/en/oneteam/')"/>
    <command id="cmd_help_bot" oncommand="account.getOrCreateContact('bot.oneteam.im').onOpenChat()"/>
    <command id="cmd_bug" oncommand="openLink('https://support.process-one.net/browse/TEAM')"/>
    <command id="cmd_xmlConsole" key="key_xmlConsole" oncommand="account.showConsole()"/>
<!-- #ifdef DEBUG -->
<!-- #ifdef XULAPP -->
    <command id="cmd_jsConsole" oncommand='window.openDialog("chrome://global/content/console.xul", "_blank","chrome,dialog=no,all", "")'/>
<!-- #endif -->
    <command id="cmd_cmdConsole" oncommand='window.openDialogUniq("ot:command", "command.xul", "chrome,dialog=no,all", "")'/>
    <command id="cmd_cmdVenkman" oncommand='window.openDialogUniq("mozapp:venkman", "chrome://venkman/content/venkman.xul", "chrome,dialog=no,all", "")'/>
    <command id="cmd_cmdDOMInspector" oncommand='window.openDialogUniq("mozapp:dominspector", "chrome://inspector/content/", "chrome,dialog=no,all", "")'/>
<!-- #endif -->
    <command id="cmd_chkUpdates" oncommand='checkForUpdates()'/>
    <command id="cmd_about" oncommand="account.showAbout()"/>

    <command id="cmd_toggleShowOffline" key="key_toggleShowOffline"
      oncommand="this.setAttribute('checked', setPresenceUpdater.rosterView.hideOffline =
        !setPresenceUpdater.rosterView.hideOffline)"/>
    <command id="cmd_toggleShowToolbar" checked="true"
      oncommand="var c = this.getAttribute('checked') == 'true'; this.setAttribute('checked', !c);
                 document.getElementById('actions-toolbar').collapsed = c"/>
  </comandset>

  <keyset>
    <key id="key_xmlConsole" modifiers="control" key="1" command="cmd_xmlConsole"/>
    <key id="key_cmdConsole" modifiers="control" key="2" command="cmd_cmdConsole"/>
    <key id="key_cmdVenkman" modifiers="control" key="3" command="cmd_cmdVenkman"/>
    <key id="key_cmdDOMInspector" modifiers="control" key="4" command="cmd_cmdDOMInspector"/>
  </keyset>

      <toolbox id="main-toolbox" class="toolbox-top" hidden="true">
        <toolbar class="chromeclass-menubar" type="menubar">
          <toolbaritem>
            <menubar style="border: 0; padding: 0; margin:0; -moz-appearance:none">
              <menu id="lagger-menu" label="_('_Actions')">
                <menupopup id="file-popup">
                  <menuitem label="_('_Add Contact...')" command="cmd_addContact"/>

                  <menu label="_('_Join Chat Room')">
                    <menupopup>
                      <menuitem label="_('Join Chat Room...')" command="cmd_joinRoom"/>
                      <menuseparator/>
                      <menuseparator id="conference-menu-separator" hidden="true"/>
                      <menuitem label="_('_Manage Bookmarks...')" command="cmd_manageBookmarks"/>
                    </menupopup>
                  </menu>
                  <menu label="_('_Gateways')" id="gateways-menu">
                    <menupopup/>
                  </menu>
                  <menuseparator/>
                  <menuitem label="_('Service _Discovery')" command="cmd_disco"/>
      <!--              <menuitem label="_('Administration Tools')"/> -->
                  <menuitem label="_('_Server Commands...')" command="cmd_adhoc"/>
                  <menuitem label="_('_History Manager...')" command="cmd_history"/>
                  <menuitem label="_('File _Transfers...')" command="cmd_transfers"/>
                  <menuseparator/>
                  <menuitem label="_('Disconnect')" command="cmd_disconnect"/>
      <!-- #ifdef XULAPP -->
                  <menuitem label="_('_Quit')" command="cmd_quit"/>
      <!-- #endif -->
                </menupopup>
              </menu>
              <menu id="configuration-menu" label="_('_View')">
                <menupopup id="config-popup">
                  <menuitem label="_('Show _Actions Toolbar')" command="cmd_toggleShowToolbar"
                            type="checkbox"/>
                  <menuseparator/>
                  <menuitem label="_('Hide _Offline Contacts')" command="cmd_toggleShowOffline"
                            type="checkbox"/>
                </menupopup>
              </menu>
              <menu id="configuration-menu" label="_('_Config')">
                <menupopup id="config-popup">
                  <menuitem label="_('_Edit personal info...')" command="cmd_ourVCard"/>
                  <menuitem label="_('_Change password...')" command="cmd_changePassword"/>
                  <menuseparator/>
      <!-- #ifdef XULAPP -->
                  <menuitem label="_('Plugins...')" command="cmd_extensions"/>
                  <menuitem label="_('_Themes...')" command="cmd_themes"/>
                  <menuseparator/>
      <!-- #endif -->
                  <menuitem label="_('_Preferences...')" command="cmd_prefs"/>
                </menupopup>
              </menu>
              <menu id="help-menu" label="_('_Help')">
                <menupopup id="help-popup">
                  <menuitem label="_('Help _Bot')" command="cmd_help_bot"/>
                  <menuitem label="_('_Documentation')" command="cmd_help"/>
                  <menuitem label="_('_Report Bug')" command="cmd_bug"/>
                  <menuitem label="_('XML _Console...')" command="cmd_xmlConsole"/>
      <!-- #ifdef DEBUG -->
      <!-- #ifdef XULAPP -->
                  <menuitem label="_('JavaScript Console...')" command="cmd_jsConsole"/>
      <!-- #endif -->
                  <menuitem label="_('Commands Console...')" command="cmd_cmdConsole"/>
      <!-- #endif -->
      <!-- #ifdef XULAPP -->
                  <menuseparator/>
                  <menuitem label="_('Check for Updates...')" command="cmd_chkUpdates"/>
      <!-- #endif -->
                  <menuseparator/>
                  <menuitem label="_('About...')" command="cmd_about"/>
                </menupopup>
              </menu>
            </menubar>
          </toolbaritem>
        </toolbar>

        <toolbar id="actions-toolbar" class="toolbar-primary chromeclass-toolbar">
          <toolbarbutton id="adduser-button" tooltiptext="_('Add new contact')"
              command="cmd_addContact"/>
          <toolbarbutton id="joinroom-button" tooltiptext="_('Join group chat room')"
              command="cmd_joinRoom"/>
          <toolbarseparator/>
          <toolbarbutton id="toggleshowoffline-button" tooltiptext="_('Toggle offline contacts visibility')"
              command="cmd_toggleShowOffline"/>
          <toolbarbutton id="disco-button" tooltiptext="_('Show service discovery')"
              command="cmd_disco"/>
          <toolbarbutton id="editgroups-button" tooltiptext="_('Preferences')"
              command="cmd_prefs"/>
          <toolbarseparator id="gateways-separator" hidden="true"/>
        </toolbar>
      </toolbox>
  <deck id="main-deck" flex="1" selectedIndex="0  ">
    <vbox id="login-box">
      <vbox id="login-entries-box">
        <vbox id="login-user-box">
          <label control="login-user" value="_('Username')"/>
          <textbox id="login-user" flex="1"/>
        </vbox>
        <vbox id="login-pass-box">
          <label control="login-pass" value="_('Password')"/>
          <textbox id="login-pass" type="password"/>
        </vbox>
        <hbox pack="center" id="before-login-progress">
  <!-- #ifdef XULAPP -->
          <checkbox id="login-savePass" checked="true" label="_('Remember password')"/>
  <!-- #else
          <checkbox id="login-savePass" checked="false" label="_('Remember password')"/>
  // #endif -->
        </hbox>
        <progressmeter id="login-progress" style="visibility: hidden" mode="undetermined"/>
        <hbox pack="center">
          <button id="login-signin" disabled="true" label="_('Sign In')" oncommand="connect()"/>
        </hbox>
      </vbox>
      <hbox id="login-actions-box">
        <button flex="1" id="login-add-account" crop="end" label="_('New Account')"
               oncommand='window.open("account.xul", "Startup settings", "chrome,centerscreen,dialog,resizable");'/>
        <button flex="1" id="login-settings" crop="end" label="_('Startup Settings')"
               oncommand="account.showPrefs();"/>
      </hbox>
      <spacer/>
      <hbox id="login-settings-box">
        <spacer flex="100"/>
<!-- #ifdef DEBUG -->
        <label flex="1" crop="end" class="text-link" value="_('Commands Console')"
          onclick="document.getElementById('cmd_cmdConsole').doCommand()"/>
<!-- #endif -->
      </hbox>
    </vbox>
    <vbox id="main-box" flex="1">
      <hbox flex="1">
        <!-- #ifdef XULAPP -->
        <groupbox id="roster-box" flex="1">
        <!-- #else
        <vbox width="250">
        // #endif -->
          <vbox id="presenceBoxLogo">
            <image />
          </vbox>
          <vbox id="setPresence-box">
            <hbox>
              <checkbox id="setPresence-profile-enable" disabled="true"
                oncommand="setPresenceUpdater.onProfileEnable()"/>
              <menulist id="setPresence-profile-chooser" flex="1"
                oncommand="setPresenceUpdater.onProfileCommand()">
                <menupopup>
                  <menuitem id="setPresence-profile-dummy" label="_('No profiles configured')"
                    disabled="true" value="dummy-profile"/>
                  <menuseparator/>
                  <menuitem id="setPresence-profile-create" label="_('Edit profiles...')"/>
                </menupopup>
              </menulist>
            </hbox>
            <spacer/>
            <hbox id="setPresence-presence-box">
              <avatar id="setPresence-avatar-image" showBlankAvatar="true"/>
              <vbox flex="1">
                <hbox align="center">
                  <image id="setPresence-type-image"/>
                  <label id="setPresence-nick"/>
                </hbox>
                <menulist id="setPresence-type-chooser" oncommand="setPresenceUpdater.onCommand()">
                  <menupopup>
                    <menuitem id="setPresence-type-available" label="_('Available')"
                        selected="true" value="available" class="menuitem-iconic"/>
                    <menuitem id="setPresence-type-chat" label="_('Available for chat')"
                        value="chat" class="menuitem-iconic"/>
                    <menuitem id="setPresence-type-dnd" label="_('Busy')"
                        value="dnd" class="menuitem-iconic"/>
                    <menuitem id="setPresence-type-away" label="_('Away')"
                        value="away" class="menuitem-iconic"/>
                    <menuitem id="setPresence-type-xa" label="_('Not available')"
                        value="xa" class="menuitem-iconic"/>
                    <menuitem id="setPresence-type-invisible" label="_('Invisible')"
                        value="invisible" class="menuitem-iconic"/>
                    <menuseparator/>
                    <menuitem id="setPresence-type-custom" label="_('Status message')"/>
                  </menupopup>
                </menulist>
              </vbox>
            </hbox>
          </vbox>
          <vbox id="eventBox" collapsed="true" onclick="eventBoxHandler.onClick(event)">
            <hbox id="eventBoxCounterBox">
              <button id="eventBoxPrev" oncommand="eventBoxHandler.prevMsg()"/>
              <description id="eventBoxCounter" flex="1"/>
              <button id="eventBoxNext" oncommand="eventBoxHandler.nextMsg()"/>
            </hbox>
          </vbox>
          <richlistbox id="contacts-list" flex="1" persist="hideOffline"/>
        </groupbox>
        <!-- #ifdef XULAPP -->
        <splitter id="chats-splitter" collapsed="true" persist="rightWidth"/>
        <chattabbox id="chats" collapsed="true" flex="1"/>
        <!-- #else
        <splitter id="chats-splitter"/>
        <chattabbox id="chats" flex="1"/>
        // #endif -->
      </hbox>
    </vbox>
  </deck>
  <popupset>
    <popup id="contact-contextmenu" onpopupshowing="updateContactContextMenu(this, event)">
      <menuitem id="contact-chat-single" label="_('Send Message...')"
          oncommand="menuModel.onOpenChat()"/>
      <menu id="contact-chat-multi" label="_('Send Message...')" hidden="true">
        <menupopup/>
      </menu>
      <menu id="contact-invite" label="_('Invite To')" hidden="true">
        <menupopup/>
      </menu>

      <menuseparator/>

      <menuitem label="_('Remove Contact...')" oncommand="menuModel.onRemove()"/>
      <menuitem label="_('Change Nickname...')" oncommand="menuModel.onRename()"/>
      <menuitem label="_('Edit Contact...')" oncommand="menuModel.onEditContact()"/>

      <menuseparator/>

      <menu label="_('Authorization')">
        <menupopup>
          <menuitem id="contact-authorization-ask" label="_('Ask To See Him')"
              oncommand="menuModel.askForSubscription()"/>
          <menuitem id="contact-authorization-allow" label="_('Authorize To See Me')"
              oncommand="menuModel.allowToSeeMe()"/>
          <menuitem id="contact-authorization-disallow" label="_('Cancel Authorization')"
              oncommand="menuModel.disallowToSeeMe()"/>
        </menupopup>
      </menu>

      <menuseparator/>

      <menuitem label="_('Show vCard...')" oncommand="menuModel.showVCard()"/>
      <menuitem id="contact-adhoc" label="_('Execute Command...')" oncommand="menuModel.onAdHocCommand()"/>
      <menu id="contact-adhoc-multi" label="_('Execute Command...')" hidden="true">
        <menupopup/>
      </menu>
      <menuitem label="_('Show History...')"
        oncommand="menuModel.onShowHistory()"/>
      <menuitem id="contact-send-file" label="_('Send File...')"
        oncommand="menuModel.onSendFile()"/>
    </popup>

    <popup id="resource-contextmenu" onpopupshowing="updateResourceContextMenu(this, event)">
      <menuitem label="_('Send Message...')" oncommand="menuModel.onOpenChat()"/>
      <menu id="resource-invite" label="_('Invite To')" hidden="true">
        <menupopup/>
      </menu>

      <menuseparator/>

      <menuitem label="_('Show vCard...')" oncommand="menuModel.showVCard()"/>
      <menuitem id="resource-adhoc" label="_('Execute Command...')" oncommand="menuModel.onAdHocCommand()"/>
      <menuitem label="_('Show History...')"
        oncommand="menuModel.onShowHistory()"/>
      <menuitem id="resource-send-file" label="_('Send File...')"
        oncommand="menuModel.onSendFile()"/>
    </popup>

    <popup id="conference-contextmenu" onpopupshowing="updateConferenceContextMenu(this, event)">
      <menuitem id="conference-invite" label="_('Invite Users To This Room...')"
          oncommand="menuModel.onInvite()"/>
      <menuitem id="conference-changeNick" label="_('Change Nick...')"
          oncommand="menuModel.onChangeNick()"/>
      <menuitem id="conference-changeSubject" label="_('Change Subject...')"
          oncommand="menuModel.onChangeSubject()"/>
      <menuitem id="conference-bookmark" label="_('Bookmark...')"
          oncommand="menuModel.onBookmark()"/>

      <menuseparator/>

      <menuitem id="conference-configuration" label="_('Configure...')"
          oncommand="menuModel.onRoomConfiguration()"/>
      <menuitem id="conference-edit-permissions" label="_('Edit Permissions...')"
          oncommand="menuModel.onEditPermissions()"/>

      <menuseparator/>

      <menuitem label="_('Show vCard...')"
        oncommand="menuModel.showVCard()"/>
      <menuitem label="_('Show History...')"
        oncommand="menuModel.onShowHistory()"/>

      <menuseparator/>

      <menuitem id="conference-leave" label="_('Leave Conference')"
          oncommand="menuModel.exitRoom()"/>
    </popup>

    <popup id="conferencemember-contextmenu" onpopupshowing="updateConferenceMemberContextMenu(this, event)">
      <menuitem id="conferencemember-chat-single" label="_('Send Message...')"
          oncommand="menuModel.onOpenChat()"/>

      <menuseparator/>

      <menuitem id="conferencemember-kick" label="_('Kick...')"
          oncommand="menuModel.onKick()"/>
      <menuitem id="conferencemember-ban" label="_('Ban...')"
          oncommand="menuModel.onBan()"/>
      <menu id="conferencemember-affiliations" label="_('Affiliation')">
        <menupopup>
          <menuitem id="conferencemember-affiliation-owner" name="affiliations"
            type="radio" label="_('Owner')"
            oncommand="menuModel.setAffiliation('owner')"/>
          <menuitem id="conferencemember-affiliation-admin" name="affiliations"
            type="radio" label="_('Administrator')"
            oncommand="menuModel.setAffiliation('admin')"/>
          <menuitem id="conferencemember-affiliation-member" name="affiliations"
            type="radio" label="_('Member')"
            oncommand="menuModel.setAffiliation('member')"/>
          <menuitem id="conferencemember-affiliation-none" name="affiliations"
            type="radio" label="_('None')"
            oncommand="menuModel.setAffiliation('none')"/>
        </menupopup>
      </menu>

      <menu id="conferencemember-roles" label="_('Role')">
        <menupopup>
          <menuitem id="conferencemember-role-moderator" name="roles"
            type="radio" label="_('Moderator')"
            oncommand="menuModel.setRole('moderator')"/>
          <menuitem id="conferencemember-role-participant" name="roles"
            type="radio" label="_('Participant')"
            oncommand="menuModel.setRole('participant')"/>
          <menuitem id="conferencemember-role-visitor" name="roles"
            type="radio" label="_('Visitor')"
            oncommand="menuModel.setRole('visitor')"/>
          <menuitem id="conferencemember-role-none" name="roles"
            type="radio" label="_('None')"
            oncommand="menuModel.setRole('none')"/>
        </menupopup>
      </menu>

      <menuseparator/>

      <menuitem label="_('Show vCard...')"
        oncommand="menuModel.showVCard()"/>
      <menuitem label="_('Show History...')"
        oncommand="menuModel.onShowHistory()"/>
      <menuitem id="conferencemember-send-file" label="_('Send File...')"
        oncommand="menuModel.onSendFile()"/>
    </popup>

    <popup id="gateway-contextmenu" onpopupshowing="updateGatewayMemberContextMenu(this, event)">
      <menuitem id="gateway-chat-single" label="_('Send Message...')"
          oncommand="menuModel.onOpenChat()"/>

      <menuseparator/>

      <menuitem id="gateway-login" label="_('Login')"
        oncommand="menuModel.login()"/>
      <menuitem id="gateway-logout" label="_('Logout')"
        oncommand="menuModel.logout()"/>

      <menuseparator/>

      <menuitem label="_('Show vCard...')"
        oncommand="menuModel.showVCard()"/>
      <menuitem label="_('Show History...')"
        oncommand="menuModel.onShowHistory()"/>

      <menuseparator/>

      <menuitem label="_('Remove...')"
        oncommand="menuModel.onRemove()"/>
    </popup>
  </popupset>
  <!-- #ifdef XULAPP -->
  <otsystray id="systray" type="minimizer"/>
  <!-- #endif -->
  <!-- #ifndef XULAPP
  <soundsplayer id="soundsplayer"/>
  <vbox id="hiddenContainer" collapsed="true">
    <html:iframe id="hiddenFrame"/>
  </vbox>
  // #endif -->
</window>
