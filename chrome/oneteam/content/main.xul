<?xml version="1.0"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/main/main.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/main/roster.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/main/conference-roster.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam-branding/locale/branding.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>

<?xul-overlay href="chrome://oneteam/content/overlays/rosterContextMenus.xul"?>

<window id="ot:main" windowtype="ot:main" title="OneTeam" class="no-verifier"
    onload="onLoad()" onclose="return onClose()" onunload="onUnload()"
    width="300" height="600"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <script type="text/javascript;version=1.7" src="JavaScript/moduleloader.js"/>

  <script type="text/javascript;version=1.7"><![CDATA[
    ML.importMod("prefs.js");
    ML.importMod("model/account.js");
    ML.importMod("views/roster.js");
    ML.importMod("views/gateway.js");
    ML.importMod("views/conference.js");
    ML.importMod("views/chattabs.js");

    var loginProgress;
    var globalRegToken = new RegistrationToken();

    function systrayInit() {
      document.getElementById("systray").hidden = !prefManager.getPref("chat.systray");
    }

    var setPresenceUpdater = {
      onPresenceChange: function() {
        this.chooser.value = account.currentPresence.show || "available";
        this.profile = account.currentPresence.profile;
        this.onIconSetChange();
      },

      onConnect: function()
      {
        document.getElementById("main-toolbox").hidden = !account.connected;
        document.getElementById("main-deck").selectedIndex = account.connected ? 1 : 0;
        document.getElementById("setPresence-jid").value = account.myResource.jid.getShortJID().toUserString();
        document.getElementById("setPresence-nick").value = account.myResource.visibleName;

        if (!this.rosterView) {
          this.rosterView = new RosterView(document.getElementById("contacts-list"));
          this.bookmarksMenuView =
            new BookmarksMenuView(document.getElementById("conference-menu-separator"));
          this.gatewaysMenuView =
            new GatewaysMenuView(document.getElementById("gateways-menu"));
          this.presenceProfilesView =
            new PresenceProfilesView(document.getElementById("setPresence-profile-dummy"),
                                     this.profileEnable);
          this.gatewaysButtonsView = new GatewaysToolbarButtons(document.getElementById("gateways-separator"));

          this.rosterView.hideOffline = document.getElementById("cmd_toggleShowOffline").
            getAttribute("checked") == "true";
        }
        if (!account.connected) {
          if (!quitSequence)
            chatTabsController.closeTabs();
        } else
          account.hasDiscoFeature("http://jabber.org/protocol/commands", false, function(a, val) {
            document.getElementById("cmd_adhoc").hidden = !val;
          });
      },

      onConnecting: function() {
        document.getElementById("login-signin").disabled = account.connecting;

        var progress = document.getElementById("login-progress");
        if (account.connecting) {
          // Workaround for mozilla bug 432028
          if (!progress) {
            var before = document.getElementById("before-login-progress");
            before.parentNode.insertBefore(loginProgress, before);
          } else
            progress.style.visibility = "visible";
        } else {
          // Workaround for mozilla bug 432028
          if (progress) {
            loginProgress = progress;
            progress.parentNode.removeChild(progress);
          }
        }
      },

      onCommand: function()
      {
        if (this._skip)
          return;

        if (this.chooser.value) {
          this.presence = this.chooser.value;
          account.setPresence(this.presence, null, null,
            this.profileEnable.checked ? this.profile : null, true);
        } else {
          this._skip = true;
          this.chooser.value = this.presence;
          this._skip = false;
          account.onCustomPresence(this.presence,
            this.profileEnable.checked ? this.profile : null);
        }
      },

      get profile()
      {
        if (this.profileEnable.checked)
          return this.profileChooser.selectedItem && this.profileChooser.selectedItem.model;
        return null;
      },

      set profile(val)
      {
        this.profileEnable.checked = val != null;
        if (!val)
          return val;
        var profiles = this.profileChooser.childNodes;
        for (var i = 0 ; i < profiles.length; i++)
          if (profiles[i].model == val) {
            this.profileChooser.selectedIndex = i;
            break;
          }
        return val;
      },

      onProfileCommand: function()
      {
        if (this._skip)
          return;
        if (this.profileChooser.value) {
          this.profileValue = this.profileChooser.value;

          if (this.profileEnable.checked)
            account.setPresence(this.presence, null, null, this.profile, true);
        } else {
          this._skip = true;
          this.profileChooser.value = this.profileValue;
          this._skip = false;

          account.onEditPresenceProfiles();
        }
      },

      onProfileEnable: function()
      {
          account.setPresence(this.presence, null, null,
            this.profileEnable.checked ? this.profile : null, true);
      },

      onProfilesChange: function()
      {
      },

      onContactsWithEventChanged: function()
      {

      },

      _updatePresenceIcon: function(_this, icons, idx) {
//        document.getElementById("setPresence-type-image").src =
// #ifdef XULAPP
          _this.systray.icon =
// #endif
          icons[idx.idx = (idx.idx+1)%icons.length];
      },

      updatePresenceIcon: function()
      {
        var icons = account.style.getStatusIcon(account.currentPresence.show,
                                               account.contactsWithEvents.length > 0);

        if (this._presenceIconBlinkTimeout)
          clearInterval(this._presenceIconBlinkTimeout);

        this._presenceIconBlinkTimeout = null;

        if (account.contactsWithEvents.length > 0) {
          if (icons.length > 1) {
            this._presenceIconBlinkTimeout =
              setInterval(this._updatePresenceIcon, 500, this, icons, {idx: 0});
          }
        } else
          icons = [icons];

        this._updatePresenceIcon(this, icons, {idx: -1});
      },

      onIconSetChange: function()
      {
        for each(var presenceType in ["available", "chat", "dnd", "away", "xa", "invisible"]) {
          var item = document.getElementById("setPresence-type-" + presenceType);
          document.getAnonymousElementByAttribute(item, "class", "menu-iconic-left").
            setAttribute("style", "display: block;");
          item.setAttribute("image", account.style.getStatusIcon(presenceType));
        }
        this.updatePresenceIcon();
      },

      onNickChange: function()
      {
        document.getElementById("setPresence-nick").value = account.myResource.visibleName;
      },

      init: function()
      {
        account.registerView(this.onConnect, this, "connected", globalRegToken);
        account.registerView(this.onConnecting, this, "connecting", globalRegToken);
        account.registerView(this.onPresenceChange, this, "currentPresence", globalRegToken);
        account.myResource.registerView(this.onNickChange, this, "visibleName", globalRegToken);
        account.style.registerView(this.onIconSetChange, this, "defaultSet", globalRegToken);

        this.chooser = document.getElementById("setPresence-type-chooser");
        this.profileChooser = document.getElementById("setPresence-profile-chooser");
        this.profileEnable = document.getElementById("setPresence-profile-enable");
// #ifdef XULAPP
        this.systray = document.getElementById("systray");
// #endif
        this.presence = this.chooser.value;

        this.onConnecting();

        if (account.connected) {
          this.onConnect();
          this.onIconSetChange();
          this.onNickChange();
        }
      },

      destroy: function() {
        if (!this.rosterView)
          return;
        this.rosterView.destroy();
        this.bookmarksMenuView.destroy();
        this.gatewaysMenuView.destroy();
        this.presenceProfilesView.destroy();
        this.gatewaysButtonsView.destroy();
      }
    };

    var soundsPlayer;

    function onLoad() {
      systrayInit();
      setPresenceUpdater.init();
      eventBoxHandler.init();
      document.getElementById("setPresence-avatar-image").model = account;
      soundsPlayer = document.getElementById("soundsplayer");

      var args = {};
      for each (var part in document.location.toString().replace(/.*?\?/, "").split("&")) {
        if (!part)
          continue;
        part = perlSplit(part, "=", 2);
        args[decodeURIComponent(part[0])] = part.length == 1 ? null : decodeURIComponent(part[1]);
      }

      var username = prefManager.getPref("chat.connection.user");
      var password = account.connectionInfo.pass;
      var savePass = account.connectionInfo.pass != null;

      if (args.username) {
        username = args.username;
        password = args.password || ""
        savePass = false;
      }

      document.getElementById("login-user").value = username || "";
      document.getElementById("login-pass").value = password || "";
      document.getElementById("login-savePass").checked = savePass;

      if (("login" in args || args.openchat || args.openconference) && username && password) {
        connect();
        if (args.openchat || args.openconference)
          account.registerView(function() {
            if (!account.connectionInitialized)
              return;

            if (args.openchat)
              account.getOrCreateContact(args.openchat).onOpenChat();
            if (args.openconference) {
              var jid = new JID(args.openconference);
              account.getOrCreateConference(jid.shortJID).joinRoom(function(){}, jid.resource || username);
            }
          }, null, "connectionInitialized", globalRegToken);
      }

// #ifdef XULAPP
/*
      chatTabsController.addEventListener("tab-added", function(event) {
        if (event.target.tabCount != 1)
          return;

        var splitter = document.getElementById("chats-splitter");
        splitter.collapsed = false;
        event.target.collapsed = false;
        splitter.previousSibling.flex = "0";
        splitter.previousSibling.setAttribute("width", self.innerWidth);
        self.resizeTo(self.outerWidth+(+splitter.getAttribute("rightWidth") || 500),
                      self.outerHeight);
      }, false);

      chatTabsController.addEventListener("tab-removed", function(event) {
        if (event.target.tabCount != 0)
          return;

        var splitter = document.getElementById("chats-splitter");
        var width = +splitter.previousSibling.getAttribute("width");

        splitter.collapsed = true;
        event.target.collapsed = true;

        splitter.previousSibling.flex = "1";
        splitter.setAttribute("rightWidth", self.outerWidth - width);

        self.resizeTo(self.outerWidth - self.innerWidth + width, self.outerHeight);
      }, false);
*/
// #endif
    }

    function onClose() {
    //#ifdef XULAPP
      if(document.getElementById("systray").hidden == false){
        setPresenceUpdater.systray.minimized = true;
        return false;
      }
    /*#else
      return true;
    //#endif */
    }

    function onUnload() {
      globalRegToken.unregisterFromAll();
      setPresenceUpdater.destroy();

      return;
    //#ifdef XULAPP
      var width = self.outerWidth;

      if (chatTabsController.tabCount) {
        var splitter = document.getElementById("chats-splitter");
        var w = +splitter.previousSibling.getAttribute("width");
        splitter.setAttribute("rightWidth", self.outerWidth - w);
        width = self.outerWidth - self.innerWidth + w;
      }

      document.documentElement.setAttribute("width", width)
      document.documentElement.setAttribute("height", self.outerHeight)
      document.persist(document.documentElement.getAttribute("id"), "width");
      document.persist(document.documentElement.getAttribute("id"), "height");
    /*#else
      document.getElementById("login-signin").disabled = true;
      if (window.account.connection)
        account.disconnect();
      closeAllWindows();
    //#endif */
    }
    //#ifndef XULAPP
    function onBeforeUnload() {
      return;
      if (account.connected)
        return "Are you sure you want to leave OneTeam?";
    }
    window.onbeforeunload = onBeforeUnload;
    //#endif

    var quitSequence = false;
    function quit() {
    //#ifdef XULAPP
      var promptSrv = Components.classes["@mozilla.org/embedcomp/prompt-service;1"].
        getService(Components.interfaces.nsIPromptService);

      var ask = prefManager.getPref("chat.general.ask_to_quit");
        if ((window.account.connection)&&(ask == true)) {
          var check = {value: ask};
          var result = promptSrv.confirmCheck(window, _("Quit prompt"), _("You are connected, do you really want to quit?"),
                                  "Ask me again", check);
          prefManager.setPref("chat.general.ask_to_quit", check.value);
          if(result == false)
            return;
        }

    //#endif

      quitSequence = true;

      if (window.account.connection)
        account.disconnect();

    //#ifdef XULAPP
      Components.classes['@mozilla.org/toolkit/app-startup;1'].
        getService(Components.interfaces.nsIAppStartup).
          quit(Components.interfaces.nsIAppStartup.eAttemptQuit);
    /*#else
      window.close();
    //#endif */
    }

    function connect() {
      account.setUserAndPass(document.getElementById("login-user").value,
        document.getElementById("login-pass").value,
        document.getElementById("login-savePass").checked);
      account.connect();
    }

    function _connect(event) {
      if(event.keyCode == 13)
        connect();
    }

    var eventBoxHandler = {
      eventNum: 0,

      init: function()
      {
        account.registerView(this.onEventsChanged, this, "contactsWithEvents", globalRegToken);

        if (account.contactsWithEvents.length)
          this.onEventsChanged();
      },

      hadEvents: false,
      onEventsChanged: function()
      {
        var hasEvents = account.contactsWithEvents.length > 0;
        if (this.hadEvents != hasEvents)
          setPresenceUpdater.updatePresenceIcon();

      //#ifdef XULAPP
        if (hasEvents)
          window.getAttention();
      //#endif
        this.hadEvents = hasEvents;
      },
    }

    function checkForUpdates() {
      var um = Components.classes["@mozilla.org/updates/update-manager;1"].
        getService(Components.interfaces.nsIUpdateManager);
      var prompter = Components.classes["@mozilla.org/updates/update-prompt;1"].
        createInstance(Components.interfaces.nsIUpdatePrompt);

      if (um.activeUpdate && um.activeUpdate.state == "pending")
        prompter.showUpdateDownloaded(um.activeUpdate);
      else
        prompter.checkForUpdates();
    }

    function refineSearch(el) {
      setPresenceUpdater.rosterView.searchTerm = el.value;
    }
  ]]></script>

  <comandset>
    <command id="cmd_addContact" key="key_addContact" oncommand="account.onAddContact()"/>
    <command id="cmd_joinRoom" key="key_joinRoom" oncommand="account.onJoinRoom()"/>
    <command id="cmd_manageBookmarks" oncommand="account.onManageBookmarks()"/>
    <command id="cmd_history" key="key_history" oncommand="account.showHistoryManager()"/>
    <command id="cmd_transfers" key="key_transfers" oncommand="account.showTransfersManager()"/>
    <command id="cmd_disco" key="key_disco" oncommand="account.showDisco()"/>
    <command id="cmd_adhoc" oncommand="account.onAdHocCommand()"/>
    <command id="cmd_disconnect" oncommand="account.disconnect()"/>
    <command id="cmd_quit" key="key_quit" oncommand="quit()"/>

    <command id="cmd_ourVCard" key="key_ourVCard" oncommand="account.showVCard()"/>
    <command id="cmd_changePassword" oncommand="account.onChangePassword()"/>
<!-- #ifdef XULAPP -->
    <command id="cmd_addons" oncommand="window.openDialog('chrome://mozapps/content/extensions/extensions.xul');"/>
<!-- #endif -->
    <command id="cmd_prefs" key="key_prefs" oncommand="account.showPrefs()"/>

    <command id="cmd_help" key="key_help" oncommand="openLink('http://www.process-one.net/en/oneteam/')"/>
    <command id="cmd_help_bot" oncommand="account.getOrCreateContact('bot.oneteam.im').onOpenChat()"/>
    <command id="cmd_bug" oncommand="openLink('https://support.process-one.net/browse/TEAM')"/>
    <command id="cmd_xmlConsole" key="key_xmlConsole" oncommand="account.showConsole()"/>
<!-- #ifdef DEBUG -->
<!-- #ifdef XULAPP -->
    <command id="cmd_jsConsole" oncommand='window.openDialog("chrome://global/content/console.xul", "_blank","chrome,dialog=no,all", "")'/>
<!-- #endif -->
    <command id="cmd_cmdConsole" oncommand='window.openDialogUniq("ot:command", "chrome://oneteam/content/command.xul", "chrome,dialog=no,all", "")'/>
    <command id="cmd_cmdVenkman" oncommand='window.openDialogUniq("mozapp:venkman", "chrome://venkman/content/venkman.xul", "chrome,dialog=no,all", "")'/>
    <command id="cmd_cmdDOMInspector" oncommand='window.openDialogUniq("mozapp:dominspector", "chrome://inspector/content/", "chrome,dialog=no,all", "")'/>
<!-- #endif -->
    <command id="cmd_chkUpdates" oncommand='checkForUpdates()'/>
    <command id="cmd_about" oncommand="account.showAbout()"/>

    <command id="cmd_toggleShowOffline" key="key_toggleShowOffline" persist="checked"
      oncommand="this.setAttribute('checked', setPresenceUpdater.rosterView.hideOffline =
        !setPresenceUpdater.rosterView.hideOffline)"/>
    <command id="cmd_toggleShowToolbar" checked="true"
      oncommand="var c = this.getAttribute('checked') == 'true'; this.setAttribute('checked', !c);
                 document.getElementById('actions-toolbar').collapsed = c"/>
  </comandset>

  <keyset>
<!-- #ifndef XPI -->
    <key id="key_quit" modifiers="control" key="Q" command="cmd_quit"/>
<!-- #endif -->
<!-- #ifdef DEBUG -->
    <key id="key_xmlConsole" modifiers="control" key="1" command="cmd_xmlConsole"/>
    <key id="key_cmdConsole" modifiers="control" key="2" command="cmd_cmdConsole"/>
    <key id="key_cmdVenkman" modifiers="control" key="3" command="cmd_cmdVenkman"/>
    <key id="key_cmdDOMInspector" modifiers="control" key="4" command="cmd_cmdDOMInspector"/>
<!-- #endif -->
  </keyset>

  <toolbox id="main-toolbox" class="toolbox-top" hidden="true">
    <toolbarpalette id="main-toolbarpalette">
      <toolbarbutton id="adduser-button" tooltiptext="_('Add new contact')"
            command="cmd_addContact"/>
      <toolbarbutton id="joinroom-button" tooltiptext="_('Join group chat room')"
            command="cmd_joinRoom"/>
      <toolbarseparator/>
      <toolbarbutton id="toggleshowoffline-button" tooltiptext="_('Toggle offline contacts visibility')"
            command="cmd_toggleShowOffline"/>
      <toolbarbutton id="disco-button" tooltiptext="_('Show service discovery')"
            command="cmd_disco"/>
      <toolbarbutton id="editgroups-button" tooltiptext="_('Preferences')"
            command="cmd_prefs"/>
      <toolbarseparator id="gateways-separator" hidden="true"/>
    </toolbarpalette>

    <toolbar class="chromeclass-menubar" type="menubar">
      <toolbaritem>
        <menubar style="border: 0; padding: 0; margin:0; -moz-appearance:none">
          <menu id="lagger-menu" label="_('_Actions')">
            <menupopup id="file-popup">
              <menuitem label="_('_Add Contact...')" command="cmd_addContact" key="key_addContact"/>

              <menu label="_('_Join Chat Room')">
                <menupopup>
                  <menuitem label="_('Join Chat Room...')" command="cmd_joinRoom" key="key_joinRoom"/>
                  <menuseparator/>
                  <menuseparator id="conference-menu-separator" hidden="true"/>
                  <menuitem label="_('_Manage Bookmarks...')" command="cmd_manageBookmarks"/>
                </menupopup>
              </menu>
              <menu label="_('_Gateways')" id="gateways-menu">
                <menupopup/>
              </menu>
              <menuseparator/>
              <menuitem label="_('Service _Discovery')" command="cmd_disco" key="key_disco"/>
              <menuitem label="_('_Server Commands...')" command="cmd_adhoc"/>
              <menuitem label="_('_History Manager...')" command="cmd_history" key="key_history"/>
              <menuitem label="_('File _Transfers...')" command="cmd_transfers" key="key_transfers"/>
              <menuseparator/>
              <menuitem label="_('Disconnect')" command="cmd_disconnect"/>
  <!-- #ifndef XPI -->
              <menuitem label="_('_Quit')" command="cmd_quit" key="key_quit"/>
  <!-- #endif -->
            </menupopup>
          </menu>
          <menu id="configuration-menu" label="_('_View')">
            <menupopup id="config-popup">
              <menuitem label="_('Show _Actions Toolbar')" command="cmd_toggleShowToolbar"
                        type="checkbox"/>
              <menuseparator/>
              <menuitem label="_('Hide _Offline Contacts')" command="cmd_toggleShowOffline"
                        type="checkbox"/>
            </menupopup>
          </menu>
          <menu id="configuration-menu" label="_('_Config')">
            <menupopup id="config-popup">
              <menuitem label="_('_Edit personal info...')" command="cmd_ourVCard" key="key_ourVCard"/>
              <menuitem label="_('_Change password...')" command="cmd_changePassword"/>
              <menuseparator/>
  <!-- #ifndef XPI -->
              <menuitem label="_('Add-ons...')" command="cmd_addons"/>
              <menuseparator/>
  <!-- #endif -->
              <menuitem label="_('_Preferences...')" command="cmd_prefs" key="key_prefs"/>
            </menupopup>
          </menu>
          <menu id="help-menu" label="_('_Help')">
            <menupopup id="help-popup">
              <menuitem label="_('Help _Bot')" command="cmd_help_bot"/>
              <menuitem label="_('_Documentation')" command="cmd_help"/>
              <menuitem label="_('_Report Bug')" command="cmd_bug"/>
              <menuitem label="_('XML _Console...')" command="cmd_xmlConsole"/>
  <!-- #ifdef DEBUG -->
  <!-- #ifdef XULAPP -->
              <menuitem label="_('JavaScript Console...')" command="cmd_jsConsole"/>
  <!-- #endif -->
              <menuitem label="_('Commands Console...')" command="cmd_cmdConsole"/>
  <!-- #endif -->
  <!-- #ifdef XULAPP -->
  <!-- #ifndef XPI -->
              <menuseparator/>
              <menuitem label="_('Check for Updates...')" command="cmd_chkUpdates"/>
  <!-- #endif -->
  <!-- #endif -->
              <menuseparator/>
              <menuitem label="_('About...')" command="cmd_about"/>
            </menupopup>
          </menu>
        </menubar>
      </toolbaritem>
    </toolbar>

    <toolbar id="actions-toolbar" class="toolbar-primary chromeclass-toolbar" defaultset="adduser-button,joinroom-button,toggleshowoffline-button,disco-button,editgroups-button,gateways-separator"/>
  </toolbox>

  <deck id="main-deck" flex="1" selectedIndex="0">
    <vbox id="login-box" flex="1" style="overflow: hidden">
      <vbox id="login-entries-box">
        <vbox id="login-user-box">
          <label control="login-user" value="_('Username')"/>
          <textbox id="login-user" flex="1"/>
        </vbox>
        <vbox id="login-pass-box">
          <label control="login-pass" value="_('Password')"/>
          <textbox id="login-pass" onkeypress="_connect(event)" type="password"/>
        </vbox>
        <hbox pack="center" id="before-login-progress">
  <!-- #ifdef XULAPP -->
          <checkbox id="login-savePass" checked="true" label="_('Remember password')"/>
  <!-- #else
          <checkbox id="login-savePass" checked="false" label="_('Remember password')"/>
  // #endif -->
        </hbox>
        <progressmeter id="login-progress" style="visibility: hidden" mode="undetermined"/>
        <hbox pack="center">
          <button id="login-signin" disabled="true" label="_('Sign In')" oncommand="connect()"/>
        </hbox>
      </vbox>
      <hbox id="login-actions-box">
        <button flex="1" id="login-add-account" crop="end" label="_('New Account')"
               oncommand='window.open("account.xul", "Startup settings", "chrome,centerscreen,dialog,resizable");'/>
        <button flex="1" id="login-settings" crop="end" label="_('Startup Settings')"
               oncommand="account.showPrefs();"/>
      </hbox>
      <spacer/>
      <hbox id="login-settings-box">
        <spacer flex="100"/>
<!-- #ifdef DEBUG -->
        <label flex="1" crop="end" class="text-link" value="_('Commands Console')"
          onclick="document.getElementById('cmd_cmdConsole').doCommand()"/>
<!-- #endif -->
      </hbox>
    </vbox>
    <vbox id="main-box" flex="1">
      <hbox flex="1">
        <!-- #ifdef XULAPP -->
        <groupbox id="roster-box" flex="1">
        <!-- #else
        <vbox width="250">
        // #endif -->
          <vbox id="presenceBoxLogo">
            <image />
          </vbox>
          <vbox id="setPresence-box">
            <hbox>
              <checkbox id="setPresence-profile-enable" disabled="true"
                oncommand="setPresenceUpdater.onProfileEnable()"/>
              <menulist id="setPresence-profile-chooser" flex="1"
                oncommand="setPresenceUpdater.onProfileCommand()">
                <menupopup>
                  <menuitem id="setPresence-profile-dummy" label="_('No profiles configured')"
                    disabled="true" value="dummy-profile"/>
                  <menuseparator/>
                  <menuitem id="setPresence-profile-create" label="_('Edit profiles...')"/>
                </menupopup>
              </menulist>
            </hbox>
            <spacer/>
            <hbox id="setPresence-presence-box" align="center">
              <avatar flex="0" id="setPresence-avatar-image" showBlankAvatar="true"/>
              <hbox flex="1" align="end">
                <vbox flex="1">
                  <label id="setPresence-jid" flex="1" crop="end"/>
                  <label id="setPresence-nick" flex="1" crop="end"/>
                </vbox>
                <menulist id="setPresence-type-chooser" flex="0" sizetopopup="none"
                          oncommand="setPresenceUpdater.onCommand()">
                  <menupopup>
                    <menuitem id="setPresence-type-available" label="_('Available')"
                        selected="true" value="available" class="menuitem-iconic"/>
                    <menuitem id="setPresence-type-chat" label="_('Available for chat')"
                        value="chat" class="menuitem-iconic"/>
                    <menuitem id="setPresence-type-dnd" label="_('Busy')"
                        value="dnd" class="menuitem-iconic"/>
                    <menuitem id="setPresence-type-away" label="_('Away')"
                        value="away" class="menuitem-iconic"/>
                    <menuitem id="setPresence-type-xa" label="_('Not available')"
                        value="xa" class="menuitem-iconic"/>
                    <menuitem id="setPresence-type-invisible" label="_('Invisible')"
                        value="invisible" class="menuitem-iconic"/>
                    <menuseparator/>
                    <menuitem id="setPresence-type-custom" label="_('Status message')"/>
                  </menupopup>
                </menulist>
              </hbox>
            </hbox>
          </vbox>
          <textbox type="search" oncommand="refineSearch(this)"
                   timeout="50" emptytext="_('Search')"/>
          <vbox id="contacts-list" flex="1" persist="hideOffline"/>
        </groupbox>
        <!-- #ifdef XULAPP -->
        <splitter id="chats-splitter" collapsed="true" persist="rightWidth"/>
        <chattabbox id="chats" collapsed="true" flex="1"/>
        <!-- #else
        <splitter id="chats-splitter"/>
        <chattabbox id="chats" flex="1"/>
        // #endif -->
      </hbox>
    </vbox>
  </deck>
  <!-- #ifdef XULAPP -->
  <otsystray id="systray" type="minimizer"/>
  <!-- #endif -->
  <!-- #ifndef XULAPP
  <soundsplayer id="soundsplayer"/>
  <vbox id="hiddenContainer" collapsed="true">
    <html:iframe id="hiddenFrame"/>
  </vbox>
  // #endif -->
</window>
