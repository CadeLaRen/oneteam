<?xml version="1.0"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/main/main.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/main/roster.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/main/conference-roster.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam-branding/locale/branding.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>

<?xul-overlay href="chrome://oneteam/content/overlays/rosterContextMenus.xul"?>
<?xul-overlay href="chrome://oneteam/content/overlays/macMenuOverlay.xul"?>

<window id="oneteam" windowtype="ot:main" title="_('$$branding$$:OneTeam')" class="no-verifier"
    onload="onLoad()" onclose="return onClose()" onunload="onUnload()"
    width="300" height="600" persist="screenX screenY"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <script type="text/javascript;version=1.7" src="JavaScript/moduleloader.js"/>

  <script type="text/javascript;version=1.7"><![CDATA[
    ML.importMod("prefs.js");
    ML.importMod("model/account.js");
    ML.importMod("views/roster.js");
    ML.importMod("views/gateway.js");
    ML.importMod("views/chattabs.js");
    ML.importMod("services/xpcom/utils.js");

    var loginProgress;
    var globalRegToken = new RegistrationToken();

    function selectLoginDeck(idx) {
      var sd = document.getElementById("login-state-deck");

      sd.childNodes[idx].collapsed = false;
      sd.childNodes[1-idx].collapsed = true;

      sd.selectedIndex = idx;
    }

    function selectStateDeck(idx) {
      var sd = document.getElementById("state-deck");

      sd.childNodes[idx].collapsed = false;
      sd.childNodes[1-idx].collapsed = true;

      sd.selectedIndex = idx;
    }

    var setPresenceUpdater = {

      onPresenceChange: function() {
        this.chooser.value = account.currentPresence.show || "available";
        this.profile = account.currentPresence.profile;
        this.statusText.value = account.currentPresence.status;
        this.statusText.hidden = !this.statusText.value;
        this.onIconSetChange();
      },

      _updateErrorMessage: function() {
          var em = document.getElementById("login-error-message");

          if (account.connectionErrorMessage) {
            em.textContent = account.connectionErrorMessage;
            em.parentNode.hidden = false;
          } else
            em.parentNode.hidden = true;
      },

      onConnect: function()
      {
        document.getElementById("actions-toolbar").hidden = !account.connected;
        document.getElementById("contacts-list").setAttribute("connected", !!account.connected);

        if (!account.connected)
          selectLoginDeck(0);

        selectStateDeck(account.connected ? 1 : 0);

        if (!account.connected) {
          this._updateErrorMessage();

          return;
        }

        document.getElementById("setPresence-jid").value = account.myResource.jid.getShortJID().toUserString();
        document.getElementById("setPresence-nick").value = account.myResource.visibleName;
      },

      onConnecting: function() {
        this._updateErrorMessage();
        if (account.connecting) {
          document.getElementById("connection-state").textContent = _("Connecting");
          selectStateDeck(0);
          selectLoginDeck(1);
        }
      },

      onReconnect: function() {
        this._updateErrorMessage();
        if (account.reconnectMessage) {
          document.getElementById("connection-state").textContent = account.reconnectMessage;
          selectStateDeck(0);
          selectLoginDeck(1);
        } else if (account.connecting)
          this.onConnecting();
        else
          this.onConnect();
      },

      onCommand: function()
      {
        if (this._skip)
          return;

        if (this.chooser.value) {
          this.presence = this.chooser.value;
          account.setPresence(this.presence, account.currentPresence.status, null, null, true);
        } else {
          this._skip = true;
          this.chooser.value = this.presence;
          this._skip = false;
          account.onCustomPresence(this.presence, null);
        }
      },

      _updatePresenceIcon: function(_this, icons, idx) {
        if (_this.systray)
          _this.systray.icon = icons[idx.idx = (idx.idx+1)%icons.length];
      },

      updatePresenceIcon: function()
      {
        var icons = account.style.getStatusIcon(account.currentPresence.show,
                                               account.contactsWithEvents.length > 0);

        if (this._presenceIconBlinkTimeout)
          clearInterval(this._presenceIconBlinkTimeout);

        this._presenceIconBlinkTimeout = null;

        if (account.contactsWithEvents.length > 0) {
          if (this.systray && icons.length > 1) {
            this._presenceIconBlinkTimeout =
              setInterval(this._updatePresenceIcon, 500, this, icons, {idx: 0});
          }
        } else
          icons = [icons];

        this._updatePresenceIcon(this, icons, {idx: -1});
      },

      onIconSetChange: function()
      {
        for each(var presenceType in ["available", "chat", "dnd", "away", "xa", "invisible"]) {
          var item = document.getElementById("setPresence-type-" + presenceType);
          document.getAnonymousElementByAttribute(item, "class", "menu-iconic-left").
            setAttribute("style", "display: block;");
          item.setAttribute("image", account.style.getStatusIcon(presenceType));
        }
        this.updatePresenceIcon();
      },

      onNickChange: function()
      {
        document.getElementById("setPresence-nick").value = account.myResource.visibleName;
      },

      init: function()
      {
        account.registerView(this.onConnect, this, "connected", globalRegToken);
        account.registerView(this.onConnecting, this, "connecting", globalRegToken);
        account.registerView(this.onReconnect, this, "reconnectMessage", globalRegToken);
        account.registerView(this.onPresenceChange, this, "currentPresence", globalRegToken);
        account.myResource.registerView(this.onNickChange, this, "visibleName", globalRegToken);
        account.style.registerView(this.onIconSetChange, this, "defaultSet", globalRegToken);

        this.chooser = document.getElementById("setPresence-type-chooser");
        this.systray = document.getElementById("systray");
        this.statusText = document.getElementById("status-text");
        this.presence = this.chooser.value;

        this.rosterView = new RosterView(document.getElementById("contacts-list"));
        this.gatewaysButtonsView = new GatewaysToolbarButtons(document.getElementById("gateways-separator"));

        toggleShowOffline(!prefManager.getPref("chat.roster.showoffline"));

        this.updatePresenceIcon();

        this.onConnecting();

        if (this.systray)
          this.systray.hidden = !prefManager.getPref("chat.systray");

        if (account.connected) {
          this.onConnect();
          this.onIconSetChange();
          this.onNickChange();
          this.onPresenceChange();
        }
      },

      destroy: function() {
        if (!this.rosterView)
          return;
        this.rosterView.destroy();
        this.gatewaysButtonsView.destroy();
      }
    };

    function onLoad() {
      setPresenceUpdater.init();
      eventBoxHandler.init();
      document.getElementById("setPresence-avatar-image").model = account;

      var username = prefManager.getPref("chat.connection.user");
      var password = account.connectionInfo.pass;
      var savePass = account.connectionInfo.pass != null;

      document.getElementById("login-user").value = username || "";
      document.getElementById("login-pass").value = password || "";
      document.getElementById("login-savePass").checked = savePass;

      account.resetPassInRoster = new Callback(function() {
        this.value = account.connectionInfo.pass;
      }, document.getElementById("login-pass"));
    }

    var origClose = window.close;
    window.close = function() {
      if (onClose())
        origClose.call(window);
    }

    function onClose() {
      var st = document.getElementById("systray")
      if (!st.hidden && st._systray)
        setPresenceUpdater.systray.minimized = true;

      return window.navigator.platform.indexOf("Mac") == 0;
    }

    function onUnload() {
      globalRegToken.unregisterFromAll();
      setPresenceUpdater.destroy();

      //return;
      var width = self.outerWidth;

      /*if (!chatTabsController.isEmpty) {
        var splitter = document.getElementById("chats-splitter");
        var w = +splitter.previousSibling.getAttribute("width");
        splitter.setAttribute("rightWidth", self.outerWidth - w);
        width = self.outerWidth - self.innerWidth + w;
      }*/

      document.documentElement.setAttribute("width", width)
      document.documentElement.setAttribute("height", self.outerHeight)
      document.persist(document.documentElement.getAttribute("id"), "width");
      document.persist(document.documentElement.getAttribute("id"), "height");
    }

    function connect() {
      account.setUserAndPass(document.getElementById("login-user").value,
        document.getElementById("login-pass").value,
        document.getElementById("login-savePass").checked);
      account.connect();
    }

    function _connect(event) {
      if(event.keyCode == 13)
        connect();
    }

    var eventBoxHandler = {
      eventNum: 0,

      init: function()
      {
        account.registerView(this.onEventsChanged, this, "contactsWithEvents", globalRegToken);

        if (account.contactsWithEvents.length)
          this.onEventsChanged();
      },

      hadEvents: false,
      onEventsChanged: function()
      {
        var hasEvents = account.contactsWithEvents.length > 0;
        if (this.hadEvents != hasEvents)
          setPresenceUpdater.updatePresenceIcon();

        if (hasEvents)
          window.getAttention();
        this.hadEvents = hasEvents;
      },
    }

    function refineSearch(el) {
      setPresenceUpdater.rosterView.searchTerm = el.value;
    }

    function toggleShowOffline(value) {
      var rv = setPresenceUpdater.rosterView;

      if (value == null)
        value = !setPresenceUpdater.rosterView.hideOffline;
      setPresenceUpdater.rosterView.hideOffline = value;

      document.getElementById("cmd_toggleShowOffline").
        setAttribute("checked", !value);
      prefManager.setPref("chat.roster.showoffline", !value);
    }
  ]]></script>
  <commandset>
    <command id="cmd_toggleShowOffline" key="key_toggleShowOffline"
             oncommand="toggleShowOffline()"/>
    <command id="cmd_toggleShowToolbar" checked="true"
             oncommand="var c = this.getAttribute('checked') == 'true'; this.setAttribute('checked', !c);
                        document.getElementById('actions-toolbar').collapsed = c"/>
<!-- #ifdef XPI
    <command id="cmd_closeWindow" oncommand="window.frameElement.ownerDocument.
        defaultView.toggleSidebar('showOneteam')"/>
//   #else -->
    <command id="cmd_closeWindow" oncommand="window.close()"/>
<!-- #endif -->
  </commandset>

  <group id="default-group"/>

<!-- #ifndef XPI -->
  <commandset id="menu_window_commands"/>
  <commandset id="editMenuCommands"/>

  <keyset>
    <key id="key_closeWindow" key="w" modifiers="accel" command="cmd_closeWindow"/>
    <key id="key_rosterSearch" key="f" modifiers="accel" oncommand="document.getElementById('search').focus()"/>
  </keyset>

  <keyset id="extraKeys"/>
  <keyset id="menu_window_keys"/>
  <keyset id="editMenuKeys"/>
<!-- #endif -->

  <toolbox id="main-toolbox" class="toolbox-top">
    <toolbarpalette id="main-toolbarpalette">
      <toolbarbutton id="initiate-chat-button" tooltiptext="_('Initiate new chat')"
            command="cmd_initateChat"/>
      <toolbarbutton id="join-room-button" tooltiptext="_('Join chat room')"
            command="cmd_joinRoom"/>
      <toolbarbutton id="presences-tab-button" tooltiptext="_('Status messages overview')"
            command="cmd_presences_tab"/>
      <toolbarbutton id="add-user-button" tooltiptext="_('Add new contact')"
            command="cmd_addContact"/>
      <toolbarbutton id="prefs-button" tooltiptext="_('Preferences')"
            command="cmd_prefs"/>
      <toolbarseparator id="gateways-separator" hidden="true"/>
    </toolbarpalette>

    <toolbar class="chromeclass-menubar" type="menubar">
      <toolbaritem>
        <menubar style="border: 0; padding: 0; margin:0; -moz-appearance:none">
          <menu id="menu-file">
            <menupopup id="file-popup">
              <menuseparator id="close-menuseparator"/>
              <menuitem label="_('Close Window')" command="cmd_closeWindow" key="key_closeWindow"/>
            </menupopup>
          </menu>
<!-- #ifndef XPI -->
          <menu id="menu_edit"/>
<!-- #endif -->
          <menu id="menu-view" label="_('_View')">
            <menupopup id="view-popup">
              <menuitem label="_('Show _Actions Toolbar')" command="cmd_toggleShowToolbar"
                        type="checkbox"/>
              <menuseparator/>
              <menuitem label="_('Show _Offline Contacts')" command="cmd_toggleShowOffline"
                        type="checkbox"/>
            </menupopup>
          </menu>
          <menu id="menu-account"/>
<!-- #ifndef XPI -->
          <menu id="menu_window"/>
<!-- #endif -->
          <menu id="menu-help"/>
        </menubar>
      </toolbaritem>
    </toolbar>

    <toolbar id="actions-toolbar" class="toolbar-primary chromeclass-toolbar"
             defaultset="initiate-chat-button,join-room-button,presences-tab-button,separator,add-user-button,separator,prefs-button,gateways-separator" hidden="true"/>
  </toolbox>

  <vbox id="main-box" flex="1">
    <hbox flex="1">
      <vbox id="roster-box" flex="1">
        <deck id="state-deck" selectedIndex="0">
          <vbox id="login-info-box">
            <hbox id="login-error-box" align="center" hidden="true">
              <image class="throbber"/>
              <description id="login-error-message"/>
            </hbox>
            <deck id="login-state-deck">
              <grid>
                <columns>
                  <column/>
                  <column flex="1"/>
                </columns>
                <rows>
                  <row>
                    <label control="login-user" value="_('Username')"/>
                    <textbox id="login-user" flex="1"/>
                  </row>
                  <row>
                    <label control="login-pass" value="_('Password')"/>
                    <textbox id="login-pass" onkeypress="_connect(event)" type="password"/>
                  </row>
                  <vbox align="center">
                    <checkbox id="login-savePass" checked="true" label="_('Remember password')"/>
                  </vbox>
                  <vbox align="center">
                    <button id="login-signin" label="_('Sign In')" oncommand="connect()"/>
                  </vbox>
                </rows>
              </grid>
              <vbox>
                <hbox align="center">
                  <image class="throbber"/>
                  <description id="connection-state">_('Connecting')</description>
                </hbox>
                <vbox align="center">
                  <button id="login-signoff" label="_('Stop Connecting')" oncommand="account.disconnect()"/>
                </vbox>
              </vbox>
            </deck>
          </vbox>
          <hbox id="setPresence-box" context="user-contextmenu" align="center">
            <vbox id="setPresence-avatar-box">
              <avatar id="setPresence-avatar-image" showBlankAvatar="true"
                      side="48" squareBordered="true"/>
            </vbox>
            <vbox flex="1">
              <hbox flex="1" align="center">
                <vbox flex="1">
                  <label id="setPresence-jid" flex="1" crop="end"/>
                  <label id="setPresence-nick" flex="1" crop="end"/>
                </vbox>
                <menulist id="setPresence-type-chooser" flex="0" sizetopopup="none"
                          oncommand="setPresenceUpdater.onCommand()">
                  <menupopup>
                    <menuitem id="setPresence-type-available" label="_('Available')"
                        selected="true" value="available" class="menuitem-iconic-noaccel"/>
                    <menuitem id="setPresence-type-chat" label="_('Available for chat')"
                        value="chat" class="menuitem-iconic-noaccel"/>
                    <menuitem id="setPresence-type-dnd" label="_('Busy')"
                        value="dnd" class="menuitem-iconic-noaccel"/>
                    <menuitem id="setPresence-type-away" label="_('Away')"
                        value="away" class="menuitem-iconic-noaccel"/>
                    <menuitem id="setPresence-type-xa" label="_('Not available')"
                        value="xa" class="menuitem-iconic-noaccel"/>
                    <menuitem id="setPresence-type-invisible" label="_('Invisible')"
                        value="invisible" class="menuitem-iconic-noaccel"/>
                    <menuseparator/>
                    <menuitem id="setPresence-type-custom" label="_('Status message')"/>
                  </menupopup>
                </menulist>
              </hbox>
              <label crop="end" id="status-text"/>
            </vbox>
          </hbox>
        </deck>
        <textbox id="search" type="search" oncommand="refineSearch(this)"
                 timeout="50" emptytext="_('Search')"/>
        <description id="extra-message" hidden="true"/>
        <vbox id="contacts-list" flex="1"/>
      </vbox>
      <!--
      <splitter id="chats-splitter" collapsed="true" persist="rightWidth"/>
      <chattabbox id="chats" collapsed="true" flex="1"/>
      -->
    </hbox>
  </vbox>
<!-- #ifndef XPI -->
  <otsystray id="systray" type="minimizer"/>
<!-- #endif XPI -->
  <vbox id="hiddenContainer" collapsed="true">
    <html:iframe id="hiddenFrame"/>
  </vbox>
</window>
