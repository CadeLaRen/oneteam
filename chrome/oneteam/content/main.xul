<?xml version="1.0" encoding="ISO-8859-1"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/main/main.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>

<window id="ot:main" title="OneTeam"
    onload="onLoad()" onclose="return onClose()" onunload="onUnload()"
    persist="width height" width="170" height="450"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <script type="text/javascript" src="lib/jsjac/xmlextras.js"/>
  <script type="text/javascript" src="lib/jsjac/jsextras.js"/>
  <script type="text/javascript" src="lib/jsjac/crypt.js"/>
  <!--<script type="text/javascript" src="lib/jsjac/json.js"/>-->
  <script type="text/javascript" src="lib/jsjac/JSJaCConfig.js"/>
  <script type="text/javascript" src="lib/jsjac/JSJaCCookie.js"/>
  <script type="text/javascript" src="lib/jsjac/JSJaCJID.js"/>
  <script type="text/javascript" src="lib/jsjac/JSJaCBuilder.js"/>
  <script type="text/javascript" src="lib/jsjac/JSJaCPacket.js"/>
  <script type="text/javascript" src="lib/jsjac/JSJaCError.js"/>
  <script type="text/javascript" src="lib/jsjac/JSJaCKeys.js"/>
  <script type="text/javascript" src="lib/jsjac/JSJaCConnection.js"/>
  <script type="text/javascript" src="lib/jsjac/JSJaCHttpPollingConnection.js"/>
  <script type="text/javascript" src="lib/jsjac/JSJaCHttpBindingConnection.js"/>
  <script type="text/javascript" src="lib/jsjac/JSJaCConsoleLogger.js"/>

  <script type="text/javascript;version=1.7" src="JavaScript/roles.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/exceptions.js"/>
  <!-- #ifdef XULAPP -->
  <script type="text/javascript;version=1.7" src="JavaScript/file.js"/>
  <!-- #endif -->
  <script type="text/javascript;version=1.7" src="JavaScript/dateutils.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/utils.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/colorutils.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/l10n.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/prefs.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/cache.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/modeltypes.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/xmpptypes.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/disco.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/notification.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/styles.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/tabcompletion.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/dataforms.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/services/manager.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/services/rosterx.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/services/adhoc.js"/>
<!-- #ifdef XULAPP -->
  <script type="text/javascript;version=1.7" src="JavaScript/socks5.js"/>
<!-- #else
  <script type="text/javascript;version=1.7" src="JavaScript/otbs.js"/>
// #endif -->
  <script type="text/javascript;version=1.7" src="JavaScript/filetransfer.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/model/presence.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/model/messages.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/history.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/model/roster.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/model/gateway.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/model/conference.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/model/account.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/views/roster.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/views/conference.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/views/gateway.js"/>

  <script type="text/javascript" src="chrome://global/content/nsDragAndDrop.js"/>
  <script type="text/javascript" src="chrome://global/content/nsTransferable.js"/>

  <script type="text/javascript;version=1.7"><![CDATA[
    function updateContactContextMenu(menu, event) {
      if (event.target != menu)
        return;

      var cs = document.getElementById("contact-chat-single");
      var cm = document.getElementById("contact-chat-multi");
      var im = document.getElementById("contact-invite");
      var sf = document.getElementById("contact-send-file");
      var ah = document.getElementById("contact-adhoc");
      var ahm = document.getElementById("contact-adhoc-multi");

      sf.hidden = !menu.model.activeResource || !socks5Service.canSendTo(menu.model.activeResource);

      cm.hidden = !(cs.hidden = menu.model.resources.length > 1);
      if (cs.hidden) {
        var list = cm.firstChild;
        while (list && list.firstChild)
          list.removeChild(list.firstChild);
        for (var i = 0; i < menu.model.resources.length; i++) {
          var item = document.createElement("menuitem");
          item.model = menu.model.resources[i];

          item.setAttribute("label", item.model.jid.resource+
            (item.model.presence.priority == null ?
             "" : " ("+item.model.presence.priority+")"));
          item.setAttribute("oncommand", "this.model.onOpenChat()");

          list.appendChild(item);
        }
      }

      im.hidden = !account.conferences.length;
      if (!im.hidden) {
        list = im.firstChild;
        while (list && list.firstChild)
          list.removeChild(list.firstChild);
        for (var i = 0; i < account.conferences.length; i++) {
          var item = document.createElement("menuitem");
          item.setAttribute("label", account.conferences[i].jid);
          item.setAttribute("oncommand", "this.model.invite(this.contact)");
          item.model = account.conferences[i];
          item.contact = menu.model.jid;
          list.appendChild(item);
        }
      }

      var ahr = [];
      for (var res in menu.model.resourcesIterator()) {
        if (res.hasDiscoFeature("http://jabber.org/protocol/commands"))
          ahr.push(res);
      }
      ah.hidden = ahr.length != 1 || ahr[0] != menu.model.activeResource;
      ahm.hidden = !ah.hidden || ahr.length == 0;
      if (!ahm.hidden) {
        list = ahm;
        while (list && list.firstChild)
          list.removeChild(list.firstChild);
        for (i = 0; i < ahr.length; i++) {
          var item = document.createElement("menuitem");
          item.model = ahr[i];

          item.setAttribute("label", _("{0} ({1})", ahr[i].jid.resource,
                                       ahr[i].presence.priority || 0));
          item.setAttribute("oncommand", "this.model.onAdHocCommand()");

          list.appendChild(item);
        }
      }

      document.getElementById("contact-authorisation-ask").
        setAttribute("disabled", menu.model.canSeeHim);
      document.getElementById("contact-authorisation-allow").
        setAttribute("disabled", menu.model.canSeeMe);
      document.getElementById("contact-authorisation-disallow").
        setAttribute("disabled", !menu.model.canSeeMe);
    }

    function updateResourceContextMenu(menu, event) {
      if (event.target != menu)
        return;

      var im = document.getElementById("resource-invite");
      var sf = document.getElementById("resource-send-file");
      var ah = document.getElementById("resource-adhoc");

      sf.hidden = !socks5Service.canSendTo(menu.model);

      im.hidden = !account.conferences.length;
      if (!im.hidden) {
        list = im.firstChild;
        while (list && list.firstChild)
          list.removeChild(list.firstChild);
        for (var i = 0; i < account.conferences.length; i++) {
          var item = document.createElement("menuitem");
          item.setAttribute("label", account.conferences[i].jid);
          item.setAttribute("oncommand", "this.model.invite(this.contact)");
          item.model = account.conferences[i];
          item.contact = menu.model.jid;
          list.appendChild(item);
        }
      }

      ah.hidden = !menu.model.hasDiscoFeature("http://jabber.org/protocol/commands");
    }

    function updateConferenceMemberContextMenu(menu, event) {
      if (event.target != menu)
        return;

      var confMemb = menu.model;
      var conf = confMemb.contact;

      var kick = document.getElementById("conferencemember-kick");
      var ban = document.getElementById("conferencemember-ban");
      var affiliations = document.getElementById("conferencemember-affiliations");
      var roles = document.getElementById("conferencemember-roles");

      kick.previousSibling.hidden = kick.hidden = ban.hidden = !confMemb.canBeKicked;

      affiliations.hidden = !(conf.iAmAdmin && conf.myResource.isGt(confMemb) || conf.iAmOwner);
      roles.hidden = confMemb.isAdmin || !conf.iAmModerator;

      for each (var affiliation in "owner admin member none".split(" ")) {
        var el = document.getElementById("conferencemember-affiliation-"+affiliation);
        el.hidden = !conf.iAmOwner && conf.myResource.cmp(affiliation, true) >= 0;
        el.setAttribute("checked", confMemb.affiliation == affiliation);
      }

      for each (var role in "moderator participant visitor none".split(" ")) {
        var el = document.getElementById("conferencemember-role-"+role);
        el.hidden = confMemb.isAdmin || (role == "moderator" && conf.iAmModerator && !conf.iAmAdmin);
        el.setAttribute("checked", confMemb.role == role);
      }
    }

    function updateConferenceContextMenu(menu, event) {
      if (event.target != menu)
        return;

      var configuration = document.getElementById("conference-configuration");
      var permissions = document.getElementById("conference-edit-permissions");

      configuration.hidden = !menu.model.iAmOwner;
      configuration.previousSibling.hidden = permissions.hidden =
        !menu.model.iAmAdmin;
    }

    function updateGatewayMemberContextMenu(menu, event) {
      if (event.target != menu)
        return;

      document.getElementById("gateway-login").disabled = !!menu.model.activeResource;
      document.getElementById("gateway-logout").disabled = !menu.model.activeResource;
    }

    var setPresenceUpdater = {
      onPresenceChange: function() {
        this.chooser.value = account.currentPresence.show || "available";
        this.onIconSetChange();
      },

      onConnect: function()
      {
        document.getElementById("main-deck").selectedIndex = account.connected ? 1 : 0;
        document.getElementById("setPresence-nick").value = account.connectionInfo.user;
        document.getElementById("login-progress").style.visibility = "hidden";
        document.getElementById("login-signin").disabled = false;
        document.getElementById("roster").selectedIndex = 0;
        if (!this.rosterView) {
          this.rosterView = new RosterView(document.getElementById("contacts-list"));
          this.conferencesView = new ConferencesView(document.getElementById("conferences-list"));
          this.bookmarksMenuView =
            new BookmarksMenuView(document.getElementById("conference-menu-separator"));
          this.gatewaysMenuView =
            new GatewaysMenuView(document.getElementById("gateways-menu"));
          this.presenceProfilesView =
            new PresenceProfilesView(document.getElementById("setPresence-profile-dummy"),
                                     this.profileEnable);
          this.gatewaysButtonsView = new GatewaysToolbarButtons(document.getElementById("gateways-separator"));
          document.getElementById("cmd_toggleShowOffline").
            setAttribute("checked", this.rosterView.hideOffline);
          document.getElementById("conference-contextmenu").view = this.conferencesView;
          document.getElementById("conferencemember-contextmenu").view = this.conferencesView;
        }
        if (!account.connected)
          chatTabsController.closeTabs();
        else
          account.hasDiscoFeature("http://jabber.org/protocol/commands", false, function(a, val) {
            document.getElementById("cmd_adhoc").hidden = !val;
          });

      },

      onCommand: function()
      {
        if (this._skip)
          return;

        if (this.chooser.value) {
          this.presence = this.chooser.value;
          account.setPresence(this.presence, null, null,
            this.profileEnable.checked ? this.profile : null, true);
        } else {
          this._skip = true;
          this.chooser.value = this.presence;
          this._skip = false;
          account.onCustomPresence(this.presence,
            this.profileEnable.checked ? this.profile : null);
        }
      },

      get profile()
      {
        if (this.profileEnable.checked)
          return this.profileChooser.selectedItem && this.profileChooser.selectedItem.model;
        return null;
      },

      onProfileCommand: function()
      {
        if (this._skip)
          return;
        if (this.profileChooser.value) {
          this.profileValue = this.profileChooser.value;

          if (this.profileEnable.checked)
            account.setPresence(this.presence, null, null, this.profile, true);
        } else {
          this._skip = true;
          this.profileChooser.value = this.profileValue;
          this._skip = false;

          account.onEditPresenceProfiles();
        }
      },

      onProfileEnable: function(enabled)
      {
          account.setPresence(this.presence, null, null,
            this.profileEnable.checked ? this.profile : null, true);
      },

      onProfilesChange: function()
      {
      },

      updatePresenceIcon: function()
      {
        document.getElementById("setPresence-type-image").src =
// #ifdef XULAPP
          this.systray.icon =
// #endif
          account.style.getStatusIcon(account.currentPresence.show);
      },

      onIconSetChange: function()
      {
        for each(var presenceType in ["available", "chat", "dnd", "away", "xa", "invisible"]) {
          var item = document.getElementById("setPresence-type-" + presenceType);
          document.getAnonymousElementByAttribute(item, "class", "menu-iconic-left").
            setAttribute("style", "display: block;");
          item.setAttribute("image", account.style.getStatusIcon(presenceType));
        }
        this.updatePresenceIcon();
      },

      init: function()
      {
        account.registerView(this.onConnect, this, "connected");
        account.registerView(this.onPresenceChange, this, "currentPresence");
        account.style.registerView(this.onIconSetChange, this, "defaultSet");

        this.chooser = document.getElementById("setPresence-type-chooser");
        this.profileChooser = document.getElementById("setPresence-profile-chooser");
        this.profileEnable = document.getElementById("setPresence-profile-enable");
// #ifdef XULAPP
        this.systray = document.getElementById("systray");
        this.systray.icon = account.style.getStatusIcon(account.currentPresence.show);
// #endif
        this.presence = this.chooser.value;
      }
    };

    var chatTabsController;
    var soundsPlayer;

    function onLoad() {
      setPresenceUpdater.init();
      eventBoxHandler.init();
      document.getElementById("setPresence-avatar-image").model = account;
      chatTabsController = document.getElementById("chats");
      soundsPlayer = document.getElementById("soundsplayer");
      document.getElementById("login-signin").disabled = false;

      var args = {};
      for each (var part in document.location.toString().replace(/.*?\?/, "").split("&")) {
        if (!part)
          continue;
        part = part.split("=", 2);
        args[decodeURIComponent(part[0])] = part.length == 1 ? null : decodeURIComponent(part[1]);
      }

      var username = account.connectionInfo.user;
      var password = account.connectionInfo.pass;
      var savePass = account.connectionInfo.pass != null;

      if (args.username) {
        username = args.username;
        password = args.password || ""
        savePass = false;
      }

      document.getElementById("login-user").value = username;
      document.getElementById("login-pass").value = password;
      document.getElementById("login-savePass").checked = savePass;

      if (("login" in args) && username && password)
        connect();

// #ifdef XULAPP
      chatTabsController.addEventListener("tab-added", function(event) {
        if (event.target.tabCount != 1)
          return;

        var splitter = document.getElementById("chats-splitter");
        splitter.collapsed = false;
        event.target.collapsed = false;
        splitter.previousSibling.flex = "0";
        splitter.previousSibling.setAttribute("width", self.innerWidth);
        self.resizeTo(self.outerWidth+(+splitter.getAttribute("rightWidth") || 500),
                      self.outerHeight);
      }, false);

      chatTabsController.addEventListener("tab-removed", function(event) {
        if (event.target.tabCount != 0)
          return;

        var splitter = document.getElementById("chats-splitter");
        var width = +splitter.previousSibling.getAttribute("width");

        splitter.collapsed = true;
        event.target.collapsed = true;
        splitter.previousSibling.flex = "1";
        splitter.setAttribute("rightWidth", self.outerWidth - width);

        self.resizeTo(self.outerWidth - self.innerWidth + width, self.outerHeight);
      }, false);
// #endif
    }

    function onClose() {
    //#ifdef XULAPP
      setPresenceUpdater.systray.minimized = true;
      return false;
    /*#else
      return true;
    //#endif */
    }

    function onUnload() {
    //#ifndef XULAPP
      document.getElementById("login-signin").disabled = true;
      if (window.con)
        window.con.disconnect();
      closeAllWindows();
    //#endif */
    }

    function onBeforeUnload() {
      if (account.connected)
        return "Are you sure you want to leave OneTeam?";
    }
    window.onbeforeunload = onBeforeUnload;

    function quit() {
      if (window.con)
        window.con.disconnect();

    //#ifdef XULAPP
      Components.classes['@mozilla.org/toolkit/app-startup;1'].
        getService(Components.interfaces.nsIAppStartup).
          quit(Components.interfaces.nsIAppStartup.eAttemptQuit);
    /*#else
      window.close();
    //#endif */
    }

    function connect() {
      document.getElementById("login-progress").style.visibility = "visible";
      document.getElementById("login-signin").disabled = true;

      account.setUserAndPass(document.getElementById("login-user").value,
        document.getElementById("login-pass").value,
        document.getElementById("login-savePass").checked);
      account.connect();
    }

    eventBoxHandler = {
      init: function()
      {
        this.eventBox = document.getElementById("eventBox");
        this.title = this.eventBox.getElementsByTagName("div")[0];
        this.tooltip = document.getElementById("eventBoxTooltip").
          getElementsByTagName("div")[0];
        account.registerView(this.onEventsChanged, this, "events");
      },

      onEventsChanged: function()
      {
        this.eventBox.collapsed = account.events.length == 0;

        if (account.events.length) {
          this.title.innerHTML = _("You have {0} new {0, plurals, message, messages}",
                                   account.events.length);
          this.tooltip.innerHTML = account.events[0][0];
        }
      },

      onClick: function()
      {
        if (account.events.length) {
          account.events[0][1]();
          account.removeEvent(account.events[0]);
        }
      }
    }
  ]]></script>

  <comandset>
    <command id="cmd_addContact" key="key_addContact" oncommand="account.onAddContact()"/>
    <command id="cmd_joinRoom" key="key_joinRoom" oncommand="account.onJoinRoom()"/>
    <command id="cmd_manageBookmarks" oncommand="account.onManageBookmarks()"/>
    <command id="cmd_history" key="key_history" oncommand="account.showHistoryManager()"/>
    <command id="cmd_transfers" key="key_transfers" oncommand="account.showTransfersManager()"/>
    <command id="cmd_disco" key="key_disco" oncommand="account.showDisco()"/>
    <command id="cmd_adhoc" oncommand="account.onAdHocCommand()"/>
    <command id="cmd_disconnect" oncommand="con.disconnect()"/>
    <command id="cmd_quit" key="key_quit" oncommand="quit()"/>

    <command id="cmd_ourVCard" key="key_ourVCard" oncommand="account.showVCard()"/>
    <command id="cmd_changePassword" oncommand="account.onChangePassword()"/>
<!-- #ifdef XULAPP -->
    <command id="cmd_extensions" oncommand=""/>
    <command id="cmd_themes" key="key_themes" oncommand=""/>
<!-- #endif -->
    <command id="cmd_prefs" key="key_prefs" oncommand="account.showPrefs()"/>

    <command id="cmd_help" key="key_help" oncommand="openLink('http://www.process-one.net/en/oneteam/')"/>
    <command id="cmd_help_bot" oncommand="account.getOrCreateContact('bot.oneteam.im').onOpenChat()"/>
    <command id="cmd_bug" oncommand="openLink('https://support.process-one.net/browse/TEAM')"/>
    <command id="cmd_xmlConsole" key="key_xmlConsole" oncommand="account.showConsole()"/>
<!-- #ifdef DEBUG -->
<!-- #ifdef XULAPP -->
    <command id="cmd_jsConsole" oncommand='window.openDialog("chrome://global/content/console.xul", "_blank","chrome,dialog=no,all", "")'/>
<!-- #endif -->
    <command id="cmd_cmdConsole" oncommand='window.openDialogUniq("ot:command", "command.xul", "chrome,dialog=no,all", "")'/>
<!-- #endif -->
    <command id="cmd_about" oncommand="account.showAbout()"/>

    <command id="cmd_toggleShowOffline" key="key_toggleShowOffline"
      oncommand="this.setAttribute('checked', setPresenceUpdater.rosterView.hideOffline =
        !setPresenceUpdater.rosterView.hideOffline)"/>
    <command id="cmd_toggleShowToolbar" checked="true"
      oncommand="var c = this.getAttribute('checked') == 'true'; this.setAttribute('checked', !c);
                 document.getElementById('actions-toolbar').collapsed = c"/>
  </comandset>

  <keyset>
    <key id="key_addContact" modifiers="control" key="A" command="cmd_addContact"/>
    <key id="key_joinRoom" modifiers="control" key="J" command="cmd_joinRoom"/>
    <key id="key_disco" modifiers="control" key="S" command="cmd_disco"/>
    <key id="key_ourVCard" modifiers="control" key="E" command="cmd_ourVCard"/>
<!-- #ifdef XULAPP -->
    <key id="key_quit" modifiers="control" key="Q" command="cmd_quit"/>
    <key id="key_themes" modifiers="control" key="T" command="cmd_themes"/>
<!-- #endif -->
    <key id="key_prefs" modifiers="control" key="P" command="cmd_prefs"/>
    <key id="key_help" modifiers="control" key="H" command="cmd_help"/>
<!-- #ifdef DEBUG -->
    <key id="key_xmlConsole" modifiers="control" key="C" command="cmd_xmlConsole"/>
<!-- #ifdef XULAPP -->
    <key id="key_jsConsole" modifiers="control" key="M" command="cmd_jsConsole"/>
<!-- #endif -->
    <key id="key_cmdConsole" modifiers="control" key="N" command="cmd_cmdConsole"/>
<!-- #endif -->
    <key id="key_toggleShowOffline" modifiers="control" key="O" command="cmd_toggleShowOffline"/>
    <key id="key_history" modifiers="control" key="H" command="cmd_history"/>
<!-- #ifdef XULAPP -->
    <key id="key_transfers" modifiers="control" key="T" command="cmd_transfers"/>
<!-- #endif -->
  </keyset>

  <deck id="main-deck" flex="1" selectedIndex="0">
    <vbox id="login-box">
      <hbox pack="center">
        <image id="login-logo"/>
      </hbox>
      <vbox id="login-user-box">
        <label control="login-user" value="_('Username')"/>
        <textbox id="login-user" flex="1"/>
      </vbox>
      <vbox id="login-pass-box">
        <label control="login-pass" value="_('Password')"/>
        <textbox id="login-pass" type="password"/>
      </vbox>
      <hbox pack="center">
<!-- #ifdef XULAPP -->
        <checkbox id="login-savePass" checked="true" label="Remember password"/>
<!-- #else
        <checkbox id="login-savePass" checked="false" label="Remember password"/>
// #endif -->
      </hbox>
      <progressmeter id="login-progress" style="visibility: hidden" mode="undetermined"/>
      <hbox pack="center">
        <button id="login-signin" disabled="true" label="_('Sign In')" oncommand="connect()"/>
      </hbox>
      <spacer/>
      <hbox id="login-settings-box">
        <label crop="end" class="text-link" value="_('Startup Settings')"
          onclick="account.showPrefs();"/>
        <label value="|"/>
        <label crop="end" class="text-link" value="_('New Account')"
          onclick='window.open("account.xul", "Startup settings", "chrome,centerscreen,dialog,resizable");'/>
<!-- #ifdef DEBUG -->
        <label value="|"/>
        <label crop="end" class="text-link" value="Command Console" command="cmd_cmdConsole"/>
<!-- #endif -->
      </hbox>
    </vbox>
    <vbox id="main-box" flex="1">
      <toolbox>
        <menubar>
          <menu id="lagger-menu" label="_('_Actions')">
            <menupopup id="file-popup">
              <menuitem label="_('_Add Contact...')" command="cmd_addContact"/>

              <menu label="_('_Join Chat Room')">
                <menupopup>
                  <menuitem label="_('Join Chat Room...')" command="cmd_joinRoom"/>
                  <menuseparator/>
                  <menuseparator id="conference-menu-separator" hidden="true"/>
                  <menuitem label="_('_Manage Bookmarks...')" command="cmd_manageBookmarks"/>
                </menupopup>
              </menu>
              <menu label="_('_Gateways')" id="gateways-menu">
                <menupopup/>
              </menu>
              <menuseparator/>
<!--          <menuitem label="_('_Services Discovery')" command="cmd_disco"/>
              <menuitem label="_('Administration Tools')"/> -->
              <menuitem label="_('_Server Commands...')" command="cmd_adhoc"/>
              <menuitem label="_('_History Manager...')" command="cmd_history"/>
              <menuitem label="_('File _Transfers...')" command="cmd_transfers"/>
              <menuseparator/>
              <menuitem label="_('Disconnect')" command="cmd_disconnect"/>
<!-- #ifdef XULAPP -->
              <menuitem label="_('_Quit')" command="cmd_quit"/>
<!-- #endif -->
            </menupopup>
          </menu>
          <menu id="configuration-menu" label="_('_View')">
            <menupopup id="config-popup">
              <menuitem label="_('Show _Actions Toolbar')" command="cmd_toggleShowToolbar"
                        type="checkbox"/>
              <menuseparator/>
              <menuitem label="_('Hide _Offline Contacts')" command="cmd_toggleShowOffline"
                        type="checkbox"/>
            </menupopup>
          </menu>
          <menu id="configuration-menu" label="_('_Config')">
            <menupopup id="config-popup">
              <menuitem label="_('_Edit personal info...')" command="cmd_ourVCard"/>
              <menuitem label="_('_Change password...')" command="cmd_changePassword"/>
              <menuseparator/>
<!-- #ifdef XULAPP -->
              <menuitem label="_('Plugins...')" command="cmd_extensions"/>
              <menuitem label="_('_Themes...')" command="cmd_themes"/>
              <menuseparator/>
<!-- #endif -->
              <menuitem label="_('_Preferences...')" command="cmd_prefs"/>
            </menupopup>
          </menu>
          <menu id="help-menu" label="_('_Help')">
            <menupopup id="help-popup">
              <menuitem label="_('Help _Bot')" command="cmd_help_bot"/>
              <menuitem label="_('_Documentation')" command="cmd_help"/>
              <menuitem label="_('_Report Bug')" command="cmd_bug"/>
              <menuitem label="_('XML _Console...')" command="cmd_xmlConsole"/>
<!-- #ifdef DEBUG -->
<!-- #ifdef XULAPP -->
              <menuitem label="JavaScript Console..." command="cmd_jsConsole"/>
<!-- #endif -->
              <menuitem label="Command Console..." command="cmd_cmdConsole"/>
<!-- #endif -->
              <menuseparator/>
              <menuitem label="_('About...')" command="cmd_about"/>
            </menupopup>
          </menu>
        </menubar>
        <toolbar id="actions-toolbar">
          <toolbarbutton id="adduser-button" tooltiptext="_('Add new contact')"
              command="cmd_addContact"/>
          <toolbarbutton id="joinroom-button" tooltiptext="_('Join group chat room')"
              command="cmd_joinRoom"/>
          <toolbarseparator/>
          <toolbarbutton id="toggleshowoffline-button" tooltiptext="_('Toggle offline contacts visibility')"
              command="cmd_toggleShowOffline"/>
          <!-- <toolbarbutton id="disco-button" tooltiptext="disco.tooltip"
              command="cmd_disco"/> -->
          <toolbarbutton id="editgroups-button" tooltiptext="_('Preferences')"
              command="cmd_prefs"/>
          <toolbarseparator id="gateways-separator" hidden="true"/>
        </toolbar>
      </toolbox>
      <hbox flex="1">
        <!-- #ifdef XULAPP -->
        <vbox flex="1">
        <!-- #else
        <vbox width="250">
        // #endif -->
          <hbox id="setPresence-box">
            <vbox flex="1">
              <hbox align="center">
                <image id="setPresence-type-image"/>
                <label id="setPresence-nick"/>
              </hbox>
              <menulist id="setPresence-type-chooser" oncommand="setPresenceUpdater.onCommand()">
                <menupopup>
                  <menuitem id="setPresence-type-available" label="_('Available')"
                      selected="true" value="available" class="menuitem-iconic"/>
                  <menuitem id="setPresence-type-chat" label="_('Available for chat')"
                      value="chat" class="menuitem-iconic"/>
                  <menuitem id="setPresence-type-dnd" label="_('Busy')"
                      value="dnd" class="menuitem-iconic"/>
                  <menuitem id="setPresence-type-away" label="_('Away')"
                      value="away" class="menuitem-iconic"/>
                  <menuitem id="setPresence-type-xa" label="_('Not available')"
                      value="xa" class="menuitem-iconic"/>
                  <menuitem id="setPresence-type-invisible" label="_('Invisible')"
                      value="invisible" class="menuitem-iconic"/>
                  <menuseparator/>
                  <menuitem id="setPresence-type-custom" label="_('Status message')"/>
                </menupopup>
              </menulist>
              <hbox>
                <checkbox id="setPresence-profile-enable" disabled="true"
                  oncommand="setPresenceUpdater.onProfileEnable()"/>
                <menulist id="setPresence-profile-chooser" flex="1"
                  oncommand="setPresenceUpdater.onProfileCommand()">
                  <menupopup>
                    <menuitem id="setPresence-profile-dummy" label="No profiles configured"
                      disabled="true" value="dummy-profile"/>
                    <menuseparator/>
                    <menuitem id="setPresence-profile-create" label="Edit profiles..."/>
                  </menupopup>
                </menulist>
              </hbox>
            </vbox>
            <avatar id="setPresence-avatar-image" showBlankAvatar="true"/>
          </hbox>
          <description id="eventBox" collapsed="true" onclick="eventBoxHandler.onClick()"
              tooltip="eventBoxTooltip">
            <div xmlns="http://www.w3.org/1999/xhtml"/>
          </description>
          <tabbox id="roster" flex="1">
            <tabs>
              <tab label="Contacts"/>
              <tab label="Conferences"/>
            </tabs>
            <tabpanels flex="1">
              <tabpanel>
                <richlistbox id="contacts-list" flex="1" persist="hideOffline"/>
              </tabpanel>
              <tabpanel>
                <richlistbox id="conferences-list" flex="1"/>
              </tabpanel>
            </tabpanels>
          </tabbox>
        </vbox>
        <!-- #ifdef XULAPP -->
        <splitter id="chats-splitter" collapsed="true" persist="rightWidth"/>
        <chattabbox id="chats" collapsed="true" flex="1"/>
        <!-- #else
        <splitter id="chats-splitter"/>
        <chattabbox id="chats" flex="1"/>
        // #endif -->
      </hbox>
    </vbox>
  </deck>
  <popupset>
    <tooltip id="eventBoxTooltip">
      <description>
        <div xmlns="http://www.w3.org/1999/xhtml">empty</div>
      </description>
    </tooltip>

    <popup id="contact-contextmenu" onpopupshowing="updateContactContextMenu(this, event)">
      <menuitem id="contact-chat-single" label="_('Send Message...')"
          oncommand="this.parentNode.model.onOpenChat()"/>
      <menu id="contact-chat-multi" label="_('Send Message...')" hidden="true">
        <menupopup/>
      </menu>
      <menu id="contact-invite" label="Invite to" hidden="true">
        <menupopup/>
      </menu>

      <menuseparator/>

      <menuitem label="_('Remove Contact...')" oncommand="this.parentNode.model.onRemove()"/>
      <menuitem label="_('Rename...')" oncommand="this.parentNode.model.onRename()"/>
      <menuitem label="Edit contact..." oncommand="this.parentNode.model.onEditContact()"/>

      <menuseparator/>

      <menu label="_('Authorisation')">
        <menupopup>
          <menuitem id="contact-authorisation-ask" label="_('Ask to see him')"
              oncommand="this.parentNode.parentNode.parentNode.model.askForSubscription()"/>
          <menuitem id="contact-authorisation-allow" label="_('Authorize to see me')"
              oncommand="this.parentNode.parentNode.parentNode.model.allowToSeeMe()"/>
          <menuitem id="contact-authorisation-disallow" label="_('Cancel authorisation')"
              oncommand="this.parentNode.parentNode.parentNode.model.disallowToSeeMe()"/>
        </menupopup>
      </menu>

      <menuseparator/>

      <menuitem label="_('Information...')" oncommand="this.parentNode.model.showVCard()"/>
      <menuitem id="contact-adhoc" label="_('Execute Command...')" oncommand="this.parentNode.model.onAdHocCommand()"/>
      <menu id="contact-adhoc-multi" label="_('Execute Command...')" hidden="true">
        <menupopup/>
      </menu>
      <menuitem label="_('Show History...')"
        oncommand="this.parentNode.model.onShowHistory()"/>
      <menuitem id="contact-send-file" label="_('Send file...')"
        oncommand="this.parentNode.model.onSendFile()"/>
    </popup>

    <popup id="resource-contextmenu" onpopupshowing="updateResourceContextMenu(this, event)">
      <menuitem label="_('Send Message...')" oncommand="this.parentNode.model.onOpenChat()"/>
      <menu id="resource-invite" label="Invite to" hidden="true">
        <menupopup/>
      </menu>

      <menuseparator/>

      <menuitem label="_('Information...')" oncommand="this.parentNode.model.showVCard()"/>
      <menuitem id="resource-adhoc" label="_('Execute Command...')" oncommand="this.parentNode.model.onAdHocCommand()"/>
      <menuitem label="_('Show History...')"
        oncommand="this.parentNode.model.onShowHistory()"/>
      <menuitem id="resource-send-file" label="_('Send file...')"
        oncommand="this.parentNode.model.onSendFile()"/>
    </popup>

    <popup id="conference-contextmenu" onpopupshowing="updateConferenceContextMenu(this, event)">
      <menuitem id="conference-invite" label="Invite contacts to this room..."
          oncommand="this.parentNode.model.onInvite()"/>
      <menuitem id="conference-changeNick" label="Change nick..."
          oncommand="this.parentNode.model.onChangeNick()"/>
      <menuitem id="conference-changeSubject" label="Change subject..."
          oncommand="this.parentNode.model.onChangeSubject()"/>
      <menuitem id="conference-bookmark" label="Bookmark..."
          oncommand="this.parentNode.model.onBookmark()"/>

      <menuseparator/>

      <menuitem id="conference-configuration" label="Configure..."
          oncommand="this.parentNode.model.onRoomConfiguration()"/>
      <menuitem id="conference-edit-permissions" label="Edit Permissions..."
          oncommand="this.parentNode.model.onEditPermissions()"/>

      <menuseparator/>

      <menuitem label="_('Information...')"
        oncommand="this.parentNode.model.showVCard()"/>
      <menuitem label="Show History..."
        oncommand="this.parentNode.model.onShowHistory()"/>

      <menuseparator/>

      <menuitem id="conference-leave" label="Leave conference"
          oncommand="this.parentNode.model.exitRoom()"/>
    </popup>

    <popup id="conferencemember-contextmenu" onpopupshowing="updateConferenceMemberContextMenu(this, event)">
      <menuitem id="conferencemember-chat-single" label="_('Send Message...')"
          oncommand="this.parentNode.model.onOpenChat()"/>

      <menuseparator/>

      <menuitem id="conferencemember-kick" label="Kick..."
          oncommand="this.parentNode.model.onKick()"/>
      <menuitem id="conferencemember-ban" label="Ban..."
          oncommand="this.parentNode.model.onBan()"/>
      <menu id="conferencemember-affiliations" label="Affiliation">
        <menupopup>
          <menuitem id="conferencemember-affiliation-owner" name="affiliations"
            type="radio" label="Owners"
            oncommand="this.parentNode.parentNode.parentNode.model.setAffiliation('owner')"/>
          <menuitem id="conferencemember-affiliation-admin" name="affiliations"
            type="radio" label="Administrators"
            oncommand="this.parentNode.parentNode.parentNode.model.setAffiliation('admin')"/>
          <menuitem id="conferencemember-affiliation-member" name="affiliations"
            type="radio" label="Members"
            oncommand="this.parentNode.parentNode.parentNode.model.setAffiliation('member')"/>
          <menuitem id="conferencemember-affiliation-none" name="affiliations"
            type="radio" label="None"
            oncommand="this.parentNode.parentNode.parentNode.model.setAffiliation('none')"/>
        </menupopup>
      </menu>

      <menu id="conferencemember-roles" label="Role">
        <menupopup>
          <menuitem id="conferencemember-role-moderator" name="roles"
            type="radio" label="Moderator"
            oncommand="this.parentNode.parentNode.parentNode.model.setRole('moderator')"/>
          <menuitem id="conferencemember-role-participant" name="roles"
            type="radio" label="Participant"
            oncommand="this.parentNode.parentNode.parentNode.model.setRole('participant')"/>
          <menuitem id="conferencemember-role-visitor" name="roles"
            type="radio" label="Visitor"
            oncommand="this.parentNode.parentNode.parentNode.model.setRole('visitor')"/>
          <menuitem id="conferencemember-role-none" name="roles"
            type="radio" label="None"
            oncommand="this.parentNode.parentNode.parentNode.model.setRole('none')"/>
        </menupopup>
      </menu>

      <menuseparator/>

      <menuitem label="_('Information...')"
        oncommand="this.parentNode.model.showVCard()"/>
      <menuitem label="Show History..."
        oncommand="this.parentNode.model.onShowHistory()"/>
      <menuitem id="conferencemember-send-file" label="_('Send file...')"
        oncommand="this.parentNode.model.onSendFile()"/>
    </popup>

    <popup id="gateway-contextmenu" onpopupshowing="updateGatewayMemberContextMenu(this, event)">
      <menuitem id="gateway-chat-single" label="_('Send Message...')"
          oncommand="this.parentNode.model.onOpenChat()"/>

      <menuseparator/>

      <menuitem id="gateway-login" label="Login"
        oncommand="this.parentNode.model.login()"/>
      <menuitem id="gateway-logout" label="Logout"
        oncommand="this.parentNode.model.logout()"/>

      <menuseparator/>

      <menuitem label="_('Information...')"
        oncommand="this.parentNode.model.showVCard()"/>
      <menuitem label="Show History..."
        oncommand="this.parentNode.model.onShowHistory()"/>

      <menuseparator/>

      <menuitem label="Remove..."
        oncommand="this.parentNode.model.onRemove()"/>
    </popup>
  </popupset>
  <!-- #ifdef XULAPP -->
  <otsystray id="systray" type="minimizer"/>
  <!-- #endif -->
  <soundsplayer id="soundsplayer"/>

  <vbox id="hiddenContainer" collapsed="true"/>
</window>
