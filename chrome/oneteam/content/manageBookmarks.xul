<?xml version="1.0" encoding="ISO-8859-1"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/dialog.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam-branding/locale/branding.css" type="text/css"?>

<?xul-overlay href="chrome://oneteam/content/overlays/bookmarkForm.xul"?>
<?xul-overlay href="chrome://oneteam/content/overlays/macMenuOverlay.xul"?>

<dialog id="oneteam" windowtype="ot:manageBookmarks" title="_('Bookmark Manager')"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml"
  width="550" height="400"
  buttonlabelaccept="_('Save')" buttonlabelcancel="_('Cancel')"
  buttons="accept,cancel"
  onload="onLoad()" ondialogaccept="return saveBookmarks()">

  <script type="text/javascript;version=1.7" src="JavaScript/moduleloader.js"/>
  <script type="text/javascript;version=1.7"><![CDATA[
    ML.importMod("model/account.js");

    var removedBookmarks = [];

    function onLoad()
    {
      list = document.getElementById("list");
      populateBookmarks();

      for each (var id in "name room server nick pass autoJoin".split(/ /))
        input[id] = document.getElementById(id);

      if (list.childNodes.length)
        list.selectedItem =
          window.arguments && bookmarksByJid[window.arguments[0]] ?
            bookmarksByJid[window.arguments[0]] : list.firstChild;
      else
        disableInput(true);
    }

    function disableInput(val) {
      for each (var i in input)
        i.disabled = i.previousSibling.disabled = val;
    }

    function updateName(newName)
    {
      if (selectedBookmark)
        selectedBookmark.label = newName;
    }

    function newRoom()
    {
      if (!roomChange())
        return;
      disableInput(false);

      var label = newName();

      var bookmark = list.appendItem(label);
      bookmark.name = label;
      for each (var id in "room server nick pass autoJoin".split(/ /))
        bookmark[id] = "";
      registerBookmark(bookmark);
      list.selectedItem = bookmark;
      input.name.focus();
    }

    function removeRoom()
    {
      if (!selectedBookmark)
        return;

      var bookmarkToDelete = selectedBookmark;
      selectedBookmark = null; // to skip checking values in roomChange()

      if (list.childNodes.length > 1) {
        if (list.selectedItem == bookmarkToDelete)
          // if the user has clicked on 'remove bookmark',
          // the next selected bookmark should be the previous one in the list
          list.selectedIndex = list.selectedIndex ? list.selectedIndex-1 : 0;
      } else {
        disableInput(true);
        for each (id in "name room server nick pass autoJoin".split(/ /))
          input[id].value = '';
        input["autoJoin"].checked = false;
      }

      if (bookmarkToDelete.model)
        removedBookmarks.push(bookmarkToDelete.model);
      unregisterBookmark(bookmarkToDelete);
      list.removeChild(bookmarkToDelete);
    }

    function saveBookmarks()
    {
      if (!roomChange())
        return false;

      account.bookmarks.startBatchUpdate();

      for (var i = 0; i < removedBookmarks.length; i++)
        removedBookmarks[i].bookmark();
      for (i = 0; i < list.childNodes.length; i++) {
        var bookmark = list.childNodes[i];
        var conference = account.
          getOrCreateConference(bookmark.room+"@"+bookmark.server);

        conference.bookmark(bookmark.label, bookmark.autoJoin,
                            bookmark.nick || null, bookmark.pass || null);
      }
      account.bookmarks.stopBatchUpdate();

      return true;
    }

    var mutex;
    function roomChange()
    {
      if (mutex)
        return;
      mutex = 1;

      if (selectedBookmark) {
        var verifier = document.getElementById("verifier");
        if (!verifier.isValid) {
          var wasValid = selectedBookmark.name && selectedBookmark.room
                      && selectedBookmark.server && selectedBookmark.nick;
          var prompts = Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
                        .getService(Components.interfaces.nsIPromptService);
          var restore = prompts.confirmEx(
            null,
            _("Bookmark Manager"), // window's title
            (wasValid ?
            _('Entered informations are invalid.\nDo you want to correct entered informations,\nor to restore previous values instead?'):
            _('Entered informations are invalid.\nDo you want to correct entered informations,\nor to remove the bookmark you have just created?')),
            32639, // 32639 = prompts.BUTTON_POS_0 * prompts.BUTTON_TITLE_IS_STRING
                   //       + prompts.BUTTON_POS_1 * prompts.BUTTON_TITLE_IS_STRING
                   //       + prompts.BUTTON_POS_2 * 0  (third button is disabled)
            wasValid ? _("Restore Previous Values") : _("Remove Bookmark"), // first button string
            _("Correct Informations"),                                      // second button string
            "",                                                             // third button string
            null, {}                                                        // checkbox disabled
          );

          if (restore == 0) {
            if (wasValid)
              selectedBookmark.label = selectedBookmark.name;
            else
              removeRoom();
          } else {
            list.selectedItem = selectedBookmark;
            verifier.focusInvalidWidget();
            mutex = 0;
            return false; // this is to prevent from exit on 'Save' click
          }
        } else {
          unregisterBookmark(selectedBookmark);

          for each (var id in "name room server nick pass".split(/ /))
            selectedBookmark[id] = input[id].value;
          selectedBookmark.autoJoin = input.autoJoin.checked;

          registerBookmark(selectedBookmark);
        }
      }

      selectedBookmark = list.selectedItem;
      if (selectedBookmark) {
        for each (id in "name room server nick pass autoJoin".split(/ /))
          input[id].value = selectedBookmark[id];
        input.autoJoin.checked = selectedBookmark.autoJoin;
        setTimeout("input.name.focus()", 0);
      } else if (list.childNodes.length)
        setTimeout("list.selectedIndex = 0", 0);

      mutex = 0;
      return true;
    }
  ]]></script>

  <group id="macMenu"/>

  <toolbox id="mainToolbox">
    <menubar id="macMenuBar"/>
  </toolbox>

  <hbox flex="1" style="padding-top: 20px;padding-left: 10px; padding-right: 10px; padding-bottom: 10px;">
    <vbox>
      <listbox id="list" flex="1" onselect="roomChange()"/>
      <hbox>
        <button label="_('New')" oncommand="newRoom()"/>
        <button label="_('Remove')" oncommand="removeRoom()"/>
      </hbox>
    </vbox>

    <verifier flex="1" id="verifier">
      <grid id="bookmark-form"></grid>
    </verifier>
  </hbox>
</dialog>
