<?xml version="1.0" encoding="ISO-8859-1"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/dialog.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam-branding/locale/branding.css" type="text/css"?>

<?xul-overlay href="chrome://oneteam/content/overlays/macMenuOverlay.xul"?>

<dialog id="oneteam" windowtype="ot:manageBookmarks" title="_('Bookmark Manager')"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml"
  width="550" height="400"
  buttonlabelaccept="_('Save')" buttonlabelcancel="_('Cancel')"
  buttons="accept,cancel"
  onload="onLoad()" ondialogaccept="return saveBookmarks()">

  <script type="text/javascript;version=1.7" src="JavaScript/moduleloader.js"/>
  <script type="text/javascript;version=1.7"><![CDATA[
    ML.importMod("model/account.js");

    var selectedItem;
    var textBoxes = {};
    var removedItems = [];
    var list;
    var bookmarksByJid = {};
    var bookmarksByName = {};

    function onLoad()
    {
      list = document.getElementById("list");
      for each (var id in "name room server nick pass autoJoin".split(/ /))
        textBoxes[id] = document.getElementById(id);

      var bookmarks = account.bookmarks.bookmarks;
      for (var i = 0; i < bookmarks.length; i++) {
        var item = list.appendItem(bookmarks[i].bookmarkName);
        item.model = bookmarks[i];
        item.name = bookmarks[i].bookmarkName;
        item.room = bookmarks[i].jid.node;
        item.server = bookmarks[i].jid.domain;
        item.nick = bookmarks[i].bookmarkNick || "";
        item.pass = bookmarks[i].bookmarkPassword || "";
        item.autoJoin = bookmarks[i].autoJoin;

        registerBookmark(item);
      }

      if (list.childNodes.length)
        list.selectedItem =
          window.arguments && bookmarksByJid[window.arguments[0]] ?
            bookmarksByJid[window.arguments[0]] : list.firstChild;
      else
        disableTextBoxes(true);
    }

    function disableTextBoxes(val) {
      for each (var textbox in textBoxes)
        textbox.disabled = textbox.previousSibling.disabled = val;
    }

    function updateName(newName)
    {
      if (selectedItem)
        selectedItem.label = newName;
    }

    function registerBookmark(item)
    {
      bookmarksByJid[item.room+'@'+item.server] = item;
      bookmarksByName[item.name] = item;
    }

    function unregisterBookmark(item)
    {
      delete bookmarksByJid[item.room+'@'+item.server];
      delete bookmarksByName[item.name];
    }

    function newRoom()
    {
      if (!roomChange())
        return;
      disableTextBoxes(false);

      var label = _("New Room"),
        i = 1;
      while (bookmarksByName[label]) {
        label = _("New Room") + " " + i;
        i += 1;
      }

      var item = list.appendItem(label);
      item.name = label;
      for each (var id in "room server nick pass autoJoin".split(/ /))
        item[id] = "";
      registerBookmark(item);
      list.selectedItem = item;
      textBoxes.name.focus();
    }

    function removeRoom()
    {
      if (!selectedItem)
        return;

      var itemToDelete = selectedItem;
      selectedItem = null; // to skip checking values in roomChange()

      if (list.childNodes.length > 1) {
        if (list.selectedItem == itemToDelete)
          // if the user has clicked on 'remove bookmark',
          // the next selected bookmark should be the previous one in the list
          list.selectedIndex = list.selectedIndex ? list.selectedIndex-1 : 0;
      } else {
        disableTextBoxes(true);
        for each (id in "name room server nick pass autoJoin".split(/ /))
          textBoxes[id].value = '';
        textBoxes["autoJoin"].checked = false;
      }

      if (itemToDelete.model)
        removedItems.push(itemToDelete.model);
      unregisterBookmark(itemToDelete);
      list.removeChild(itemToDelete);
    }

    function saveBookmarks()
    {
      if (!roomChange())
        return false;

      account.bookmarks.startBatchUpdate();

      for (var i = 0; i < removedItems.length; i++)
        removedItems[i].bookmark();
      for (i = 0; i < list.childNodes.length; i++) {
        var item = list.childNodes[i];
        var conference = account.
          getOrCreateConference(item.room+"@"+item.server);

        conference.bookmark(item.label, item.autoJoin,
                            item.nick || null, item.pass || null);
      }
      account.bookmarks.stopBatchUpdate();

      return true;
    }

    var mutex;
    function roomChange()
    {
      if (mutex)
        return;
      mutex = 1;

      if (selectedItem) {
        var verifier = document.getElementById("verifier");
        if (!verifier.isValid) {
          var wasValid = selectedItem.name && selectedItem.room
                      && selectedItem.server && selectedItem.nick;
          var prompts = Components.classes["@mozilla.org/embedcomp/prompt-service;1"]
                        .getService(Components.interfaces.nsIPromptService);
          var restore = prompts.confirmEx(
            null,
            _("Bookmark Manager"), // window's title
            (wasValid ?
            _('Entered informations are invalid.\nDo you want to correct entered informations,\nor to restore previous values instead ?'):
            _('Entered informations are invalid.\nDo you want to correct entered informations,\nor to remove the bookmark you have just created ?')),
            32639, // 32639 = prompts.BUTTON_POS_0 * prompts.BUTTON_TITLE_IS_STRING
                   //       + prompts.BUTTON_POS_1 * prompts.BUTTON_TITLE_IS_STRING
                   //       + prompts.BUTTON_POS_2 * 0  (third button is disabled)
            wasValid ? _("Restore Previous Values") : _("Remove Bookmark"), // first button string
            _("Correct Informations"),                                      // second button string
            "",                                                             // third button string
            null, {}                                                        // checkbox disabled
          );

          if (restore == 0) {
            if (wasValid)
              selectedItem.label = selectedItem.name;
            else
              removeRoom();
          } else {
            list.selectedItem = selectedItem;
            verifier.focusInvalidWidget();
            mutex = 0;
            return false; // this is to prevent from exit on 'Save' click
          }
        } else {
          unregisterBookmark(selectedItem);

          for each (var id in "name room server nick pass".split(/ /))
            selectedItem[id] = textBoxes[id].value;
          selectedItem.autoJoin = textBoxes.autoJoin.checked;

          registerBookmark(selectedItem);
        }
      }

      selectedItem = list.selectedItem;
      if (selectedItem) {
        for each (id in "name room server nick pass autoJoin".split(/ /))
          textBoxes[id].value = selectedItem[id];
        textBoxes.autoJoin.checked = selectedItem.autoJoin;
        setTimeout("textBoxes.name.focus()", 0);
      } else if (list.childNodes.length)
        setTimeout("list.selectedIndex = 0", 0);

      mutex = 0;
      return true;
    }

    function checkName() {
      if (selectedItem && textBoxes.name.value != selectedItem.name
          && bookmarksByName[textBoxes.name.value]) {
        textBoxes.name.errortext=_('Bookmark with that name already exists');
        return false;
      }
      delete textBoxes.name.errortext;
      return textBoxes.name.value.length;
    }

    function checkRoom() {
      if (selectedItem
          && (   textBoxes.room.value   != selectedItem.room
              || textBoxes.server.value != selectedItem.server)
          && bookmarksByJid[textBoxes.room.value+'@'+textBoxes.server.value]) {
        textBoxes.room.errortext = _('You have already that chatroom in your bookmarks');
        return false;
      }
      delete textBoxes.room.errortext;
      return !textBoxes.room.value.search(/^[^ \t\n"&'/:<>@]+$/);
    }

    function checkServer() {
      textBoxes.room._checkCondition();
      return !textBoxes.server.value.search(/^(?:\w(?:[\w-]*\w)?\.)*[^\W\d](?:[\w-]*\w)?$/);
    }
  ]]></script>

  <group id="macMenu"/>

  <toolbox id="mainToolbox">
    <menubar id="macMenuBar"/>
  </toolbox>

  <hbox flex="1" style="padding-top: 20px;padding-left: 10px; padding-right: 10px; padding-bottom: 10px;">
    <vbox>
      <listbox id="list" flex="1" onselect="roomChange()"/>
      <hbox>
        <button label="_('New')" oncommand="newRoom()"/>
        <button label="_('Remove')" oncommand="removeRoom()"/>
      </hbox>
    </vbox>

    <verifier flex="1" id="verifier">
      <grid flex="1">
        <columns>
          <column/>
          <column flex="1"/>
        </columns>
        <rows>
          <row>
            <label value="_('Name:')" control="name"/>
            <textbox id="name" type="verifiable" condition="checkName()"
                     oninput="updateName(this.value)"/>
          </row>

          <spacer/>

          <row>
            <label value="_('Room:')" control="room"/>
            <textbox id="room" type="verifiable" condition="checkRoom()"/>
          </row>

          <spacer/>

          <row>
            <label value="_('Server:')" control="server"/>
            <textbox id="server" type="verifiable" condition="checkServer()"/>
          </row>

          <spacer/>

          <row>
            <label value="_('Nick:')" control="nick"/>
            <textbox id="nick" type="verifiable" regex="."/>
          </row>

          <spacer/>

          <row>
            <label value="_('Password:')" control="pass"/>
            <textbox id="pass" type="password"/>
          </row>

          <spacer/>
          
          <row>
            <box/>
            <checkbox label="_('Always join this room at startup')" id="autoJoin"/>
          </row>
        </rows>
      </grid>
    </verifier>
  </hbox>
</dialog>
