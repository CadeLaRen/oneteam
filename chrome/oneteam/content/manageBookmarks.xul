<?xml version="1.0" encoding="ISO-8859-1"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/dialog.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam-branding/locale/branding.css" type="text/css"?>

<?xul-overlay href="chrome://oneteam/content/overlays/macMenuOverlay.xul"?>

<dialog id="oneteam" windowtype="ot:manageBookmarks" title="_('Bookmark Manager')"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml"
  width="550" height="400"
  buttonlabelaccept="_('Save')" buttonlabelcancel="_('Cancel')"
  buttons="accept,cancel"
  onload="onLoad()" ondialogaccept="return saveBookmarks()">

  <script type="text/javascript;version=1.7" src="JavaScript/moduleloader.js"/>
  <script type="text/javascript;version=1.7"><![CDATA[
    ML.importMod("model/account.js");

    var selectedItem;
    var textBoxes = {};
    var removedItems = [];
    var list;

    function onLoad()
    {
      var selectedIdx = -1;

      list = document.getElementById("list");
      for each (var id in "name room server nick pass autoJoin".split(/ /))
        textBoxes[id] = document.getElementById(id);

      var bookmarks = account.bookmarks.bookmarks;
      for (var i = 0; i < bookmarks.length; i++) {
        var item = list.appendItem(bookmarks[i].bookmarkName);
        item.model = bookmarks[i];
        item["val-room"] = bookmarks[i].jid.node;
        item["val-server"] = bookmarks[i].jid.domain;
        item["val-nick"] = bookmarks[i].bookmarkNick || "";
        item["val-pass"] = bookmarks[i].bookmarkPassword || "";
        item["val-autoJoin"] = bookmarks[i].autoJoin;
        if (window.arguments && window.arguments[0] == bookmarks[i].jid.normalizedJID)
          selectedIdx = i;
      }
      if (i)
        list.selectedIndex = selectedIdx < 0 ? 0 : selectedIdx;
      else
        for each (var textbox in textBoxes)
          textbox.disabled = textbox.previousSibling.disabled = true;
    }

    function updateName(newName)
    {
      if (selectedItem)
        selectedItem.label = newName;
    }

    function newRoom()
    {
      for each (var textbox in textBoxes)
        textbox.disabled = textbox.previousSibling.disabled = false;

      var item = list.appendItem(_("New Room"));
      for each (var id in "room server nick pass autoJoin".split(/ /))
        item["val-"+id] = "";
      list.selectedItem = item;
      textBoxes.name.focus();
    }

    function removeRoom()
    {
      if (!selectedItem)
        return;

      if (selectedItem.model)
        removedItems.push(selectedItem.model);
      list.removeChild(selectedItem);
      if (!list.childNodes.length)
        for each (var textbox in textBoxes)
          textbox.disabled = textbox.previousSibling.disabled = true;
    }

    function saveBookmarks()
    {
      roomChange(list);

      account.bookmarks.startBatchUpdate();

      for (var i = 0; i < removedItems.length; i++)
        removedItems[i].bookmark();
      for (i = 0; i < list.childNodes.length; i++) {
        var item = list.childNodes[i];
        var conference = account.
          getOrCreateConference(item["val-room"]+"@"+item["val-server"]);

        conference.bookmark(item["label"], item["val-autoJoin"],
                            item["val-nick"] || null, item["val-pass"] || null);
      }
      account.bookmarks.stopBatchUpdate();

      return true;
    }

    var mutex;
    function roomChange(list)
    {
      if (mutex)
        return;
      mutex = 1;

      var saveValues = true;
      if (selectedItem) {
        var verifier = document.getElementById("verifier");
        if (!verifier.isValid) {
          var restore = confirm(selectedItem.model ?
            _('Entered informations are invalid.\nDo you want to forget entered informations and restore previous values (click "Cancel" if you want to correct values)?'):
            _('Entered informations are invalid.\nDo you want to forget this bookmark (click "Cancel" if you want to correct values)?'));

          saveValues = false;

          if (restore) {
            if (selectedItem.model)
              selectedItem.label = selectedItem.model.bookmarkName;
            else
              removeRoom();
          } else {
            list.selectedItem = selectedItem;
            verifier.focusInvalidWidget();
            mutex = 0;
            return;
          }
        }
      }

      if (saveValues && selectedItem) {
        for each (var id in "name room server nick pass".split(/ /))
          selectedItem[id == "name" ? "label" : "val-"+id] = textBoxes[id].value;
        selectedItem["val-autoJoin"] = textBoxes["autoJoin"].checked;
      }

      selectedItem = list.selectedItem;
      if (selectedItem) {
        for each (id in "name room server nick pass autoJoin".split(/ /))
          textBoxes[id].value = selectedItem[id == "name" ? "label" : "val-"+id];
        textBoxes["autoJoin"].checked = selectedItem["val-autoJoin"];
      } else
        setTimeout("list.selectedIndex = 0", 0);
      setTimeout(function(a){a.focus()}, 0, textBoxes.name);
      mutex = 0;
    }
  ]]></script>

  <group id="macMenu"/>

  <toolbox id="mainToolbox">
    <menubar id="macMenuBar"/>
  </toolbox>

  <hbox flex="1" style="padding-top: 20px;padding-left: 10px; padding-right: 10px; padding-bottom: 10px;">
    <vbox>
      <listbox id="list" flex="1" onselect="roomChange(this)"/>
      <hbox>
        <button label="_('New')" oncommand="newRoom()"/>
        <button label="_('Remove')" oncommand="removeRoom()"/>
      </hbox>
    </vbox>

    <verifier flex="1" id="verifier">
      <grid flex="1">
        <columns>
          <column/>
          <column flex="1"/>
        </columns>
        <rows>
          <row>
            <label value="_('Name:')" control="name"/>
            <textbox id="name" oninput="updateName(this.value)" type="verifiable" condition="
              this.value == '' ?
                (this.errortext=_('Bookmark name can\'t be empty'), false) :
              (!selectedItem || !selectedItem.model || selectedItem.model.bookmarkName != this.value) &amp;&amp;
                  account.bookmarks.getBookmarkByName(this.value) ?
                (this.errortext=_('Bookmark with that name already exists'), false) : true"/>
          </row>

          <spacer/>

          <row>
            <label value="_('Room:')" control="room"/>
            <textbox id="room" type="verifiable" regex="^[^ \t\n&quot;&amp;&apos;/:&lt;&gt;@]+$"
                     errortext="_('Room name can\'t be empty and can\'t contain any of
                                [&quot;&amp;\&apos;/:&lt;&gt;@] or blank characters')"/>
          </row>

          <spacer/>

          <row>
            <label value="_('Server:')" control="server"/>
            <textbox id="server" type="verifiable" regex="^(?:\w(?:[\w-]*\w)?\.)*[^\W\d](?:[\w-]*\w)?$"/>
          </row>

          <spacer/>

          <row>
            <label value="_('Nickname:')" control="nick"/>
            <textbox id="nick" type="verifiable" regex="." errortext="_('Nickname can\'t be empty')"/>
          </row>

          <spacer/>

          <row>
            <label value="_('Password:')" control="pass"/>
            <textbox id="pass" type="password"/>
          </row>

          <spacer/>
          
          <row>
            <box/>
            <checkbox label="_('Always join this room at startup')" id="autoJoin"/>
          </row>
        </rows>
      </grid>
    </verifier>
  </hbox>
</dialog>
