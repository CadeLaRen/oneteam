<?xml version="1.0"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/command/command.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam-branding/locale/branding.css" type="text/css"?>

<?xul-overlay href="chrome://oneteam/content/overlays/macMenuOverlay.xul"?>

<window id="oneteam" windowtype="ot:command" title="_('{0} Commands Console', _('$$branding$$:OneTeam'))"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml"
  width="640" height="480"
  screenX="10" screenY="10"
  onload="onload()" onunload="onunload()"
  persist="screenX screenY width height sizemode">

  <script type="text/javascript;version=1.7" src="JavaScript/moduleloader.js"/>
  <script type="application/x-javascript;version=1.7"><![CDATA[
  ML.importMod("model/account.js");
  ML.importMod("l10n.js");
  ML.importMod("roles.js");
  ML.importMod("exceptions.js");
  ML.importMod("utils.js");
  ML.importMod("services/remoteDebug.js");

  var [remoteJID] = window.arguments;

  var input;
  var dumpValues = [];

  var console = {
      info: function(msg) { dump(msg) }
  }

  var extraProps = {
    dump: dump,
    dumpValues: dumpValues,
    dumps: dumps,
    startVenkman: startVenkman,
    commandConsole: window,
    Components: Components
  }

  function onload() {
    var output = document.getElementById("output");

    input = document.getElementById("input");

    input.history = account.cache.getValue("command-history") || [];

    var link = output.contentDocument.createElement("link");
    link.setAttribute("href", document.location.href.replace(/content\/.*?$/,
      "skin/command/content.css"));
    link.setAttribute("rel", "stylesheet");

    output.contentDocument.getElementsByTagName("HEAD")[0].appendChild(link);
    input.focus();

    input._send = function(withEnter) {
      if (!withEnter)
        return null;

      var val = this._input.value.replace(/\n$/, '');

      if (!val)
        return "";

      exec(val);

      setTimeout(function() {
        account.cache.setValue("command-history", input.history.slice(-50));
      }, 0)

      return val;
    }

    input._tryCompletion = complete;

    account.console =  console;

    window.addEventListener("keypress", handleKeyPress, false);
    output.contentWindow.addEventListener("keypress", handleKeyPress, false);
  }

  function onunload() {
    remoteDebug.endSession();
    if (account.console == console)
      delete account.console;
  }

  function handleKeyPress(event) {
    if (!event.charCode || event.ctrlKey || event.altKey || event.metaKey ||
        event.target.localName == "textbox")
      return;

    input.value += String.fromCharCode(event.charCode);
    input.focus();
  }

  function flushChrome() {
    var prefSvc = Components.classes["@mozilla.org/preferences-service;1"].
    getService(Components.interfaces.nsIPrefBranch);

    prefSvc.setBoolPref("nglayout.debug.disable_xul_cache", true);
    prefSvc.setBoolPref("nglayout.debug.disable_xul_cache", false);
  }

  function indent(value) {
    value = xmlEscape(value);
    value = value.replace(/\n(\s*)/g, function(t, a){
      var val = "<br/>";
      for (var i = 0; i < a.length; i++)
        val+="&nbsp;";
      return val;
    });
    return value;
  }

  function genPropOutput(obj, prop, topLevel) {
    try {
      return genOutput(obj[prop], topLevel);
    } catch (ex) {
      return "<span class='value-error'>###</span>";
    }
  }

  function genOutput(value, topLevel) {
    switch (typeof value) {
      case "object":
        if (value == null)
          return "<span class='value-object'>"+uneval(value)+"</span>";

        if ("length" in value && typeof(value.length) == "number") {
          if (!topLevel)
            if (value.length)
              return "<span class='value-array'>[<span class='value-continue'>...</span>]</span>";
            else
              return "<span class='value-array'>[]</span>";

          var res = "<span class='value-array'>[";
          for (var i = 0; i < value.length; i++)
            if (i > 8) {
              res += ", <span class='value-continue'>...</span>";
              break;
            } else
              res += (i > 0 ? ", " : "") + genPropOutput(value, i, false);
          return res + "]</span>";
        }

        if (!topLevel)
          return "<span class='value-object'>{<span class='value-continue'>...</span>}</span>";

        var res = "<span class='value-object'>{", idx = 0;
        for (var i in value) {
          if (idx++ > 8) {
              res += ", <span class='value-continue'>...</span>";
              break;
          }
          res += (idx > 1 ? ", " : "") + genOutput(i)+": "+genPropOutput(value, i);
        }
        return res += "}</span>";

        break;
      case "string":
        value = topLevel ? indent(uneval(value)) : xmlEscape(uneval(value));
        return "<span class='value-string'>"+value+"</span>";
      case "number":
        return "<span class='value-number'>"+xmlEscape(uneval(value))+"</span>";
      case "boolean":
        return "<span class='value-boolean'>"+xmlEscape(uneval(value))+"</span>";
      case "xml":
        var pp = XML.prettyPrinting;
        XML.prettyPrinting = topLevel;
        value = topLevel ? indent(value.toXMLString()) : xmlEscape(value.toXMLString());
        var val = "<span class='value-xml'>"+value+"</span>";
        XML.prettyPrinting = pp;
        return val;
      case "function":
        if (!topLevel)
          return "<span class='value-function'>function(){<span class='value-continue'>...</span>}</span>"
        return "<span class='value-function'>"+indent(value.toString())+"</span>";
        break;
    }
  }

  function extractExpr(str, suffix) {
    const START      = 0;
    const PROP       = 1
    const STRING1    = 2;
    const STRING1ESC = 3;
    const STRING2    = 4;
    const STRING2ESC = 5;
    const PROPSTART=6;
    const BRACSTART=7

    const complementaryBracket = {
      "}": "{",
      "]": "[",
      ")": "("
    };

    var frame = {start: 0};
    var state = BRACSTART;

    for (var i = 0; i < str.length; i++) {
      var s = str[i];
      switch (state) {
      case BRACSTART:
        if (" \t\n".indexOf(s) >= 0)
          break;

        state = START;
        frame.start = frame.contentStart = i;

      case START:
        if (s == ".") {
          state = PROPSTART;
          frame.subexprEnd = i;
        } else if (s == "\"")
          state = STRING1
        else if (s == "'")
          state = STRING2
        else if ("*=;,&^%!|+-~".indexOf(s) >= 0) {
          frame.start = i+1;
          frame.multiExpr = true;
        } else if ("[{(".indexOf(s) >= 0) {
          frame.subexprEnd = i;
          frame = {prop: !frame.multiExpr && frame.start != i,
                   contentStart: i+1, start: i+1, type: s, parent: frame};
          state = BRACSTART;
        } else if ("]})".indexOf(s) >= 0) {
          if (frame.type != complementaryBracket[s])
            return null;
          frame = frame.parent;
        }
        break;

      case PROPSTART:
        if (" \t\n".indexOf(s) >= 0)
          break;
        frame.propStart = i;
        state = PROP;

      case PROP:
        if (s == ".") {
          state = PROPSTART;
          frame.subexprEnd = i;
        } else if ("*=;,&^%!|+-/:~".indexOf(s) >= 0) {
          state = START;
          frame.start = i+1;
        } else if ("[{(".indexOf(s) >= 0) {
          state = BRACSTART;
          frame.subexprEnd = i;
          delete frame.propStart;
          frame = {prop: true, contentStart: i+1, start: i+1, type: s, parent: frame};
        } else if ("]})".indexOf(s) >= 0) {
          if (frame.type != complementaryBracket[s])
            return null;
          frame = frame.parent;
        } else if ("\"'".indexOf(s) >= 0)
          return null;
        break;

        case STRING1:
          if (s == "\\")
            state = STRING1ESC;
          else if (s == "\"")
            state = START;
          break;

        case STRING1ESC:
          state = STRING1;
          break;

        case STRING2:
          if (s == "\\")
            state = STRING2ESC;
          else if (s == "'")
            state = START;
          break;

        case STRING2ESC:
        state = STRING2;
        break;
      }
    }
    var r = suffix.match(/^\s*]/);
    suffix = r ? r[0].length : 0;

    if (state == START)
      return [str.substring(0, frame.start),
              "",
              str.substring(frame.start),
              suffix];
    else if (state == PROP || state == PROPSTART)
      return [str.substring(0, frame.start),
              str.substring(frame.start, frame.subexprEnd),
              state == PROP ? str.substring(frame.propStart) : "",
              suffix];
    else if (frame.prop && frame.type == "[" && (frame.contentStart == frame.start))
      if (state == BRACSTART)
        return [str.substring(0, frame.parent.start),
                str.substring(frame.parent.start, frame.parent.subexprEnd),
                "",
                suffix];
      else
        return [str.substring(0, frame.parent.start),
                str.substring(frame.parent.start, frame.parent.subexprEnd),
                unescapeJS(str.substring(frame.start+1)),
                suffix];
    return null;
  }

  function findCompletions(prevEntry, cursPos, suffix, str) {
    var val = extractExpr(str, suffix);

    if (!val)
      return doComplete(cursPos, suffix, str, null);

    var expr = val[1];
    var indexPrefix = val[2];
    var prefixLength = val[0].length+val[1].length;
    cursPos += val[3]||0;
    suffix = suffix.substr(val[3]||0);

    if (remoteJID) {
      remoteDebug.completions(remoteJID, expr || "this", indexPrefix,
                              doFindCompletions, expr, indexPrefix, prefixLength,
                              prevEntry, cursPos, suffix, str);
    } else
      doFindCompletions(evalInWindow(expr || "this", window.opener, extraProps),
                        expr, indexPrefix, prefixLength, prevEntry, cursPos,
                        suffix, str);
  }

  function doFindCompletions(val, expr, indexPrefix, prefixLength, prevEntry,
                             cursPos, suffix, str)
  {
    if (val.exception || val.result == null)
      return doComplete(prevEntry, cursPos, suffix, str, null);

    var res = [];

    if (!remoteJID)
      val.result = enumerateMatchingProps(val.result, indexPrefix);

    res = val.result.map(function(w) {
      return w.search(/^[^\W\d]\w*$/) == 0 ?
        expr ? "."+w : w :
        expr ? "["+uneval(w)+"]" : "this["+uneval(w)+"]"
    });

    if (!res.length)
      return doComplete(prevEntry, cursPos, suffix, str, null);

    doComplete(prevEntry, cursPos, suffix, str, [prefixLength, res]);
  }

  var lastCompletionStr, lastCompletionPrefix, lastCompletionResults, lastCompletionIdx;
  function complete(prevEntry) {
    var cursPos = input._input.selectionStart;
    var suffix = input.value.substr(cursPos);
    var str = input.value.substr(0, cursPos);

    if (lastCompletionStr == str) {
      lastCompletionIdx = (lastCompletionResults.length + lastCompletionIdx +
                           (prevEntry ? -1 : 1)) % lastCompletionResults.length;
      lastCompletionStr = lastCompletionPrefix + lastCompletionResults[lastCompletionIdx];

      input.value = lastCompletionStr + suffix;
      input.selectionStart = input.selectionEnd = lastCompletionStr.length;
      return;
    }

    findCompletions(prevEntry, cursPos, suffix, str);
  }

  function doComplete(prevEntry, cursPos, suffix, str, res) {
    if (!res) {
      input._blink();
      lastCompletionStr = lastCompletionResults = null;
      return;
    }

    lastCompletionIdx = prevEntry ? res.length-1 : 0;
    lastCompletionPrefix = str.substr(0, res[0]);
    lastCompletionResults = res[1];
    lastCompletionStr = lastCompletionPrefix + res[1][lastCompletionIdx];

    input.value = lastCompletionStr + suffix;
    input.selectionStart = input.selectionEnd = lastCompletionStr.length;
  }

  function exec() {
    var r, expr = document.getElementById("input").value;
    if (r = expr.match(/debugOn\s*=\s*(?:"([^"]+)"|'([^']+)'|null)/)) {
      remoteJID = r[1] || r[2];
      if (remoteJID)
        appendToOutput("Debugging on <span class='value-string'>"+remoteJID+
                       "</span>", expr, ["status"]);
      else
        appendToOutput("Stopping debugging", expr, ["status"]);

      remoteDebug._debugOn = remoteJID ? new JID(remoteJID).normalizedJID : null;

      return;
    }

    var local = expr.replace(/^\s*local:\s*/, "")

    if (local == expr && remoteJID)
      remoteDebug.eval(remoteJID, expr, showExecResult, expr, true);
    else
      showExecResult(evalInWindow(local, window.opener, extraProps), expr);
  }

  function appendToOutput(val, expr, flags) {
    var output = document.getElementById("output").contentDocument;
    var el = output.createElement("div");

    var classes = (flags||[]).map(function(flag) {
      return flag.replace(/\s+/g, "-")
    }).join(" ");

    flags = (flags||[]).map(function(flag) {
      return "<span class='"+flag.replace(/\s+/g, "-")+"'>"+flag+"</span>"
    }).join("");

    el.setAttribute("class", "exec-unit "+classes);
    el.innerHTML += "<div class='exec-flags'>"+flags+"</div>";
    el.innerHTML += "<div class='exec-expr'>"+(expr||"")+"</div>";
    el.innerHTML += "<div class='exec-result'>"+val+"</div>";

    output.body.appendChild(el);
    output.body.scrollTop = output.body.scrollHeight;
  }

  function showExecResult(val, expr, remote) {
    var flags = [];

    if ("result" in val)
      val = genOutput(val.result, true);
    else if ("dump" in val) {
      flags.push("dump result");
      val = "dumpValues["+val.idx+"] = "+genOutput(val.dump, true);
    } else {
      val = val.exception;
      if (typeof(val) != "string")
        val = exceptionToString(val, "");
      val = indent(val);
      flags.push("exception");
    }
    if (remote)
      flags.push("remote");

    appendToOutput(val, expr ? indent(expr) : "", flags);
  }

  function dump(value) {
    showExecResult({dump: value, idx: dumpValues.length});
    dumpValues.push(value);
  }

  function dumps() {
    var arr = [];
    arr.push.apply(arr, arguments);
    dump(arr);
  }

  function startVenkman() {
    window.open("chrome://venkman/content/venkman.xul", "mozapp:venkman",
                "chrome,extrachrome,menubar,resizable,scrollbars,status,toolbar");
  }

  ]]></script>

  <group id="macMenu"/>

  <toolbox id="mainToolbox">
    <menubar id="macMenuBar"/>
  </toolbox>

  <vbox flex="1">
    <html:iframe flex="1" id="output"/>
    <textbox type="resizable" id="input" multiline="true"/>
  </vbox>
</window>
