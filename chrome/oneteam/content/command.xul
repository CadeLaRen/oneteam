<?xml version="1.0"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/command/command.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>
<?xml-stylesheet href="chrome://branding/locale/branding.css" type="text/css"?>

<?xul-overlay href="chrome://oneteam/content/overlays/macMenuOverlay.xul"?>

<window id="ot:command" windowtype="ot:command" title="OneTeam Commands Console"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml"
  width="640" height="480"
  screenX="10" screenY="10"
  onload="onload()" onunload="onunload()"
  persist="screenX screenY width height sizemode">

  <script type="text/javascript;version=1.7" src="JavaScript/moduleloader.js"/>
  <script type="application/x-javascript;version=1.7"><![CDATA[
  ML.importMod("l10n.js");
  ML.importMod("roles.js");
  ML.importMod("exceptions.js");
  ML.importMod("utils.js");
  ML.importMod("services/remoteDebug.js");

  var input, remoteJID;

  function onload() {
    var output = document.getElementById("output");

    input = document.getElementById("input");

    var link = output.contentDocument.createElement("link");
    link.setAttribute("href", document.location.href.replace(/content\/.*?$/,
      "skin/command/content.css"));
    link.setAttribute("rel", "stylesheet");

    output.contentDocument.getElementsByTagName("HEAD")[0].appendChild(link);
    input.focus();

    input._send = function(withEnter) {
      if (!withEnter)
        return null;
      var val = this._input.value.replace(/\n$/, '');
      exec(val);
      return val;
    }

    input._tryCompletion = complete;

    window.opener.console =  {
      info: function(msg) { dump(msg) }
    }

    window.addEventListener("keypress", handleKeyPress, false);
    output.contentWindow.addEventListener("keypress", handleKeyPress, false);
  }

  function onunload() {
    delete window.opener.console;
  }

  function handleKeyPress(event) {
    if (!event.charCode || event.ctrlKey || event.altKey || event.metaKey ||
        event.target.localName == "textbox")
      return;

    input.value += String.fromCharCode(event.charCode);
    input.focus();
  }

  function flushChrome() {
    var prefSvc = Components.classes["@mozilla.org/preferences-service;1"].
    getService(Components.interfaces.nsIPrefBranch);

    prefSvc.setBoolPref("nglayout.debug.disable_xul_cache", true);
    prefSvc.setBoolPref("nglayout.debug.disable_xul_cache", false);
  }

  function indent(value) {
    value = xmlEscape(value);
    value = value.replace(/\n(\s*)/g, function(t, a){
      var val = "<br/>";
      for (var i = 0; i < a.length; i++)
        val+="&nbsp;";
      return val;
    });
    return value;
  }

  function genPropOutput(obj, prop, topLevel) {
    try {
      return genOutput(obj[prop], topLevel);
    } catch (ex) {
      return "<span class='value-error'>###</span>";
    }
  }

  function genOutput(value, topLevel) {
    switch (typeof value) {
      case "object":
        if (value == null)
          return "<span class='value-object'>"+uneval(value)+"</span>";

        if ("length" in value && typeof(value.length) == "number") {
          if (!topLevel)
            return "<span class='value-array'>[<span class='value-continue'>...</span>]</span>";
          var res = "<span class='value-array'>[";
          for (var i = 0; i < value.length; i++)
            if (i > 8) {
              res += ", <span class='value-continue'>...</span>";
              break;
            } else
              res += (i > 0 ? ", " : "") + genPropOutput(value, i, false);
          return res + "]</span>";
        }

        if (!topLevel)
          return "<span class='value-object'>{<span class='value-continue'>...</span>}</span>";

        var res = "<span class='value-object'>{", idx = 0;
        for (var i in value) {
          if (idx++ > 8) {
              res += ", <span class='value-continue'>...</span>";
              break;
          }
          res += (idx > 1 ? ", " : "") + genOutput(i)+": "+genPropOutput(value, i);
        }
        return res += "}</span>";

        break;
      case "string":
        value = topLevel ? '"'+indent(value)+'"' : xmlEscape(uneval(value));
        return "<span class='value-string'>"+value+"</span>";
      case "number":
        return "<span class='value-number'>"+xmlEscape(uneval(value))+"</span>";
      case "boolean":
        return "<span class='value-boolean'>"+xmlEscape(uneval(value))+"</span>";
      case "xml":
        var pp = XML.prettyPrinting;
        XML.prettyPrinting = topLevel;
        value = topLevel ? indent(value.toXMLString()) : xmlEscape(value.toXMLString());
        var val = "<span class='value-xml'>"+value+"</span>";
        XML.prettyPrinting = pp;
        return val;
      case "function":
        if (!topLevel)
          return "<span class='value-function'>function(){<span class='value-continue'>...</span>}</span>"
        return "<span class='value-function'>"+indent(value.toString())+"</span>";
        break;
    }
  }

  function extractExpr(str) {
    const pairs = {
      "}": "{",
      "]": "[",
      ")": "("
    };

    var stack = [];
    var r, s = str;
    var idx = 0;

    while ((r = s.match(/[()\[\]{}"']/))) {
      idx += r.index+1;
      s = s.substr(r.index+1);
      if (r[0] == "\"" || r[0] == "'") {
        r = s.match(r[0] == "\"" ? /(?:[^\\"]*|\\.)*"/ : /(?:[^\\']*|\\.)*'/);
        if (!r) {
          if (stack.length && stack[0][0] == "[" && !/\S/.test(str.substring(stack[0][1], idx-1))) {
            var start = stack.length ? stack[0][1] : 0;
            var prevStart = stack.length > 1 ? stack[1][1] : start;
            return [str.substr(0, prevStart), str.substring(prevStart, start-1),
                    unescapeJS(str.substr(start+1))];
          }
          return null;
        }
        idx += r.index + r[0].length;
        s = s.substr(r.index + r[0].length);
      } else if (r[0] == "(" || r[0] == "[" || r[0] == "{") {
        stack.unshift([r[0], idx]);
      } else {
        if (!stack.length || stack[0][0] != pairs[r[0]])
          return null;
        stack.shift();
      }
    }

    var start = stack.length ? stack[0][1] : 0;

    if ((r = str.substr(start).match(/.*[\/*=;,&^%!|+-]+/)))
      start += r[0].length;
    s = str.substr(start);

    if ((idx = s.lastIndexOf(".")) > 0)
      return [str.substr(0, start), s.substr(0, idx), s.substr(idx+1)];

    return [str.substr(0, start), "", s];
  }

  function findCompletions(prevEntry, cursPos, suffix, str) {
    var val = extractExpr(str);

    if (!val)
      return doComplete(cursPos, suffix, str, null);

    var expr = val[1];
    var indexPrefix = val[2];
    var prefixLength = val[0].length+val[1].length;

    if (remoteJID) {
      remoteDebug.completions(remoteJID, expr || "this", indexPrefix,
                              doFindCompletions, expr, indexPrefix, prefixLength,
                              prevEntry, cursPos, suffix, str);
    } else
      doFindCompletions(evalInWindow(expr || "this", window.opener), expr,
                        indexPrefix, prefixLength, prevEntry, cursPos,
                        suffix, str);
  }

  function doFindCompletions(val, expr, indexPrefix, prefixLength, prevEntry,
                             cursPos, suffix, str)
  {
    if (val.exception || !val.result)
      return doComplete(prevEntry, cursPos, suffix, str, null);

    var res = [];

    if (remoteJID)
      res = val.result.map(function(w) {
        return w.search(/^[^\W\d]\w*$/) == 0 ?
          expr ? "."+w : w :
          expr ? "["+uneval(w)+"]" : "this["+uneval(w)+"]"
      });
    else
      for (var i in val.result)
        if (i.indexOf(indexPrefix) == 0) {
          var word = i.search(/^[^\W\d]\w*$/) == 0;
          if (expr)
            res.push(word ? "."+i : "["+uneval(i)+"]");
          else
            res.push(word ? i : "this["+uneval(i)+"]");
        }

    if (!res.length)
      return doComplete(prevEntry, cursPos, suffix, str, null);

    doComplete(prevEntry, cursPos, suffix, str, [prefixLength, res.sort()]);
  }

  var lastCompletionStr, lastCompletionPrefix, lastCompletionResults, lastCompletionIdx;
  function complete(prevEntry) {
    var cursPos = input._input.selectionStart;
    var suffix = input.value.substr(cursPos);
    var str = input.value.substr(0, cursPos);

    if (lastCompletionStr == str) {
      lastCompletionIdx = (lastCompletionResults.length + lastCompletionIdx +
                           (prevEntry ? -1 : 1)) % lastCompletionResults.length;
      lastCompletionStr = lastCompletionPrefix + lastCompletionResults[lastCompletionIdx];
      input.value = lastCompletionStr + suffix;
      input.selectionStart = input.selectionEnd = lastCompletionStr.length;
      return;
    }

    findCompletions(prevEntry, cursPos, suffix, str);
  }

  function doComplete(prevEntry, cursPos, suffix, str, res) {
    if (!res) {
      input._blink();
      lastCompletionStr = lastCompletionResults = null;
      return;
    }

    lastCompletionIdx = prevEntry ? res.length-1 : 0;
    lastCompletionPrefix = str.substr(0, res[0]);
    lastCompletionResults = res[1];
    lastCompletionStr = lastCompletionPrefix + res[1][lastCompletionIdx];

    input.value = lastCompletionStr + suffix;
    input.selectionStart = input.selectionEnd = lastCompletionStr.length;
  }

  function exec() {
    var r, expr = document.getElementById("input").value;
    if (r = expr.match(/debugOn\s*=\s*(?:"([^"]+)"|'([^']+)'|null)/)) {
      remoteJID = r[1] || r[2];
      return;
    }

    if (remoteJID)
      remoteDebug.eval(remoteJID, expr, showExecResult, expr, true);
    else
      showExecResult(evalInWindow(expr, window.opener, {
        dump: dump,
        dumps: dumps,
        startVenkman: startVenkman,
        commandConsole: window
      }), expr);
  }

  function showExecResult(val, expr, remote) {
    var output = document.getElementById("output").contentDocument;
    var el = output.createElement("div");

    el.setAttribute("class", "exec-unit"+(remote ? " remote" : ""));
    el.innerHTML += "<div class='exec-expr'>"+indent(expr)+"</div>";

    if ("result" in val)
      el.innerHTML += "<div class='exec-result'>"+genOutput(val.result, true)+"</div>";
    else
      el.innerHTML += "<div class='exec-exception'>Exception:"+
        "<div>"+indent(remoteJID ? val.exception : exceptionToString(val.exception, ""))+"</div></div>";

    output.body.appendChild(el);
    output.body.scrollTop = output.body.scrollHeight;
  }

  function dump(value) {
    var output = document.getElementById("output").contentDocument;

    var el = output.createElement("div");
    el.setAttribute("class", "exec-unit");
    el.innerHTML += "<div class='exec-expr'>Dump result:</div>";
    el.innerHTML += "<div class='exec-result'>"+genOutput(value, true)+"</div>";

    output.body.appendChild(el);
    output.body.scrollTop = output.body.scrollHeight;
  }

  function dumps() {
    var arr = [];
    arr.push.apply(arr, arguments);
    dump(arr);
  }

  function startVenkman() {
    window.open("chrome://venkman/content/venkman.xul", "mozapp:venkman",
                "chrome,extrachrome,menubar,resizable,scrollbars,status,toolbar");
  }

  ]]></script>

  <group id="macMenu"/>

  <toolbox id="mainToolbox">
    <menubar id="macMenuBar"/>
  </toolbox>

  <vbox flex="1">
    <html:iframe flex="1" id="output"/>
    <textbox type="resizable" id="input" multiline="true"/>
  </vbox>
</window>
