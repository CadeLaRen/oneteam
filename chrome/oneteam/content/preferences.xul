<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/preferences/preferences.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/dialog.css" type="text/css"?>
<?xml-stylesheet href="chrome://branding/locale/branding.css" type="text/css"?>

<dialog id="preferences" windowtype="ot:preferences" title="_('Preferences')"
  width="600" height="500"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml"
  buttonlabelaccept="_('OK')" buttonlabelcancel="_('Cancel')"
  buttons="accept,cancel" onload="onLoad()" ondialogaccept="return savePrefs()">

  <script type="text/javascript;version=1.7" src="JavaScript/l10n.js"/>
  <script type="text/javascript;version=1.7"><![CDATA[
    function enableDisableAutoAway(event)
    {
      var el = event.target;

      el.nextSibling.disabled =
        el.parentNode.nextSibling.childNodes[1].disabled = !el.checked;
    }

    function onLoad() {
      var style = window.opener.account.style;

      var iconContainer = document.getElementById("statusIconSet");
      for (var i = 0; i < style.statusIcons.length; i++)
        iconContainer.appendChild(generateIconSetElement(style.statusIcons[i]));

      iconContainer = document.getElementById("smileSet");
      for (i = 0; i < style.smiles.length; i++)
        iconContainer.appendChild(generateIconSetElement(style.smiles[i]));

      document.getElementById("autoAwayCheckbox").
        addEventListener("CheckboxStateChange", enableDisableAutoAway, false);

      document.getElementById("autoXACheckbox").
        addEventListener("CheckboxStateChange", enableDisableAutoAway, false);

      var prefElems = document.getElementsByAttribute("pref", "*");
      for (i = 0; i < prefElems.length; i++) {
        var pref = prefElems[i].getAttribute("pref").split(/[=:]/);
        var val = window.opener.prefManager.getPref(pref[0]);
        if (pref[2] == "int") {
            prefElems[i].setAttribute("regex", "^\\d+$");
            prefElems[i].setAttribute("errortext", _("Please enter number"));
            //prefElems[i].setAttribute("type", "verifiable");
        }
        prefElems[i][pref[1]] = val == null ? "" : val;
        if (window.opener.prefManager.builtinPref(pref[0]))
          prefElems[i].disabled = true;
      }

      prefElems = document.getElementsByAttribute("prefSet", "*");
      for (i = 0; i < prefElems.length; i++) {
        var prefSetter = prefElems[i].getAttribute("prefSet");
        var prefName = prefElems[i].getAttribute("prefName")
        var val = window.opener.prefManager.getPref(prefName);
        try {
        eval("(function(){"+prefSetter+"}).call(__element__)",
             {__element__: prefElems[i], __value__: val == null ? "" : val});
        } catch(ex){}
        if (window.opener.prefManager.builtinPref(pref[0]))
          prefElems[i].disabled = true;
      }
      switchHTTPOptions(document.getElementById("protocol"));
    }

    function focusElement(el)
    {
        var p = el.parentNode;
        while (p && p.localName != "tabpanel")
          p = p.parentNode;
        if (p)
          p.parentNode.selectedPanel = p;

        el.focus();
    }

    function savePrefs()
    {
      var valsToSet = [];
      var prefElems = document.getElementsByAttribute("pref", "*");
      for (i = 0; i < prefElems.length; i++) {
        if (prefElems[i].disabled)
          continue;
        var pref = prefElems[i].getAttribute("pref").split(/[=:]/);
        var val = prefElems[i][pref[1]];

        if (pref[2] == "int" && typeof(val) == "string")
          val = +val;

        valsToSet.push([pref[0], val]);
      }

      prefElems = document.getElementsByAttribute("prefGet", "*");
      for (i = 0; i < prefElems.length; i++) {
        if (prefElems[i].disabled)
          continue;

        try {
          val = eval("(function(){return "+
                     prefElems[i].getAttribute("prefGet")+
                     "}).call(prefElems[i])");
        } catch (error) {
          focusElement(prefElems[i]);
          alert(error);

          return false;
        }

        valsToSet.push([prefElems[i].getAttribute("prefName"), val]);
      }

      for (i = 0; i < valsToSet.length; i++)
        window.opener.prefManager.setPref(valsToSet[i][0], valsToSet[i][1])

      return true;
    }

    function generateIconSetElement(iconSet)
    {
      var rli = document.createElement("richlistitem");
      rli.setAttribute("orient", "vertical");
      rli.setAttribute("class", "iconSetItem");
      rli.model = iconSet;

      var ic = document.createElement("hbox");
      ic.setAttribute("flex", "1");
      for (var i = 0; i < iconSet.icons.length; i++) {
        var icon = document.createElement("image");
        icon.setAttribute("src", iconSet.icons[i].img);
        ic.appendChild(icon);
      }
      rli.appendChild(ic);

      var label = document.createElement("label");
      label.setAttribute("value", iconSet.name+" - "+iconSet.desc);
      rli.appendChild(label);
      return rli;
    }

    var prevType;
    function switchHTTPOptions(el) {
      el.parentNode.nextSibling.collapsed = el.value != "native";
      el.parentNode.nextSibling.nextSibling.collapsed = el.value == "native";

      if (!prevType) {
        prevType = el.value;
        return;
      }

      var port = document.getElementById("port");
      var httpBase = document.getElementById("http-base");

      var portVal = el.parentNode.nextSibling.checked ? "5223" : "5222"

      if (prevType == "native") {
        if (el.value != "native" && port.value == portVal)
          port.value = 5280
      } else if (el.value == "native"  && port.value == "5280")
        port.value = portVal;

      if (el.value == "http-bind")
        httpBase.value = httpBase.value.replace(/http-poll/, "http-bind");
      else if (el.value == "http-polling")
        httpBase.value = httpBase.value.replace(/http-bind/, "http-poll");

      prevType = el.value;
    }

    function switchSSLOption(el) {
      var port = document.getElementById("port");
      if (el.checked && port.value == "5222")
        port.value = 5223;
      if (!el.checked && port.value == "5223")
        port.value = 5222;
    }
  ]]></script>

  <tabbox flex="1">
    <tabs>
      <tab id="general" label="_('General')"/>
      <tab id="connection" label="_('Connection')"/>
      <tab id="status" label="_('Status')"/>
      <tab id="appearance" label="_('Appearance')"/>
    </tabs>
    <tabpanels flex="1">
      <tabpanel orient="vertical">
        <checkbox label="_('Display avatars in roster')" pref="chat.general.showavatars=checked"/>
        <checkbox label="_('Sort contacts by status')" pref="chat.roster.sortbystatus=checked"/>
        <checkbox label="_('Play sounds')" pref="chat.sounds=checked"/>
        <checkbox label="_('Notify about other clients with higher priority')"
                  pref="chat.general.bumppriority=checked"/>
      </tabpanel>

      <tabpanel>
        <grid flex="1">
          <columns>
            <column/>
            <column flex="1"/>
          </columns>
          <rows>
            <row>
              <label value="_('Host:')"/>
              <textbox pref="chat.connection.host=value"/>
            </row>
            <row>
              <label value="_('Port:')"/>
              <textbox id="port" pref="chat.connection.port=value:int"/>
            </row>
            <row>
              <label value="_('Resource:')"/>
              <textbox pref="chat.connection.resource=value"/>
            </row>
            <row>
              <label value="_('Priority:')"/>
              <textbox pref="chat.connection.priority=value:int"/>
            </row>
            <row>
              <label value="_('Connection Method:')"/>
              <menulist id="protocol" pref="chat.connection.type=value"
                        oncommand="switchHTTPOptions(this)">
                <menupopup>
                  <menuitem label="Native" value="native"/>
                  <menuitem label="HTTP Bind" value="http-bind"/>
                  <menuitem label="HTTP Polling" value="http-polling"/>
                </menupopup>
              </menulist>
            </row>
            <checkbox label="_('SSL Connection')" pref="chat.connection.ssl=checked"
                      oncommand="switchSSLOption(this)"/>
            <row>
              <label value="_('HTTP Base:')"/>
              <textbox id="http-base" pref="chat.connection.base=value"/>
            </row>
          </rows>
        </grid>
      </tabpanel>

      <tabpanel>
        <grid flex="1">
          <columns>
            <column/>
            <column/>
            <column flex="1"/>
          </columns>
          <rows>
            <row>
              <checkbox label="_('Automatically set status to \'away\' after')"
                        id="autoAwayCheckbox" checked="true"
                        pref="chat.status.autoaway=checked:bool"/>
              <textbox pref="chat.status.autoaway.time=value:int" size="3"/>
              <label value="_('minutes idle')"/>
            </row>
            <hbox class="entry">
              <label value="_('And set status message to:')"/>
              <textbox pref="chat.status.autoaway.status=value" flex="1"/>
            </hbox>
            <row>
              <checkbox label="_('Automatically set status to \'not available\' after')"
                        id="autoXACheckbox" checked="true"
                        pref="chat.status.autoxa=checked:bool"/>
              <textbox pref="chat.status.autoxa.time=value:int" size="3"/>
              <label value="_('minutes idle')"/>
            </row>
            <hbox class="entry">
              <label value="_('And set status message to:')"/>
              <textbox pref="chat.status.autoxa.status=value" flex="1"/>
            </hbox>
          </rows>
        </grid>
      </tabpanel>

      <tabpanel orient="vertical">
        <label value="_('Default icon set:')"/>
        <richlistbox id="statusIconSet"
                     prefName="chat.general.iconset"
                     prefSet="var c=this.childNodes;
                              for (var i = 0; i &lt; c.length; i++)
                                if(__value__.toLowerCase() == c[i].model.name.toLowerCase())
                                  return this.selectedIndex = i"
                     prefGet="this.selectedItem &amp;&amp; this.selectedItem.model.name"/>
        <checkbox label="_('Use gateway specific icons')" pref="chat.general.usegatewayicons=checked"/>
        <spacer/>
        <label value="_('Default smiles set:')"/>
        <richlistbox id="smileSet"
                     prefName="chat.general.smilesset"
                     prefSet="var c=this.childNodes;
                              for (var i = 0; i &lt; c.length; i++)
                                if(__value__.toLowerCase() == c[i].model.name.toLowerCase())
                                  return this.selectedIndex = i"
                     prefGet="this.selectedItem &amp;&amp; this.selectedItem.model.name"/>
      </tabpanel>
    </tabpanels>
  </tabbox>
</dialog>
