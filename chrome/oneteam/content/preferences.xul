<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/preferences/preferences.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/dialog.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>

<?xul-overlay href="chrome://oneteam/content/overlays/macMenuOverlay.xul"?>

<prefwindow id="preferences"
            windowtype="ot:preferences"
            title="_('Preferences')"
            onload="onLoad()"
            onunload="onUnload()"
            onbeforeaccept="onBeforeAccept()"
            xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <script type="text/javascript;version=1.7" src="JavaScript/moduleloader.js"/>
  <script type="text/javascript;version=1.7"><![CDATA[
    ML.importMod("prefs.js");
    ML.importMod("model/account.js");

    var prefObserver = {
      init: function() {
        prefManager.registerChangeCallback(new Callback(this.onPrefChange, this), "chat.status", true);
        prefManager.registerChangeCallback(new Callback(this.onPrefChange, this), "chat.connection", true);
        prefManager.registerChangeCallback(new Callback(this.onPrefChange, this), "chat.general", true);
      },
      uninit: function() {
        prefManager.unregisterChangeCallback(this.onPrefChange, "chat.status");
        prefManager.unregisterChangeCallback(this.onPrefChange, "chat.connection");
        prefManager.unregisterChangeCallback(this.onPrefChange, "chat.general");
      },
      onPrefChange: function(name, value) {
        if (name == "chat.general.iconset"){
          var iconsContainer = document.getElementById("iconsSet");
          if(iconsContainer)
            iconsContainer.selectItem(value);
        }
        else if (name == "chat.general.smilesset"){
          var smilesContainer = document.getElementById("smilesSet");
          if(smilesContainer)
            smilesContainer.selectItem(value);
        }
      }
    }

    function updateAway(el) {
      el.nextSibling.disabled =
      el.parentNode.nextSibling.childNodes[1].disabled = !el.checked;
    }

    function fieldChanged(el, newValue) {
      if (newValue)
        el.value = newValue;
      document.documentElement.currentPane.userChangedValue(el);
    }

    function updateSSLField() {
      var port = document.getElementById("portField");
      var value = document.getElementById("sslField").checked;
      var newValue;

      if (value && port.value == "5222")
        fieldChanged(port, 5223);
      if (!value && port.value == "5223")
        fieldChanged(port, 5222);
    }

    var prevType;
    function updateConnectionFields() {
      var el = document.getElementById("protocol");
      el.parentNode.nextSibling.collapsed = el.value != "native";
      el.parentNode.nextSibling.nextSibling.collapsed = el.value == "native";

      if (!prevType) {
        prevType = el.value;
        return;
      }

      var port = document.getElementById("portField");
      var httpBase = document.getElementById("http-base");

      var portVal = el.parentNode.nextSibling.checked ? "5223" : "5222"

      if (prevType == "native") {
        if (el.value != "native" && port.value == portVal)
          fieldChanged(port, 5280);
      } else if (el.value == "native" && port.value == "5280")
        fieldChanged(port, portVal);

      if (el.value == "http-bind" || el.value == "https-bind")
        fieldChanged(httpBase, httpBase.value.replace(/http-poll/, "http-bind"));
      else if (el.value == "http-polling")
        fieldChanged(httpBase, httpBase.value.replace(/http-bind/, "http-poll"));

      prevType = el.value;
    }

    function onLoad() {
      prefObserver.init();
    }

    function onBeforeAccept() {
      account.notificationScheme.saveSettings(document.getElementById("notifications").firstChild);
    }

    function initAppearance() {
      var style = account.style;

      var iconsContainer = document.getElementById("iconsSet");
      for (var i = 0; i < style.statusIcons.length; i++)
        iconsContainer.appendChild(generateIconSetElement(style.statusIcons[i]));

      var iconsset = prefManager.getPref("chat.general.iconset");
      if (iconsset)
        setTimeout(function() {
          iconsContainer.value = iconsset;
        }, 100);

      var smilesContainer = document.getElementById("smilesSet");
      for (i = 0; i < style.smiles.length; i++)
        smilesContainer.appendChild(generateIconSetElement(style.smiles[i]));

      var smilesset = prefManager.getPref("chat.general.smilesset");
      if (smilesset)
        setTimeout(function() {
          smilesContainer.value = smilesset;
        }, 100);
    }

    function initNotifications() {
      var fragment = account.notificationScheme.generateSettings(null, document);
      document.getElementById("notifications").appendChild(fragment);
    }

    function onUnload() {
      prefObserver.uninit();
    }

    function generateIconSetElement(iconSet) {
      var rli = document.createElement("richlistitem");
      rli.setAttribute("orient", "vertical");
      rli.setAttribute("class", "iconSetItem");
      rli.setAttribute("id", "iconSet-"+iconSet.name);
      rli.setAttribute("value", iconSet.name);
      rli.model = iconSet;

      var ic = document.createElement("hbox");
      ic.setAttribute("flex", "1");
      ic.setAttribute("align", "end");
      for (var i = 0; i < iconSet.icons.length; i++) {
        var icon = document.createElement("image");
        icon.setAttribute("src", iconSet.icons[i].img);
        ic.appendChild(icon);
      }
      rli.appendChild(ic);

      var label = document.createElement("label");
      label.setAttribute("value", iconSet.name+" - "+iconSet.desc);
      rli.appendChild(label);
      return rli;
    }

    function iconsSetPref(event) {
      prefManager.setPref("chat.general.iconset", event.target.value);
    }

    function smilesSetPref(event) {
      prefManager.setPref("chat.general.smilesset", event.target.value);
    }
  ]]></script>

  <group id="macMenu"/>

  <toolbox id="mainToolbox">
    <menubar id="macMenuBar"/>
  </toolbox>

  <prefpane id="general" label="_('General')">
    <preferences id="general-preferences">
      <preference id="showavatars" name="chat.general.showavatars" type="bool"/>
      <preference id="sortbystatus" name="chat.roster.sortbystatus" type="bool"/>
      <preference id="sounds" name="chat.general.sounds" type="bool"/>
      <preference id="bumppriority" name="chat.general.bumppriority" type="bool"/>
      <preference id="ask_to_quit" name="chat.general.ask_to_quit" type="bool"/>
      <preference id="systray" name="chat.systray" type="bool"/>
    </preferences>
    <checkbox label="_('Sort contacts by status')" preference="sortbystatus"/>
    <checkbox label="_('Play sounds')" preference="sounds"/>
    <checkbox label="_('Notify about other clients with higher priority')"
              preference="bumppriority"/>
    <checkbox label="_('Ask to quit')"
              preference="ask_to_quit"/>
    <checkbox label="_('Show icon in system tray')"
              preference="systray"/>
  </prefpane>

  <prefpane id="connection" label="_('Connection')">
    <preferences id="connection-preferences">
      <preference id="host" name="chat.connection.host" type="string"/>
      <preference id="port" name="chat.connection.port" type="int"/>
      <preference id="resource" name="chat.connection.resource" type="string"/>
      <preference id="priority" name="chat.connection.priority" type="int"/>
      <preference id="type" name="chat.connection.type" type="string"/>
      <preference id="ssl" name="chat.connection.ssl" type="bool"/>
      <preference id="base" name="chat.connection.base" type="string"/>
      <preference id="autoconnect" name="chat.connection.autoconnect" type="bool"/>
      <preference id="reconnect" name="chat.connection.reconnect" type="bool"/>
    </preferences>
    <grid flex="1">
      <columns>
        <column/>
        <column flex="1"/>
      </columns>
      <rows>
        <row>
          <label value="_('Host:')"/>
          <textbox type="verifiable" regex="^(?:\w(?:[\w-]*\w)?\.)*[^\W\d](?:[\w-]*\w)?$"
                   errortext="_('This is not valid hostname')" preference="host"/>
        </row>
        <row>
          <label value="_('Port:')"/>
          <textbox id="portField" label="_('Port:')" preference="port" type="number"/>
        </row>
        <row>
          <label value="_('Resource:')"/>
          <textbox type="verifiable" regex="." errortext="_('Resource can not be empty')"
                   preference="resource"/>
        </row>
        <row>
          <label value="_('Priority:')"/>
          <textbox preference="priority" type="number"/>
        </row>
        <row>
          <label value="_('Connection Method:')"/>
          <menulist id="protocol" preference="type" onselect="updateConnectionFields()">
            <menupopup>
              <menuitem label="Native" value="native"/>
              <menuitem label="HTTP Bind" value="http-bind"/>
              <menuitem label="HTTPS Bind" value="https-bind"/>
              <menuitem label="HTTP Polling" value="http-polling"/>
            </menupopup>
          </menulist>
        </row>
        <checkbox id="sslField" label="_('Old Style SSL Encryption')" preference="ssl"
                  oncommand="updateSSLField()"/>
        <row>
          <label value="_('HTTP Base:')"/>
          <textbox id="http-base" preference="base"/>
        </row>
        <checkbox label="_('Automatically connect at startup')" preference="autoconnect"/>
        <checkbox label="_('Reconnect after loosing connection')" preference="reconnect"/>
      </rows>
    </grid>
  </prefpane>

  <prefpane id="status" label="_('Status')">
    <preferences id="status-preferences">
      <preference id="autoaway" name="chat.status.autoaway" type="bool"/>
      <preference id="autoawaytime" name="chat.status.autoaway.time" type="int"/>
      <preference id="autoawaystatus" name="chat.status.autoaway.status" type="string"/>
      <preference id="autoxa" name="chat.status.autoxa" type="bool"/>
      <preference id="autoxatime" name="chat.status.autoxa.time" type="int"/>
      <preference id="autoxastatus" name="chat.status.autoxa.status" type="string"/>
    </preferences>
    <grid flex="1">
      <columns>
        <column/>
        <column/>
        <column flex="1"/>
      </columns>
      <rows>
        <row>
          <checkbox label="_('Automatically set status to \'away\' after')" id="autoAwayCheckbox"
                    oncommand="updateAway(this)" preference="autoaway"/>
          <textbox preference="autoawaytime" type="number" size="3"/>
          <label value="_('minutes idle')"/>
        </row>
        <hbox class="entry">
          <label value="_('And set status message to:')"/>
          <textbox preference="autoawaystatus" flex="1"/>
        </hbox>
        <row>
          <checkbox label="_('Automatically set status to \'not available\' after')" id="autoXACheckbox"
                    oncommand="updateAway(this)" preference="autoxa"/>
          <textbox preference="autoxatime" type="number" size="3"/>
          <label value="_('minutes idle')"/>
        </row>
        <hbox class="entry">
          <label value="_('And set status message to:')"/>
          <textbox preference="autoxastatus" flex="1"/>
        </hbox>
      </rows>
    </grid>
  </prefpane>
  <prefpane id="appearance" label="_('Appearance')" onpaneload="initAppearance()">
    <preferences id="appearance-preferences">
      <preference id="usegatewayicons" name="chat.general.usegatewayicons" type="bool"/>
      <preference id="iconset" name="chat.general.iconset" type="string"/>
      <preference id="smilesset" name="chat.general.smilesset" type="string"/>
    </preferences>
    <label value="_('Default icon set:')"/>
    <richlistbox id="iconsSet" preference="iconset"
                 onsynctopreference="return this.value"
                 onselect="this.parentNode.userChangedValue(this)"/>
    <checkbox label="_('Use gateway specific icons')" preference="usegatewayicons"/>
    <spacer/>
    <label value="_('Default smiles set:')"/>
    <richlistbox id="smilesSet" preference="smilesset"
                 onsynctopreference="return this.value"
                 onselect="this.parentNode.userChangedValue(this)"/>
  </prefpane>

  <prefpane id="notifications" label="_('Notifications')" onpaneload="initNotifications()">
  </prefpane>

</prefwindow>
