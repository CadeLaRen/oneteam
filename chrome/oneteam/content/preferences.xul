<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/preferences/preferences.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>

<?xul-overlay href="chrome://oneteam/content/overlays/macMenuOverlay.xul"?>

<prefwindow id="preferences"
            windowtype="ot:preferences"
            title="_('Preferences')"
            onload="onLoad()"
            xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <script type="text/javascript;version=1.7" src="JavaScript/moduleloader.js"/>
  <script type="text/javascript;version=1.7"><![CDATA[
    ML.importMod("prefs.js");
    ML.importMod("model/account.js");

    function enableDisableAutoAway(event) {
      var el = event.target;

      el.nextSibling.disabled =
        el.parentNode.nextSibling.childNodes[1].disabled = !el.checked;
    }

    function onLoad() {
      var style = account.style;
      var iconContainer = document.getElementById("statusIconSet");
      for (var i = 0; i < style.statusIcons.length; i++)
        iconContainer.appendChild(generateIconSetElement(style.statusIcons[i]));
      var iconset = prefManager.getPref("chat.general.iconset");
      if(iconset)
        iconContainer.selectItem(document.getElementsByAttribute('value', iconset)[0]);
      

      iconContainer = document.getElementById("smileSet");
      for (i = 0; i < style.smiles.length; i++)
        iconContainer.appendChild(generateIconSetElement(style.smiles[i]));
      var smilesset = prefManager.getPref("chat.general.smilesset");
      if(smilesset)
        iconContainer.selectItem(document.getElementsByAttribute('value', smilesset)[0]);
        
      document.getElementById("autoAwayCheckbox").addEventListener("CheckboxStateChange", enableDisableAutoAway, false);

      document.getElementById("autoXACheckbox").addEventListener("CheckboxStateChange", enableDisableAutoAway, false);

      switchHTTPOptions(document.getElementById("protocol"));
    }

    function generateIconSetElement(iconSet) {
      var rli = document.createElement("richlistitem");
      rli.setAttribute("orient", "vertical");
      rli.setAttribute("class", "iconSetItem");
      rli.setAttribute("value", iconSet.name);
      rli.model = iconSet;

      var ic = document.createElement("hbox");
      ic.setAttribute("flex", "1");
      ic.setAttribute("align", "end");
      for (var i = 0; i < iconSet.icons.length; i++) {
        var icon = document.createElement("image");
        icon.setAttribute("src", iconSet.icons[i].img);
        ic.appendChild(icon);
      }
      rli.appendChild(ic);

      var label = document.createElement("label");
      label.setAttribute("value", iconSet.name+" - "+iconSet.desc);
      rli.appendChild(label);
      return rli;
    }

    function iconSetPref(event) {
      prefManager.setPref("chat.general.iconset", event.target.value);
    }

    function smilesSetPref(event) {
      prefManager.setPref("chat.general.smilesset", event.target.value);
    }

    var prevType;
    function switchHTTPOptions(el) {
      el.parentNode.nextSibling.collapsed = el.value != "native";
      el.parentNode.nextSibling.nextSibling.collapsed = el.value == "native";

      if (!prevType) {
        prevType = el.value;
        return;
      }

      var port = document.getElementById("port");
      var httpBase = document.getElementById("http-base");

      var portVal = el.parentNode.nextSibling.checked ? "5223" : "5222"

      if (prevType == "native") {
        if (el.value != "native" && port.value == portVal)
          port.value = 5280
      } else if (el.value == "native"  && port.value == "5280")
        port.value = portVal;

      if (el.value == "http-bind")
        httpBase.value = httpBase.value.replace(/http-poll/, "http-bind");
      else if (el.value == "http-polling")
        httpBase.value = httpBase.value.replace(/http-bind/, "http-poll");

      prevType = el.value;
    }

    function switchSSLOption(el) {
      var port = document.getElementById("port");
      if (el.checked && port.value == "5222")
        port.value = 5223;
      if (!el.checked && port.value == "5223")
        port.value = 5222;
    }
  ]]></script>

  <group id="macMenu"/>

  <toolbox id="mainToolbox">
    <menubar id="macMenuBar"/>
  </toolbox>
  
  <prefpane id="general" label="_('General')">
    <preferences id="general-preferences">
      <preference id="showavatars" name="chat.general.showavatars" type="bool"/>
      <preference id="sortbystatus" name="chat.roster.sortbystatus" type="bool"/>
      <preference id="sounds" name="chat.sounds" type="bool"/>
      <preference id="bumppriority" name="chat.general.bumppriority" type="bool"/>
      <preference id="ask_to_quit" name="chat.general.ask_to_quit" type="bool"/>
      <preference id="systray" name="chat.systray" type="bool"/>
    </preferences>
    <checkbox label="_('Display avatars in roster')" preference="showavatars"/>
    <checkbox label="_('Sort contacts by status')" preference="sortbystatus"/>
    <checkbox label="_('Play sounds')" preference="sounds"/>
    <checkbox label="_('Notify about other clients with higher priority')"
              preference="bumppriority"/>
    <checkbox label="_('Ask to quit')"
              preference="ask_to_quit"/>
    <checkbox label="_('Show the system tray icon.')"
              preference="systray"/>
  </prefpane>
  
  <prefpane id="connection" label="_('Connection')">
    <preferences id="connection-preferences">
      <preference id="host" name="chat.connection.host" type="string"/>
      <preference id="port" name="chat.connection.port" type="int"/>
      <preference id="resource" name="chat.connection.resource" type="string"/>
      <preference id="priority" name="chat.connection.priority" type="int"/>
      <preference id="type" name="chat.connection.type" type="string"/>
      <preference id="ssl" name="chat.connection.ssl" type="bool"/>
      <preference id="base" name="chat.connection.base" type="string"/>
      <preference id="autoconnect" name="chat.connection.autoconnect" type="bool"/>
    </preferences>
    <grid flex="1">
      <columns>
        <column/>
        <column flex="1"/>
      </columns>
      <rows>
        <row>
          <label value="_('Host:')"/>
          <textbox label="_('Host:')" preference="host"/>
        </row>
        <row>
          <label value="_('Port:')"/>
          <textbox label="_('Port:')" preference="port" type="number"/>
        </row>
        <row>
          <label value="_('Resource:')"/>
          <textbox label="_('Resource:')" preference="resource"/>
        </row>
        <row>
          <label value="_('Priority:')"/>
          <textbox preference="priority" type="number"/>
        </row>
        <row>
          <label value="_('Connection Method:')"/>
          <menulist id="protocol" preference="type" oncommand="switchHTTPOptions(this)">
            <menupopup>
              <menuitem label="Native" value="native"/>
              <menuitem label="HTTP Bind" value="http-bind"/>
              <menuitem label="HTTP Polling" value="http-polling"/>
            </menupopup>
          </menulist>
        </row>
          <checkbox label="_('SSL Connection')" preference="ssl" oncommand="switchSSLOption(this)"/>
        <row>
          <label value="_('HTTP Base:')"/>
          <textbox id="http-base" preference="base"/>
        </row>
        <checkbox label="_('Automatically connect at startup')" preference="autoconnect"/>
      </rows>
    </grid>
  </prefpane>
<!--
  todo = switch etc avec observers
-->
  
  <prefpane id="status" label="_('Status')">
    <preferences id="status-preferences">
      <preference id="autoaway" name="chat.status.autoaway" type="bool"/>
      <preference id="autoawaytime" name="chat.status.autoaway.time" type="int"/>
      <preference id="autoawaystatus" name="chat.status.autoaway.status" type="string"/>
      <preference id="autoxa" name="chat.status.autoxa" type="bool"/>
      <preference id="autoxatime" name="chat.status.autoxa.time" type="int"/>
      <preference id="autoxastatus" name="chat.status.autoxa.status" type="string"/>
    </preferences>
    <grid flex="1">
      <columns>
        <column/>
        <column/>
        <column flex="1"/>
      </columns>
      <rows>
        <row>
          <checkbox label="_('Automatically set status to \'away\' after')" id="autoAwayCheckbox" preference="autoaway"/>
          <textbox preference="autoawaytime" size="3"/>
          <label value="_('minutes idle')"/>
        </row>
        <hbox class="entry">
          <label value="_('And set status message to:')"/>
          <textbox preference="autoawaystatus" flex="1"/>
        </hbox>
        <row>
          <checkbox label="_('Automatically set status to \'not available\' after')" id="autoXACheckbox" preference="autoxa"/>
          <textbox preference="autoxatime" size="3"/>
          <label value="_('minutes idle')"/>
        </row>
        <hbox class="entry">
          <label value="_('And set status message to:')"/>
          <textbox preference="autoxastatus" flex="1"/>
        </hbox>
      </rows>
    </grid>
  </prefpane>
  
  <prefpane id="appearance" label="_('Appearance')">
    <preferences id="appearance-preferences">
      <preference id="usegatewayicons" name="chat.general.usegatewayicons" type="bool"/>
    </preferences>
    <label value="_('Default icon set:')"/>
    <richlistbox id="statusIconSet" onselect="iconSetPref(event);"/>
    <checkbox label="_('Use gateway specific icons')" preference="usegatewayicons"/>
    <spacer/>
    <label value="_('Default smiles set:')"/>
    <richlistbox id="smileSet" onselect="smilesSetPref(event);"/>
  </prefpane>
</prefwindow>
