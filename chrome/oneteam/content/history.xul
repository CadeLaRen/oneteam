<?xml version="1.0" encoding="ISO-8859-1"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/content/bindings/bindings.css" type="text/css"?>
<?xml-stylesheet href="chrome://branding/locale/branding.css" type="text/css"?>

<window id="ot:history" title="History Manager" width="640" height="550"
    onload="onLoad()" onunload="onUnload()" persist="width height" windowtype="ot:history"
    xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <script type="text/javascript;version=1.7" src="JavaScript/l10n.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/roles.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/dateutils.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/utils.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/colorutils.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/modeltypes.js"/>
  <script type="text/javascript;version=1.7" src="JavaScript/model/messages.js"/>

  <script type="text/javascript;version=1.7"><![CDATA[
    JID = window.opener.JID;
    MessagesThread = window.opener.MessagesThread;
    Message = window.opener.Message;
    account = window.opener.account;
    prefManager = window.opener.prefManager;
    contact = window.arguments && window.arguments[0];

    function TreeView(tree) {
      this.wrappedJSObject = this;
      tree.myView = this;
// #ifdef XULAPP
      tree.view = this;
/* #else
      this._treeEl = tree;
// #endif */
    }

    TreeView.prototype =
    {
      selection: null,
      isContainer: function(row) { return false; },
      isSeparator: function(row) { return false; },
      isSorted: function() { return true; },
      getLevel: function(row) { return 0; },
      getImageSrc: function(row,col) { return null; },
      getRowProperties: function(row,props) {},
      getCellProperties: function(row,col,props) {},
      getColumnProperties: function(colid,col,props) {},
      selectionChanged: function() {},
      cycleHeader: function(){},

      get rowCount() {
        return this._results ? this._results.length : 0
      },

      get currentObject()
      {
        if (this._inClear || !this._results)
          return null;
        if (this._treeEl)
          return this._treeEl.body.childNodes[this._treeEl.currentIndex].model;
        return this._results[this.selection.currentIndex];
      },

      getCellText : function(row, column)
      {
        if (row > this._results.length)
          return "ERROR";
        return column.id == "jid" ? this._results[row].jid :
          formatDate(this._results[row].time, null, "short", "long");
      },

      setTree: function(tree) {
        this._tree = tree;
      },

      _updateTree: function(newValue)
      {
        var len1 = this._results ? this._results.length : 0;
        this._results = newValue;
        if (this._tree) {
          var len2 = newValue ? this._results.length : 0;
          this._tree.rowCountChanged(len1 > len2 ? len1 : len2, len2 - len1);
          this._tree.invalidate()
        }
      },

      _clear: function()
      {
        if (this.selection)
          this.selection.clearSelection();
        this._inClear = true;
        if (this._treeEl) {
          while (this._treeEl.body.firstChild)
            this._treeEl.body.removeChild(this._treeEl.body.firstChild);
        } else
          this._updateTree(null);
        this._inClear = false;
      },

      _inBatch: 0,

      _startBatchUpdate: function() { this._inBatch++ },

      _endBatchUpdate: function()
      {
        if (--this._inBatch == 0 && !this._treeEl)
          this._updateTree(this._newResults || []);
        this._newResults = null;
      },

      _addRecord: function(value)
      {
        if (this._treeEl) {
          var item = document.createElement("treeitem");
          var row = document.createElement("treerow");

          item.appendChild(row);
          item.model = value;

          row.appendChild(document.createElement("treecell")).
                      setAttribute("label", value.jid);
          if (value.date)
            row.appendChild(document.createElement("treecell")).
                        setAttribute("label", readableTimestamp(value.date));

          this._treeEl.body.insertBefore(item, this._treeEl.body.firstChild);

          return;
        } else if (this._inBatch) {
          if (!this._newResults)
            this._newResults = []
          this._newResults.push(value);
        } else {
          this._updateTree((this._results || []).concat([value]));
        }
      }
    };

    var searchThreads, searchMessages;
    var contactsList, contactsThreads, contactsMessages;
    var conferencesList, conferencesThreads, conferencesMessages;
    var regToken = new window.opener.RegistrationToken();

    function onLoad() {
// #ifdef XULAPP
      searchThreads = new TreeView(document.getElementById("search-threads"));
      searchMessages = document.getElementById("search-view");
      searchMessages.scrollToBottom = false;
// #endif

      contactsList = new TreeView(document.getElementById("contacts-list"));
      contactsThreads = new TreeView(document.getElementById("contacts-threads"));
      contactsMessages = document.getElementById("contacts-view");
      contactsMessages.scrollToBottom = false;

      if (contact) {
        var list = document.getElementById("contacts-list");
        var tabs = document.getElementById("tabs");
        tabs.value = "chats";

        tabs.collapsed = list.collapsed =
          list.nextSibling.collapsed = true;

        regToken.merge(account.historyMgr.deliverThreadsWithJid(contactsThreads, null, contact));

        return;
      }

      conferencesList = new TreeView(document.getElementById("conferences-list"));
      conferencesThreads = new TreeView(document.getElementById("conferences-threads"));
      conferencesMessages = document.getElementById("conferences-view");
      conferencesMessages.scrollToBottom = false;

      account.historyMgr.deliverContactsList(contactsList, regToken);
      account.historyMgr.deliverConferencesList(conferencesList, regToken);
    }

    function onUnload() {
      regToken.unregisterFromAll();
    }

    function updateSearch(ev, val)
    {
      if (ev.keyCode != KeyEvent.DOM_VK_RETURN)
        return;

      if (searchThreads.token){
        searchThreads.token.unregisterFromAll();
        regToken.unmerge(searchThreads.token);
        searchThreads.token = null;
      }
      searchThreads._clear();

      searchThreads.token = account.historyMgr.deliverSearchResults(searchThreads, regToken, val);
    }

    function updateThreads(tree, view)
    {
      if (view.token) {
        view.token.unregisterFromAll();
        regToken.unmerge(view.token);
        view.token = null;
      }
      view._clear();
      if (tree.myView.currentObject) {
        view.token = account.historyMgr.deliverThreadsWithJid(view, null, tree.myView.currentObject);
        regToken.merge(view.token);
      }
    }

    function updateMessages(tree, view)
    {
      view.clear();
      view.model = tree.myView.currentObject;
    }
  ]]></script>

  <tabbox flex="1">
    <tabs id="tabs">
<!-- #ifdef XULAPP -->
      <tab value="search" label="Search"/>
<!-- #endif -->
      <tab value="chats" label="Chats"/>
      <tab value="conferences" label="Conferences"/>
    </tabs>
    <tabpanels flex="1">
<!-- #ifdef XULAPP -->
      <tabpanel>
        <vbox flex="1">
          <hbox align="center">
            <label value="Search:"/>
            <textbox id="search" flex="1" onkeypress="updateSearch(event, this.value)"/>
          </hbox>
          <tree id="search-threads" height="150" persist="height" hidecolumnpicker="true"
              seltype="single" onselect="updateMessages(this, searchMessages)">
            <treecols>
              <treecol primary="true" flex="5" label="JID" id="jid"/>
              <splitter class="tree-splitter"/>
              <treecol flex="1" label="Date" id="date"/>
            </treecols>
            <treechildren/>
          </tree>
          <splitter/>
          <chatpane-view id="search-view" flex="1"/>
        </vbox>
      </tabpanel>
<!-- #endif -->
      <tabpanel>
        <hbox flex="1">
          <tree id="contacts-list" width="250" persist="width" hidecolumnpicker="true"
              seltype="single" onselect="updateThreads(this, contactsThreads)">
            <treecols>
              <treecol primary="true" flex="1" id="jid" hideheader="true"/>
            </treecols>
            <treechildren/>
          </tree>
          <splitter/>
          <vbox flex="1">
            <tree id="contacts-threads" height="150" persist="height" hidecolumnpicker="true"
              seltype="single" onselect="updateMessages(this, contactsMessages)">
              <treecols>
                <treecol primary="true" flex="5" label="JID" id="jid"/>
                <splitter class="tree-splitter"/>
                <treecol flex="1" label="Date" id="date"/>
              </treecols>
              <treechildren/>
            </tree>
            <splitter/>
            <chatpane-view id="contacts-view" flex="1"/>
          </vbox>
        </hbox>
      </tabpanel>
      <tabpanel>
        <hbox flex="1">
          <tree id="conferences-list" width="250" persist="width" hidecolumnpicker="true"
              seltype="single" onselect="updateThreads(this, conferencesThreads)">
            <treecols>
              <treecol primary="true" flex="1" id="jid" hideheader="true"/>
            </treecols>
            <treechildren/>
          </tree>
          <splitter/>
          <vbox flex="1">
            <tree id="conferences-threads" height="150" persist="height" hidecolumnpicker="true"
              seltype="single" onselect="updateMessages(this, conferencesMessages)">
              <treecols>
                <treecol primary="true" flex="5" label="JID" id="jid"/>
                <splitter class="tree-splitter"/>
                <treecol flex="1" label="Date" id="date"/>
              </treecols>
              <treechildren/>
            </tree>
            <splitter/>
            <chatpane-view id="conferences-view" flex="1"/>
          </vbox>
        </hbox>
      </tabpanel>
    </tabpanels>
  </tabbox>

</window>
