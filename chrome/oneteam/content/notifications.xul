<?xml version="1.0"?>

<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam/skin/notifications/notifications.css" type="text/css"?>
<?xml-stylesheet href="chrome://oneteam-branding/locale/branding.css" type="text/css"?>

<window id="ot:popupnotification" windowtype="ot:notification" onload="onLoad()"
  onunload="service._updatePositions(window, true)"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <script type="text/javascript;version=1.7" src="JavaScript/moduleloader.js"/>
  <script type="text/javascript;version=1.7"><![CDATA[
    ML.importMod("model/account.js");

    var [service, _title, msg, icon, clickAction, win, animation] = window.arguments;
    var img, canvas, tmpCanvas;

    function xmlEscape(str)
    {
        if (str == null)
            return "";
        return str.toString().
            replace(/&/g,"&amp;").
            replace(/</g,"&lt;").
            replace(/>/g,"&gt;").
            replace(/\'/g,"&apos;").
            replace(/\"/g,"&quot;");
    }

    function xmlUnescape(str)
    {
        if (str == null)
            return "";
        return str.toString().
            replace(/&lt;/g,"<").
            replace(/&gt;/g,">").
            replace(/&apos;/g,"'").
            replace(/&quot;/g,"\"").
            replace(/&amp;/g,"&");
    }

    function sanitizeHtml(str) {
      const re = /<(\/?)(b|i|u|span|br)((?:\s+(?:\w+\s*=\s*(?:'[^']*'|"[^"]")))*)\s*(\/?)>/gi
      const are = /\s*(\w+)\s*=\s*(?:"([^"]*)"|'([^']*)')/g
      var match, match2, pos = 0, stack = [[null, "", ""]];

      while (match = re.exec(str)) {
        stack[stack.length-1][2] += xmlEscape(xmlUnescape(str.substring(pos, match.index)));
        pos = match.index + match[0].length;
        var tagName = match[2].toLowerCase();

        if (match[4] && tagName != "br") {
          pos = match.index;
          continue;
        }

        if (match[1]) {
          if (tagName == stack[stack.length-1][0]) {
            var inf = stack.pop();
            stack[stack.length-1][2] += "<"+inf[0]+inf[1]+">"+inf[2]+"</"+inf[0]+">";
          }
        } else {
          if (tagName == "br") {
            stack[stack.length-1][2] += "<br/>";
          } else {
            var attrs = "";
            while (match2 = are.exec(match[3])) {
              if (match2[1] == "style") {
                var styles = xmlUnescape(match2[2]||match2[3]).split(/\s*;\s*/), stylesRes = "";
                for (var i = 0; i < styles.length; i+=2) {
                  var pair = perlSplit(styles[i], /\s*:\s*/, 2);
                  if (/^(?:font-size|color|font-family|font-style|font-weight|text-decoration)$/.test(pair[0]))
                    stylesRes += pair[0]+":"+pair[1]+";";
                }
                if (stylesRes)
                  attrs += " style=\""+xmlEscape(stylesRes)+"\"";
              }
            }
            stack.push([tagName, attrs, ""]);
          }
        }
      }
      stack[stack.length-1][2] += xmlEscape(xmlUnescape(str.substring(pos)));

      while (stack.length > 1) {
        var inf = stack.pop();
        stack[stack.length-1][2] += "<"+inf[0]+inf[1]+">"+inf[2]+"</"+inf[0]+">";
      }
      return stack[0][2];
    }

    function onLoad() {
      window.setTimeout("window.close()", 5000);
      document.getElementById("titleContent").innerHTML = sanitizeHtml(_title);
      document.getElementById("messageContent").innerHTML = sanitizeHtml(msg);

      if (icon && /^(?:(?:(?:jar:)?http[s]?:\/\/)|data:|chrome:|file:|resource:)/.test(icon)) {
        img = document.getElementById("messageImg");
        img.src = icon;
        if (animation == "fadein" || animation == "fadeout") {
          canvas = document.getElementById("messageCanvas").getContext("2d");
          tmpCanvas = document.getElementById("tmpCanvas").getContext("2d");
        } else
          img.style.display = "";
      } else
        updatePosition();
    }

    function updateSize() {
      var width = img.naturalWidth;
      var height = img.naturalHeight
      var ratioW = 80/width;
      var ratioH = 60/height;

      if (ratioW < 1 || ratioH < 1) {
        var ratio = ratioW > ratioH ? ratioH : ratioW;
        width = parseInt(width*ratio);
        height = parseInt(height*ratio);
        img.style.width = width+"px";
        img.style.height = height+"px";
      }

      if (tmpCanvas) {
        canvas.canvas.style.display = "";
        canvas.canvas.width = tmpCanvas.canvas.width = width;
        canvas.canvas.height = tmpCanvas.canvas.height = height;

        tmpCanvas.drawImage(img, 0, 0, width, height);

        var imgData = tmpCanvas.getImageData(0, 0, width, height)
        var data = imgData.data, idx = 0;
        for (var i = 0; i < width*height; i++) {
          data[idx] = data[idx+1] = data[idx+2] =
            data[idx]*0.3+data[idx+1]*0.59+data[idx+2]*0.11;
          idx += 4;
        }
        tmpCanvas.putImageData(imgData, 0, 0);

        var [src, dst] = animation == "fadein" ?
          [tmpCanvas.canvas, img] :
          [img, tmpCanvas.canvas];

        var d = { steps: 50, step: 0, src: src, dst: dst, width: width, height: height};
        fade(d);
        d.timeout = setInterval(fade, 20, d);
      }

      window.sizeToContent();
      updatePosition();
    }

    function fade(d) {
      canvas.globalCompositeOperation = "copy";
      canvas.globalAlpha = 1;
      canvas.drawImage(d.src, 0, 0, d.width, d.height);
      canvas.globalCompositeOperation = "over";
      canvas.globalAlpha = d.step/d.steps;
      canvas.drawImage(d.dst, 0, 0, d.width, d.height);

      d.step++;

      if (d.step == d.steps)
        clearInterval(d.timeout);
    }

    function updatePosition() {
      if (window.outerHeight > 1)
        service._updatePositions(window, false);
      else
        window.setTimeout(updatePosition, 50);
    }

    function onClick() {
      if (win)
        win.focus();
      try {
        if (typeof(clickAction) == "string") {
          var sandbox = Components.utils.Sandbox(win);
          sandbox.window = win;
          Components.utils.evalInSandbox("with(window){(function(){"+clickAction+"}).call(window)}", sandbox);
        } else if (clickAction)
          clickAction.call();
      } catch(ex) {}
      window.close();
    }
  ]]></script>

  <vbox id="container" onclick="onClick()">
    <description id="title">
      <span xmlns="http://www.w3.org/1999/xhtml" id="titleContent"/>
    </description>
    <hbox id="messageInfo" align="center">
      <html:div>
        <html:img id="messageImg" style="display: none" onload="updateSize()" onerror="updatePosition()"/>
        <html:canvas id="messageCanvas" style="display: none" />
        <html:canvas id="tmpCanvas" style="display: none" />
      </html:div>
      <description id="message">
        <span xmlns="http://www.w3.org/1999/xhtml" id="messageContent"/>
      </description>
    </hbox>
  </vbox>

</window>
