<?xml version="1.0"?>

<bindings 
  xmlns="http://www.mozilla.org/xbl"
  xmlns:xbl="http://www.mozilla.org/xbl"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml">
  
	<binding id="messagebox">
	<content>
		  <xul:iframe id="messagehistory" flex="1"/>
	</content>

	
	
	<implementation>
		<property name="NOAVATAR" value="nullbody"/>
		  <method name="clear">
			<body><![CDATA[
				var frame = document.getAnonymousNodes(this)[0];
				while(frame.contentDocument.documentElement.firstChild != null) {
				frame.contentDocument.documentElement.removeChild(
					frame.contentDocument.documentElement.firstChild);
				}
				
			/*
				frame.contentDocument.designMode = "on";
				var ed = frame.docShell.
				  QueryInterface(Components.interfaces.nsIEditorDocShell).editor;
				ed.selectAll();
				ed.deleteSelection(0);
				frame.contentDocument.designMode = "off";
		*/
			  ]]></body>
		  </method>		
		<method name="addMessage">
			<parameter name="nick"/>
			<parameter name="jid"/>
			<parameter name="message"/>
			<parameter name="incoming"/>
			<parameter name="avatar"/>
			<body><![CDATA[

				if(!message || message.replace == null) // we don't have to write stuff
					return; 
			
				if (nick.indexOf(" ") > 2){
					nick = nick.split(" ")[0];
				}
			
				message = message.replace(/\n/g, "<br/>");
				var inc = (incoming ? "in" : "out");
				var firstline = !(this.previousJid == jid || jid == null);

				/* heartbreak code ;)
				const  maxlength = 20;
				var text = message.split(" ");
				for each ( word in text ) {
					if ( word.length > maxlength ) {
						while ( word.length > maxlength ) {
							var sub = word.substr(0, maxlength);
							if(sub.indexOf("<") == -1 && sub.indexOf(">") == -1)
								message = message.replace(sub, sub+" ");
							word = word.substr(maxlength);
						}
						
					}
				}
				*/
			
				if (message.indexOf("/me") == 0) {
					message = message.substring(3);
					this.addAction(nick, message, inc);	
					this.previousJid = null;
				} else {
					nick = nick + ": ";
					
					var extra = "";
					if(avatar != null && avatar != ""){
						
						if(avatar == "NOAVATAR") {
			dumpln("noavatar");
							nick = "<span alt='"+nick+"' class='avatar noavatar' />"; 
						} else {
							nick = "<img alt='"+nick+"' class='avatar' src='data:image/jpeg;base64,"+avatar+"'/>"; 
						}
						extra = " class='convstyle' "; // make room for it
						if (!firstline) {
			dumpln("firstline");
							nick = "<span class='avatar empty' />"; 
						}
						firstline = true; // show the avatar		
					}
			
			
					this.write("<message " + extra + " type='" + inc + "' firstline='" + firstline + "'><nick>"
						+ nick +"</nick><content>" + message + "</content></message>");
					
					this.previousJid = jid;

				}
				
				
			]]></body>		
		</method>
		<method name="loadXml">
			<parameter name="xml"/>
			<parameter name="name"/>
			<parameter name="filter"/>
			<body><![CDATA[
				this.clear();
			
				var frame = document.getAnonymousNodes(this)[0];
				//frame.setAttribute("src", "file://"+ xml);

				var ownerDocument = document.implementation.createDocument("", "", null);
				var processor = new XSLTProcessor();
			
				var dataXML = document.implementation.createDocument("", "", null);
				dataXML.load("file://"+xml);
				var me = this;
				function onXslLoad(){
					processor.importStylesheet(dataXSL);
					processor.setParameter(null, "name", name );
					processor.setParameter(null, "filter", filter ? filter : "" );
					var newFragment = processor.transformToFragment(dataXML, ownerDocument);
					frame.contentDocument.documentElement.appendChild(newFragment);
					me.scrollToBottom();
				}
				var dataXSL = document.implementation.createDocument("", "", null);
				dataXSL.addEventListener("load", onXslLoad, false);
				dataXSL.load("chrome://chat/content/gui/history.xsl");	

			
			]]></body>		
		</method>
		<method name="addError">
			<parameter name="message"/>
			<body><![CDATA[
				message = message.replace(/\n/g, "<br/>");
				this.write("<message type='error'><content>" + message + "</content></message>");
				this.previousJid = null;
			]]></body>		
		</method>
		<method name="addAction">
			<parameter name="nick"/>
			<parameter name="message"/>
			<parameter name="inc"/>
			<body><![CDATA[
				message = message.replace(/\n/g, "<br/>");
				this.write("<message type='" + inc + "'><action>"+nick+ " " +message+"</action></message>");
				this.previousJid = null;
			]]></body>		
		</method>

		
		<method name="write">
			<parameter name="html"/>
			<body><![CDATA[
				
				var frame = document.getAnonymousNodes(this)[0];

				if(!frame.contentDocument.textContent) 
					frame.contentDocument.write(this.header);
				frame.contentDocument.write(html);
				this.scrollToBottom();
			]]></body>		
		</method>

		<method name="scrollToBottom">
			<parameter name="html"/>
			<body><![CDATA[
				var frame = document.getAnonymousNodes(this)[0];
				frame.contentWindow.scrollTo(0,frame.contentWindow.scrollMaxY+200); 
			]]></body>		
		</method>
		
		<constructor>
			<![CDATA[
				this.previousJid = null;
				var me = this;
				this.header = "<html><head><link rel='stylesheet' type='text/css' href='chrome://chat/skin/chat.css'/></head><body>";
				
				//win.setCursor("auto");
							
			]]>
		</constructor>		
	</implementation>
	<!--
	<handlers>
		<handler attachto="element" event="mousedown">
		</handler>
	</handlers>
	-->
	</binding>
	
	
	<!-- borrowed from Pawel (jabberzilla)-->
	<binding id="autosizetextbox">
	
    <resources>
      <stylesheet src="chrome://global/skin"/>
      <stylesheet src="chrome://chat/skin/chatbox.css"/>
    </resources>

		
	<content>
		<xul:vbox flex="1">
		  <!-- XXX should not accept richtext.. or convert it ti plain -->
		  <xul:iframe id="contentFrame" style="height: 2em"/>
		</xul:vbox>
	</content>

	
	
	<implementation>

      <property name="content" readonly="true"
        onget="return this._iframe.contentDocument.body.innerHTML;" />

				
		<constructor><![CDATA[
			this.listeners = [];
			this._iframe = document.getAnonymousElementByAttribute(this, "id", "contentFrame");
			this._action = null;
			this.scrollSize = 0;
			window.setTimeout(function(body) { body.style.margin = "0";}, 0,
				this._iframe.contentDocument.body);
			setTimeout(function(me) { me._init() }, 500, this);

		]]></constructor>	

		<method name="addListener">
			<parameter name="listener"/>
			<body><![CDATA[
				this.listeners.push(listener);
			]]></body>		
		</method>
		
	  <method name="_init">
		  <body><![CDATA[
		
			var me = this;
			var doc = this._iframe.contentDocument;
			var win = this._iframe.contentWindow;		
			doc.body.style.margin = "0";
			doc.designMode = "on";
			//doc.execCommand("usecss", true, true);
			doc.body.bgColor="#ffffff";	
			doc.body.style.fontFamily = "Arial";
			doc.body.style.fontSize = "12px";
			
		  try{
			win.focus();
		  }catch(e){} // sometimes we can't set focus because of modal dialogs
		    //win.setCursor("auto");
			this.maybeResize(this);
		
		
		
			var ev = ["DOMNodeInserted", "DOMNodeRemoved", "DOMAttrModified",
			  "DOMCharacterDataModified"];

            for (var i = 0; i < ev.length; i++)
              doc.body.addEventListener(ev[i],
                function (event) {
                  if (!me.resizeTimeout)
                    me.resizeTimeout = window.setTimeout(me.maybeResize, 0, me);
                }, false);
              win.addEventListener("resize",
                function (event) {
                  if (!me.resizeTimeout)
                    me.resizeTimeout = window.setTimeout(me.maybeResize, 0, me);
                }, false);

            win.addEventListener("keypress",
              function (event) {
		  
                if (event.keyCode == KeyEvent.DOM_VK_TAB)
                  event.preventDefault();
		  
                if (event.keyCode == KeyEvent.DOM_VK_RETURN && !event.shiftKey)
                {
				   
				  if ( me.content == "<br>" ) {
					  event.preventDefault();
					   return true;
				  }
		  
				  if (me.listeners.some( function(l){ return !l.cansend } )) { 
						  me.listeners.forEach(function(l){ 
							  l.onError();
						  });
						return false;  
		  
				  }

				  if(me.listeners.length > 0){
					  var plain = me.content
									  .replace(/<br>/g, "\n")
									  .replace(/&nbsp;/g, " ")
									  .replace(/&gt;/g, ">")
									  .replace(/&lt;/g, "<")
									  .replace(/&amp;/g, "&");
					
					  me.composing = false;
					  me.listeners.forEach(function(l){ 
						  l.onEnter(plain, me.content);
					  });
				  }
		  
                  me.clear();

                  event.preventBubble();
                  event.preventDefault();
                  return false;
                } 
				
				me.lastletter++;
	
				window.setTimeout(function(nr){
					if(nr == me.lastletter && me.composing){
						me.composing = false;
						me.listeners.forEach(function(l){ 
							l.onChatstate(false);
						});
					}
				}, 4000, me.lastletter);
				
				if(!me.composing){
					me.composing = true;
					me.listeners.forEach(function(l){ 
						l.onChatstate(true);
					});
				}
                return true;
              }, true);
		  
			  this.composing = false;
			  this.lastletter = 0;

              doc = win = null; 
	  
		  ]]></body>
		  
	  </method>
      <method name="clear">
        <body><![CDATA[
	
            var ed = this._iframe.docShell.
              QueryInterface(Components.interfaces.nsIEditorDocShell).editor;
            ed.selectAll();
            ed.deleteSelection(0);
          ]]></body>
      </method>		
      <method name="focus">
        <body><![CDATA[
			var win = this._iframe.contentWindow;
            win.focus();
          ]]></body>
      </method>	

	
		
      <method name="sendKey">
        <parameter name="keycode"/>
        <body>
          <![CDATA[
			var win = this._iframe.contentWindow;
			var e = document.createEvent("KeyEvent");
			e.initKeyEvent("keypress", true, true, window, false, false, true, false, keycode, 0, win);
			win.dispatchEvent(e);

          ]]>
        </body>
	  </method>
		  	
      <method name="maybeResize">
        <parameter name="me"/>
        <body>
          <![CDATA[
          var e = me._iframe.contentDocument.body.parentNode;
          var w = me._iframe.contentWindow;
          var h = e.offsetHeight;

          me.resizeTimeout = null;

          if (me.scrollSize <= 0) {
            if (w.scrollMaxX)
              me.scrollSize = w.scrollMaxY - e.offsetHeight - me.scrollSize;
            else
              me.scrollSize = -e.offsetHeight;
          }

          if (h > 0.5*window.innerHeight)
            h = 0.5*window.innerHeight;

          if (w.scrollMaxY ||
              e.offsetHeight < w.innerHeight)
          me._iframe.style.height = (h + me._iframe.boxObject.height - w.innerHeight +
                  (w.scrollMaxX ? me.scrollSize : 0)) + "px";

          ]]>
        </body>
      </method>		
	</implementation>

	</binding>
	
	
	
  
	<binding id="chatbox">
		<resources>
		  <stylesheet src="chrome://global/skin"/>
		  <stylesheet src="chrome://chat/content/bindings.css"/>
		</resources>
		<content orient="vertical">
			<xul:hbox height="26" id="contactbar" >	
				<xul:label id="show" flex="1" crop="right" show="unavailable"/>	
				<children includes="xul:button"/>
			</xul:hbox>
			<children/>
			<xul:messagebox id="message-history" flex="1"/>
			<xul:autosizetextbox id="message"/>
		</content>

		<implementation>
			<property name="jid" onset="this._jid = val;" onget="return this._jid;"/>
			<property name="contactinfo" readonly="true" 
				onget="return document.getAnonymousElementByAttribute(this, 'id', 'show');"/>
			<property name="messagebox" readonly="true" 
				onget="return document.getAnonymousElementByAttribute(this, 'id', 'message-history');"/>
			<property name="inputbox" readonly="true" 
				onget="return document.getAnonymousElementByAttribute(this, 'id', 'message');"/>	
		</implementation>

	</binding>
</bindings>